<?xml version="1.0"?>
<!DOCTYPE api SYSTEM ".\xmlfapi.dtd">
<api name="npf_f_wmax_bscp">
	<preamble>
		INTEL CONFIDENTIAL

		Copyright 2000 - 2007 Intel Corporation All Rights Reserved.

		The source code contained or described herein and all documents related to
		the source code ("Material") are owned by Intel Corporation or its
		suppliers or licensors.

		Title to the Material remains with Intel Corporation or its suppliers and
		licensors. The Material contains trade secrets and proprietary and
		confidential information of Intel or its suppliers and licensors.
		The Material is protected by worldwide copyright and trade secret laws and
		treaty provisions. No part of the Material may be used, copied, reproduced,
		modified, published, uploaded, posted, transmitted, distributed,
		or disclosed in any way without Intel's prior express written permission.

		No license under any patent, copyright, trade secret or other intellectual
		property right is granted to or conferred upon you by disclosure
		or delivery of the Materials, either expressly, by implication, inducement,
		estoppel or otherwise. Any license under such intellectual property rights
		must be express and approved by Intel in writing.
	</preamble>
	<imports>
		<import>npf</import>
		<import>npf_f_error</import>
		<import>npf_f_stats</import>
	</imports>
	<section name="Global Data Types">
		<typedef name="NPF_F_wmaxBscpHandle_t" type="NPF_uint32_t">
			<descr>
				Generic Handle.
				Generic type to cover all kinds of handles used by this API.
			</descr>
		</typedef>
		<typedef name="NPF_F_wmaxBscpPhyIdent_t" type="NPF_F_wmaxBscpHandle_t">
			<descr>
				PHY Identifier.
				An identifier of the PHY instance, responsible for a single sector.
			</descr>
		</typedef>
		<typedef name="NPF_F_wmaxBscpMacHandle_t" type="NPF_F_wmaxBscpHandle_t">
			<descr>
				MAC Instance Handle.
				A handle to the MAC instance, responsible for a single sector.
			</descr>
		</typedef>
		<typedef name="NPF_F_wmaxBscpSsHandle_t" type="NPF_F_wmaxBscpHandle_t">
			<descr>
				Subscriber Handle.
				A handle to the single subscriber object.
			</descr>
		</typedef>
		<typedef name="NPF_F_wmaxBscpSsLocUpdateHandle_t" type="NPF_F_wmaxBscpHandle_t">
			<descr>
				Location Update Subscriber Handle.
				A handle to the object used during Secure Location Update.
			</descr>
		</typedef>
		<typedef name="NPF_F_wmaxBscpPscHandle_t" type="NPF_F_wmaxBscpHandle_t">
			<descr>
				Power Saving Class Handle.
				A handle to the single power saving class object.
			</descr>
		</typedef>
		<typedef name="NPF_F_wmaxBscpSvcFlowHandle_t" type="NPF_F_wmaxBscpHandle_t">
			<descr>
				Service Flow Handle.
				A handle to the single service flow object.
			</descr>
		</typedef>
		<typedef name="NPF_F_wmaxBscpSaHandle_t" type="NPF_F_wmaxBscpHandle_t">
			<descr>
				Security Association Handle.
				A handle to the single security association.
			</descr>
		</typedef>
		<typedef name="NPF_F_wmaxBscpPhsRuleHandle_t" type="NPF_F_wmaxBscpHandle_t">
			<descr>
				Packet Header Suppression Rule Handle.
				A handle to the single PHS rule.
			</descr>
		</typedef>
		<typedef name="NPF_F_wmaxBscpCsRuleHandle_t" type="NPF_F_wmaxBscpHandle_t">
			<descr>
				CS Rule Handle.
				A handle to the single classification rule (CS rule).
			</descr>
		</typedef>
		<typedef name="NPF_F_wmaxBscpZoneHandle_t" type="NPF_F_wmaxBscpHandle_t">
			<descr>
				OFDMA Zone Identifier.
				A handle to the single OFDMA zone.
			</descr>
		</typedef>
		<typedef name="NPF_F_wmaxBscpZoneSubAllocHandle_t" type="NPF_F_wmaxBscpHandle_t">
			<descr>
				Sub-allocation inside a Zone.
				A handle to the single sub-allocation (e.g. CDMA) inside OFDMA zone.
			</descr>
		</typedef>
		<typedef name="NPF_F_wmaxBscpMacCapHandle_t" type="NPF_F_wmaxBscpHandle_t">
			<descr>
				CAP Handle.
				A handle to the single Correction and Action Profile (CAP) definition.
			</descr>
		</typedef>
		<typedef name="NPF_F_wmaxBscpMobNbrHandle_t" type="NPF_F_wmaxBscpHandle_t">
			<descr>
				Neighbor BS Handle.
				A handle to the neighbor base station, advertised through MOB_NBR-ADV message.
			</descr>
		</typedef>
		<define brief="Valid QoS Parameters Masks">
			<descr>
				These mask bits are used during changing service flows parameters to indicate
				which parameters are valid within the structure defining QOS parameters.
			</descr>
			<see>NPF_F_wmaxBscpQosProfileUgs_t</see>
			<see>NPF_F_wmaxBscpQosProfileRtVr_t</see>
			<see>NPF_F_wmaxBscpQosProfileNrtVr_t</see>
			<see>NPF_F_wmaxBscpQosProfileErtVr_t</see>
			<see>NPF_F_wmaxBscpQosProfileBe_t</see>
			<see>NPF_F_wmaxBscpQosProfileBe_t</see>
			<see>NPF_F_wmaxBscpSvcFlowChange</see>
			<field name="NPF_F_WMAX_BSCP_QOS_PROFILE_MASK_TRAFFIC_PRIORITY" brief="Traffic Priority Option Specified">
				<value>(0x01ull &lt;&lt; 0)</value>
			</field>
			<field name="NPF_F_WMAX_BSCP_QOS_PROFILE_MASK_MAX_SUSTAINED_TRAFFIC_RATE" brief="Maximum Sustained Traffic Rate Option Specified">
				<value>(0x01ull &lt;&lt; 1)</value>
			</field>
			<field name="NPF_F_WMAX_BSCP_QOS_PROFILE_MASK_MAX_TRAFFIC_BURST" brief="Maximum Traffic Burst Option Specified">
				<value>(0x01ull &lt;&lt; 2)</value>
			</field>
			<field name="NPF_F_WMAX_BSCP_QOS_PROFILE_MASK_MIN_RESERVED_TRAFFIC_RATE" brief="Minimum Reserved Traffic Rate Option Specified">
				<value>(0x01ull &lt;&lt; 3)</value>
			</field>
			<field name="NPF_F_WMAX_BSCP_QOS_PROFILE_MASK_TOLERATED_JITTER" brief="Tolerated Jitter Option Specified">
				<value>(0x01ull &lt;&lt; 4)</value>
			</field>
			<field name="NPF_F_WMAX_BSCP_QOS_PROFILE_MASK_MAXIMUM_LATENCY" brief="Maximum Latency Option Specified">
				<value>(0x01ull &lt;&lt; 5)</value>
			</field>
			<field name="NPF_F_WMAX_BSCP_QOS_PROFILE_MASK_UL_UG_INTERVAL" brief="Unsolicited Grant Interval">
				<value>(0x01ull &lt;&lt; 6)</value>
			</field>
		</define>
		<define brief="ARQ Parameter Update Mask">
			<descr>
				These bits can be used to construct NPF_F_wmaxBscpArqUpdateParms_t.updateMask.
			</descr>
			<see>NPF_F_wmaxBscpArqUpdateParms_t</see>
			<field name="NPF_F_WMAX_BSCP_ARQ_UPDATE_WINDOW_SIZE" brief="When set, new ARQ window size is valid.">
				<value>(0x01ull &lt;&lt; 0)</value>
			</field>
		</define>
		<enum type="NPF_F_wmaxBscpErrorType_t" brief="Error Type">
			<descr>
			Defines the BSCP specific error types.
			This data type is used to indicate the presences and type of an error
			that occurred while processing an asynchronous operation.
			</descr>
			<field name="NPF_F_WMAX_BSCP_ERROR_NO_ERROR" value="NPF_NO_ERROR" brief="The operation completed successfully."></field>
			<field name="NPF_F_WMAX_BSCP_ERROR_OBJ_EXISTS" value="NPF_F_WMAX_BASE_ERR" brief="BSCP creation failed since the requested BSCP already exists."></field>
			<field name="NPF_F_WMAX_BSCP_ERROR_NO_RES" brief="The operation failed since there are no free resources (for example memory)."></field>
			<field name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="The operation failed since the specified parameters are invalid."></field>
			<field name="NPF_F_WMAX_BSCP_ERROR_OBJ_NONEXISTANT" brief="The operation on the BSCP failed since the BSCP does not exist."></field>
			<field name="NPF_F_WMAX_BSCP_ERROR_OBJ_INVALID_STATE" brief="The operation on an BSCP failed since the object state does not allow for the operation."></field>
			<field name="NPF_F_WMAX_BSCP_ERROR_TIME_OUT" brief="The operation failed due to time out."></field>
			<field name="NPF_F_WMAX_BSCP_ERROR_INTERRUPTED" brief="The operation has been interrupted due to another BSCP call (for example the BSCP has been deleted)."></field>
			<field name="NPF_F_WMAX_BSCP_ERROR_NOT_NEGOTIATED" brief="The operation has been interrupted since requested parameter was not negotiated with SS."></field>
			<field name="NPF_F_WMAX_BSCP_ERROR_NOT_SUPPORTED" brief="The requested operation/parameter is not supported by the current SW version."></field>
			<field name="NPF_F_WMAX_BSCP_ERROR_AUTH_INVALID" brief="The operation failed due to unsuccessful authentication."></field>
		</enum>
		<enum type="NPF_F_wmaxBscpObjType_t" brief="BSCP Object Type">
			<descr>
			Identifies handle types that may be passed to the BSCP object
			</descr>
			<field name="NPF_F_WMAX_BSCP_OBJ_TYPE_PHY" brief="PHY Entity"></field>
			<field name="NPF_F_WMAX_BSCP_OBJ_TYPE_MAC" brief="MAC Instance Handle"></field>
			<field name="NPF_F_WMAX_BSCP_OBJ_TYPE_CAP" brief="CAP Instance Handle"></field>
			<field name="NPF_F_WMAX_BSCP_OBJ_TYPE_SS" brief="Subscriber Handle"></field>
			<field name="NPF_F_WMAX_BSCP_OBJ_TYPE_SS_LOC_UPDATE" brief="Subscriber Location Update Object Handle"></field>
			<field name="NPF_F_WMAX_BSCP_OBJ_TYPE_SS_PSC" brief="Subscriber Power Saving Class (PSC) Object Handle"></field>
			<field name="NPF_F_WMAX_BSCP_OBJ_TYPE_SVC_FLOW" brief="Service Flow Handle"></field>
			<field name="NPF_F_WMAX_BSCP_OBJ_TYPE_SA" brief="Security Association (SA) Handle"></field>
			<field name="NPF_F_WMAX_BSCP_OBJ_TYPE_PHS_RULE" brief="PHS Rule Handle"></field>
			<field name="NPF_F_WMAX_BSCP_OBJ_TYPE_CS_RULE" brief="CS Rule Handle"></field>
			<field name="NPF_F_WMAX_BSCP_OBJ_TYPE_ZONE" brief="Identifies Zone Handle."></field>
			<field name="NPF_F_WMAX_BSCP_OBJ_TYPE_ZONE_SUB_ALLOC" brief="Identifies Sub-allocation Handle."></field>
			<field name="NPF_F_WMAX_BSCP_OBJ_TYPE_NBR" brief="Identifies neighbor BS Handle."></field>
		</enum>
		<enum type="NPF_F_wmaxBscpServiceDirection_t" brief="Data Flow Direction">
			<descr>
				This defines the direction for a service flow; either UL or DL.
			</descr>
			<field name="NPF_F_WMAX_BSCP_DIRECTION_UL" brief="Uplink"></field>
			<field name="NPF_F_WMAX_BSCP_DIRECTION_DL" brief="Downlink"></field>
		</enum>
		<enum type="NPF_F_wmaxBscpServiceType_t" brief="Data Delivery Service Type">
			<descr>
				This defines the set of data delivery service types used for both uplink and downlink service flows.
			</descr>
			<field name="NPF_F_WMAX_BSCP_SERVICE_TYPE_UGS" brief="Unsolicited Grant Service"></field>
			<field name="NPF_F_WMAX_BSCP_SERVICE_TYPE_BE" brief="Best Effort Service"></field>
			<field name="NPF_F_WMAX_BSCP_SERVICE_TYPE_RTVR" brief="Real-Time Variable Rate Service"></field>
			<field name="NPF_F_WMAX_BSCP_SERVICE_TYPE_NRTVR" brief="Non Real-Time Variable Rate Service"></field>
			<field name="NPF_F_WMAX_BSCP_SERVICE_TYPE_ERTVR" brief="Extended Real-Time Variable Rate Service"></field>
		</enum>
		<struct type="NPF_F_wmaxBscpOctetString_t" brief="Octet String">
			<descr>
				A structure containing an arbitrary length sequence of octets.
			</descr>
			<vector name="octetString" type="NPF_uint8_t" brief="Octet String.">
				<length name="octetStringLength" type="NPF_uint32_t" brief="Size of octet string."></length>
			</vector>
		</struct>
		<struct type="NPF_F_wmaxBscpObjectId_t" brief="BSCP Object Identifier">
			<selectunion name="u" type="NPF_F_wmaxBscpObjIdUnion_t">
				<selectfield type="NPF_F_wmaxBscpObjType_t" name="objType" brief="Object Type"></selectfield>
				<field name="ident" type="NPF_F_wmaxBscpPhyIdent_t">
					<descr>PHY Entity ID.</descr>
					<selector>NPF_F_WMAX_BSCP_OBJ_TYPE_PHY</selector>
				</field>
				<field name="macHandle" type="NPF_F_wmaxBscpMacHandle_t">
					<descr>MAC Instance Handle</descr>
					<selector>NPF_F_WMAX_BSCP_OBJ_TYPE_MAC</selector>
				</field>
				<field name="capHandle" type="NPF_F_wmaxBscpMacCapHandle_t">
					<descr>CAP Instance Handle</descr>
					<selector>NPF_F_WMAX_BSCP_OBJ_TYPE_CAP</selector>
				</field>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t">
					<descr>Subscriber Handle</descr>
					<selector>NPF_F_WMAX_BSCP_OBJ_TYPE_SS</selector>
				</field>
				<field name="ssLocUpdateHandle" type="NPF_F_wmaxBscpSsLocUpdateHandle_t">
					<descr>Subscriber Location Update Object Handle</descr>
					<selector>NPF_F_WMAX_BSCP_OBJ_TYPE_SS_LOC_UPDATE</selector>
				</field>
				<field name="ssPscHandle" type="NPF_F_wmaxBscpPscHandle_t">
					<descr>Subscriber Power Saving Class Object Handle</descr>
					<selector>NPF_F_WMAX_BSCP_OBJ_TYPE_SS_PSC</selector>
				</field>
				<field name="svcFlowHandle" type="NPF_F_wmaxBscpSvcFlowHandle_t">
					<descr>Service Flow Handle</descr>
					<selector>NPF_F_WMAX_BSCP_OBJ_TYPE_SVC_FLOW</selector>
				</field>
				<field name="saHandle" type="NPF_F_wmaxBscpSaHandle_t">
					<descr>Security Association Rule Handle</descr>
					<selector>NPF_F_WMAX_BSCP_OBJ_TYPE_SA</selector>
				</field>
				<field name="phsRuleHandle" type="NPF_F_wmaxBscpPhsRuleHandle_t">
					<descr>PHS Rule Handle</descr>
					<selector>NPF_F_WMAX_BSCP_OBJ_TYPE_PHS_RULE</selector>
				</field>
				<field name="csRuleHandle" type="NPF_F_wmaxBscpCsRuleHandle_t">
					<descr>CS Rule Handle</descr>
					<selector>NPF_F_WMAX_BSCP_OBJ_TYPE_CS_RULE</selector>
				</field>
				<field name="nbrHandle" type="NPF_F_wmaxBscpMobNbrHandle_t">
					<descr>Neighbor BS handle"&gt;</descr>
					<selector>NPF_F_WMAX_BSCP_OBJ_TYPE_NBR</selector>
				</field>
		         <field name="zoneHandle" type="NPF_F_wmaxBscpZoneHandle_t">
                     <descr>zone handle"&gt;</descr>
					<selector>NPF_F_WMAX_BSCP_OBJ_TYPE_ZONE</selector>
				</field>

			</selectunion>
		</struct>
		<struct type="NPF_F_wmaxBscpQosProfileUgs_t" brief="Unsolicited Grant QOS Profile">
			<descr>
				QOS profile for continuous grant service.
			</descr>
			<field name="parmMask" type="NPF_uint8_t" brief="Defines which QOS parameters are valid.  See: QOS Profile Mask."></field>
			<field name="parmToleratedJitter" type="NPF_uint32_t" brief="This parameter specifies the maximum delay variation (jitter) for the connection. (msec)"></field>
                        <field name="parmReservedTrafficRate" type="NPF_uint32_t" brief="This parameter specifies the reserved traffic rate for this service flow (Maximum Sustained Traffic Rate - TLV [145/146].7). [bits/sec]"></field>
			<field name="parmMaximumLatency" type="NPF_uint32_t" brief="This parameter specifies the maximum latency between the reception of a packet by the BS (or SS) on its network interface and forwarding of the packet to the RF interface [msec].">
				<descr>
						Due to the nature of the UGS connection, on UL direction the maximum latency must be equal or bigger then unsolicited grant interval parmUlUnsolicitedGrantInterval.
					</descr>
			</field>
			<field name="parmUlUnsolicitedGrantInterval" type="NPF_uint32_t" brief="This parameter specifies the nominal interval between successive polling grants opportunities [msec - multiple of the frame size].">
				<descr>
						Valid for UL, ignored for DL.
					</descr>
			</field>
		</struct>
		<struct type="NPF_F_wmaxBscpQosProfileRtVr_t" brief="Real-Time Variable Rate QOS Profile">
			<descr>
				QOS profile for real-time variable rate service.
			</descr>
			<field name="parmMask" type="NPF_uint8_t" brief="Defines which QOS parameters are valid.  See: QOS Profile Mask."></field>
			<field name="parmMaximumLatency" type="NPF_uint32_t" brief="This parameter specifies the maximum latency between the reception of a packet by the BS (or SS) on its network interface and forwarding of the packet to the RF interface [msec]"></field>
			<field name="parmMinimumReservedTrafficRate" type="NPF_uint32_t" brief="This parameter specifies the minimum rate reserved for this service flow. [bits/sec]"></field>
			<field name="parmMaximumSustainedTrafficRate" type="NPF_uint32_t" brief="This parameter specifies the maximum rate allowed for this service flow. [bits/sec]"></field>
			<field name="parmTrafficPriority" type="NPF_uint8_t" brief="This parameter specifies the priority assigned to the service flow.  The higher the number, the higher the priority [0-7]"></field>
			<field name="parmUlUnsolicitedGrantInterval" type="NPF_uint32_t" brief="(UL) This parameter specifies the nominal interval between successive polling grants opportunities. (DL) ignored "></field>
		</struct>
		<!-- NRT-VR; Non Real-Time Variable Rate Data Delivery Service; Reference P802.16-2005/D7, section 6.3.19.1.3 -->
		<struct type="NPF_F_wmaxBscpQosProfileNrtVr_t" brief="Non Real-Time Variable Rate QOS Profile">
			<descr>
				QOS profile for non real-time variable rate service.
			</descr>
			<field name="parmMask" type="NPF_uint8_t" brief="Defines which QOS parameters are valid.  See: QOS Profile Mask."></field>
			<field name="parmMinimumReservedTrafficRate" type="NPF_uint32_t" brief="This parameter specifies the minimum rate reserved for this service flow. [bits/sec]"></field>
			<field name="parmMaximumSustainedTrafficRate" type="NPF_uint32_t" brief="This parameter specifies the maximum rate allowed for this service flow. [bits/sec]"></field>
			<field name="parmTrafficPriority" type="NPF_uint8_t" brief="This parameter specifies the priority assigned to the service flow.  The higher the number, the higher the priority [0-7]"></field>
		</struct>
		<struct type="NPF_F_wmaxBscpQosProfileBe_t" brief="Best Effort QOS Profile">
			<descr>
				QOS profile for best effort service.
			</descr>
			<field name="parmMask" type="NPF_uint8_t" brief="Defines which QOS parameters are valid.  See: QOS Profile Mask."></field>
			<field name="parmMaximumSustainedTrafficRate" type="NPF_uint32_t" brief="This parameter specifies the maximum rate allowed for this service flow. [bits/sec]"></field>
			<field name="parmTrafficPriority" type="NPF_uint8_t" brief="This parameter specifies the priority assigned to the service flow.  The higher the number, the higher the priority [0-7]"></field>
		</struct>
		<struct type="NPF_F_wmaxBscpQosProfileErtVr_t" brief="Extended Real-Time Variable Rate QOS Profile">
			<descr>
				QOS profile for extended real-time variable rate service.
			</descr>
			<field name="parmMask" type="NPF_uint8_t" brief="Defines which QOS parameters are valid.  See: QOS Profile Mask."></field>
			<field name="parmMaximumLatency" type="NPF_uint32_t" brief="This parameter specifies the maximum latency between the reception of a packet and sending it to the RF interface [msec]"></field>
			<field name="parmToleratedJitter" type="NPF_uint32_t" brief="This parameter specifies the maximum delay variation (jitter) for the connection. (msec)"></field>
			<field name="parmMinimumReservedTrafficRate" type="NPF_uint32_t" brief="This parameter specifies the minimum rate reserved for this service flow. [bits/sec]"></field>
			<field name="parmMaximumSustainedTrafficRate" type="NPF_uint32_t" brief="This parameter specifies the maximum rate allowed for this service flow. [bits/sec]"></field>
			<field name="parmTrafficPriority" type="NPF_uint8_t" brief="This parameter specifies the priority assigned to the service flow.  The higher the number, the higher the priority [0-7]"></field>
			<field name="parmUlUnsolicitedGrantInterval" type="NPF_uint32_t" brief="The value of this parameter specifies the nominal interval between successive data grant opportunities for this service flow. Valid for UL, ignored for DL."></field>
		</struct>
		<!-- Union of all QOS Profiles; used in SvcFlowChange() -->
		<struct type="NPF_F_wmaxBscpQosProfile_t" brief="QOS Profile">
			<selectunion type="NPF_F_wmaxBscpQosProfileUnion_t" name="u">
				<selectfield name="serviceType" type="NPF_F_wmaxBscpServiceType_t" brief="Data Delivery Service Type"></selectfield>
				<field type="NPF_F_wmaxBscpQosProfileUgs_t" name="ugs" brief="Unsolicited Grant Service">
					<selector>NPF_F_WMAX_BSCP_SERVICE_TYPE_UGS</selector>
				</field>
				<field type="NPF_F_wmaxBscpQosProfileRtVr_t" name="rtvr" brief="Real-Time Variable Rate Service">
					<selector>NPF_F_WMAX_BSCP_SERVICE_TYPE_RTVR</selector>
				</field>
				<field type="NPF_F_wmaxBscpQosProfileNrtVr_t" name="nrtvr" brief="Non Real-Time Variable Rate Service">
					<selector>NPF_F_WMAX_BSCP_SERVICE_TYPE_NRTVR</selector>
				</field>
				<field type="NPF_F_wmaxBscpQosProfileBe_t" name="be" brief="Best Effort QoS Parameters">
					<selector>NPF_F_WMAX_BSCP_SERVICE_TYPE_BE</selector>
				</field>
				<field type="NPF_F_wmaxBscpQosProfileErtVr_t" name="ertvr" brief="Extended Real-Time Variable Rate Service">
					<selector>NPF_F_WMAX_BSCP_SERVICE_TYPE_ERTVR</selector>
				</field>
			</selectunion>
		</struct>
		<!-- QOS Profile Specification -->
		<struct type="NPF_F_wmaxBscpQosProfileSpec_t" brief="QOS Profile Specification">
			<descr>
				Service Flow QOS Profile Specification.
				Includes a set of QOS parameters and a command indicating how to apply them to the PROVISIONED, ADMITTED and ACTIVE QOS sets.
			</descr>
			<field name="parmSetType" type="NPF_uint8_t" brief="Defines the QOS parameter set type.  See: Service Flow QOS Profile Type Mask."></field>
			<field name="qosProfile" type="NPF_F_wmaxBscpQosProfile_t" brief="Defines a Service Flow QOS Profile"></field>
		</struct>
		<!-- QOS Profile Specification List -->
		<struct type="NPF_F_wmaxBscpQosProfileSpecList_t" brief="QOS Profile Specification List">
			<vector name="profileSpecs" type="NPF_F_wmaxBscpQosProfileSpec_t" brief="List of QOS Profile Specifications">
				<descr>
					Contains one or more Service Flow QOS Parameter Specifications
				</descr>
				<length name="profileSpecsNum" type="NPF_uint32_t" brief="Number of QOS Profile Specifications"></length>
			</vector>
		</struct>
		<!-- Request and Transmission Policy  -->
		<struct type="NPF_F_wmaxBscpSvcFlowReqAndTxPolicy_t" brief="Request and Transmission Policy.">
			<descr>
				This structure defines connection parameters used for a given Service Flow
			</descr>
			<field name="disableBcastReq" type="NPF_boolean_t" brief="When true, service flow shall not use broadcast bandwidth requests. Valid for UL only."></field>
			<field name="disablePiggybackReq" type="NPF_boolean_t" brief="When true, service flow shall not piggyback bandwidth requests with data. Valid for UL only."></field>
			<field name="disableFragmentation" type="NPF_boolean_t" brief="When true, disable fragmentation."></field>
			<field name="disablePhs" type="NPF_boolean_t" brief="When true, disable payload header suppression"></field>
			<field name="disablePacking" type="NPF_boolean_t" brief="When true, disable packing multiple SDUs (or fragments) into single MAC-CPS PDU."></field>
			<field name="disableCrc" type="NPF_boolean_t" brief="When true, disable including CRC in the MAC-CPS PDU."></field>
		</struct>
		<!-- UGS; Unsolicited Grant Data Delivery Service; Reference P802.16-2005/D7, section 6.3.19.1.1 -->
		<struct type="NPF_F_wmaxBscpServiceParmsUgs_t" brief="Unsolicited Grant Service Parameters">
			<descr>
				Service parameters for downlink continuous grant service.
			</descr>
			<field name="requestAndTxPolicy" type="NPF_F_wmaxBscpSvcFlowReqAndTxPolicy_t" brief="Attributes for service flow including options for PDU formation and, for uplink flows, restrictions on the type of bandwidth request options that may be used."></field>
			<field name="fixedSduEnable" type="NPF_boolean_t" brief="false = variable length SDU, true = fixed length SDU"></field>
			<field name="fixedSduSize" type="NPF_uint8_t" brief="(if fixedSduEnable == true) --&gt; SDU size to use"></field>
		</struct>
		<!-- RT-VR; Real-Time Variable Rate Data Delivery Service; Reference P802.16-2005/D7, section 6.3.19.1.2 -->
		<struct type="NPF_F_wmaxBscpServiceParmsRtVr_t" brief="Real-Time Variable Rate Service Parameters">
			<descr>
				Service parameters for real-time variable rate service.
			</descr>
			<field name="requestAndTxPolicy" type="NPF_F_wmaxBscpSvcFlowReqAndTxPolicy_t" brief="Attributes for service flow including options for PDU formation and, for uplink flows, restrictions on the type of bandwidth request options that may be used."></field>
		</struct>
		<!-- NRT-VR; Non Real-Time Variable Rate Data Delivery Service; Reference P802.16-2005/D7, section 6.3.19.1.3 -->
		<struct type="NPF_F_wmaxBscpServiceParmsNrtVr_t" brief="Non Real-Time Variable Rate Service Parameters">
			<descr>
				Service parameters for downlink real-time variable rate service.
			</descr>
			<field name="requestAndTxPolicy" type="NPF_F_wmaxBscpSvcFlowReqAndTxPolicy_t" brief="Attributes for service flow including options for PDU formation and, for uplink flows, restrictions on the type of bandwidth request options that may be used."></field>
		</struct>
		<!-- BE; Best Effort Data Delivery Service; Reference P802.16-2005/D7, section 6.3.19.1.4 -->
		<struct type="NPF_F_wmaxBscpServiceParmsBe_t" brief="Best Effort Service Parameters">
			<descr>
				Service parameters for continuous grant service.
			</descr>
			<field name="requestAndTxPolicy" type="NPF_F_wmaxBscpSvcFlowReqAndTxPolicy_t" brief="Attributes for service flow including options for PDU formation and, for uplink flows, restrictions on the type of bandwidth request options that may be used."></field>
		</struct>
		<!-- Extended Real-Time Variable Rate Data Delivery Service; Reference P802.16-2005/D7, section 6.3.19.1.5 -->
		<struct type="NPF_F_wmaxBscpServiceParmsErtVr_t" brief="Extended Real-Time Variable Rate Service Parameters">
			<descr>
				Service parameters for extended real-time variable rate service.
			</descr>
			<field name="requestAndTxPolicy" type="NPF_F_wmaxBscpSvcFlowReqAndTxPolicy_t" brief="Attributes for service flow including options for PDU formation and, for uplink flows, restrictions on the type of bandwidth request options that may be used."></field>
		</struct>
		<!-- Union of all Service Parameters used in SvcFlowAdd() -->
		<struct type="NPF_F_wmaxBscpServiceParms_t" brief="Data Delivery Service Parameters">
			<descr>
				This structure contains a union of all service parameters used in NPF_F_wmaxBscpSvcFlowAdd.
			</descr>
			<see>NPF_F_wmaxBscpSvcFlowAddArgs_t</see>
			<selectunion type="NPF_F_wmaxBscpServiceParmsUnion_t" name="u">
				<selectfield name="serviceType" type="NPF_F_wmaxBscpServiceType_t" brief="Data Delivery Service Type"></selectfield>
				<field type="NPF_F_wmaxBscpServiceParmsUgs_t" name="ugs" brief="Unsolicited Grant Service">
					<selector>NPF_F_WMAX_BSCP_SERVICE_TYPE_UGS</selector>
				</field>
				<field type="NPF_F_wmaxBscpServiceParmsRtVr_t" name="rtvr" brief="Real-Time Variable Rate Service">
					<selector>NPF_F_WMAX_BSCP_SERVICE_TYPE_RTVR</selector>
				</field>
				<field type="NPF_F_wmaxBscpServiceParmsNrtVr_t" name="nrtvr" brief="Non Real-Time Variable Rate Service">
					<selector>NPF_F_WMAX_BSCP_SERVICE_TYPE_NRTVR</selector>
				</field>
				<field type="NPF_F_wmaxBscpServiceParmsBe_t" name="be" brief="Best Effort QoS Parameters">
					<selector>NPF_F_WMAX_BSCP_SERVICE_TYPE_BE</selector>
				</field>
				<field type="NPF_F_wmaxBscpServiceParmsErtVr_t" name="ertvr" brief="Extended Real-Time Variable Rate Service">
					<selector>NPF_F_WMAX_BSCP_SERVICE_TYPE_ERTVR</selector>
				</field>
			</selectunion>
		</struct>
		<!-- ARQ Initial and Update Parameters -->
		<struct type="NPF_F_wmaxBscpArqParms_t" brief="ARQ Mode Initial Parameters">
			<descr>
				ARQ Mode Initial Parameters.
				This structure defines the Automatic Repeat Request (ARQ) parameters that can be set at initialization-time.
			</descr>
			<field name="windowSize" type="NPF_uint16_t" brief="Specifies window size (octets)."></field>
			<field name="retryTimeoutTx" type="NPF_uint16_t" brief="Specifies retry transmit timeout. (10 usec granularity)."></field>
			<field name="retryTimeoutRx" type="NPF_uint16_t" brief="Specifies retry receive timeout. (10 usec granularity)"></field>
			<field name="blockLifetime" type="NPF_uint16_t" brief="Specifies block lifetime. (10 usec granularity)"></field>
			<field name="syncLoss" type="NPF_uint16_t" brief="Specifies synchronization loss timeout. (10 usec granularity)"></field>
			<field name="deliverInOrder" type="NPF_boolean_t" brief="Specifies whether to deliver data in order (true - deliver in order, false - do not control the order)"></field>
			<field name="purgeTimeout" type="NPF_uint16_t" brief="Specifies purge timeout. (10 usec granularity)"></field>
			<field name="blockSize" type="NPF_uint16_t" brief="Specifies block size. (0-15 reserved, 16-2040 desired/agreed size in bytes, 2041-65535 reserved).  "></field>
			<field name="ackGenPeriod" type="NPF_uint16_t" brief="Specifies how often ACKs are generated. Valid only for DL connections. (10 usec granularity)"></field>
		</struct>
		<struct type="NPF_F_wmaxBscpArqUpdateParms_t" brief="ARQ Mode Update Parameters">
			<descr>
				ARQ Mode Update Parameters.
				This structure defines the Automatic Repeat Request (ARQ) parameters that can be updated at run-time.
			</descr>
			<field name="updateMask" type="NPF_uint8_t" brief="Set of ARQ parameters that are to be updated.  See: ARQ Parameter Update Mask"></field>
			<field name="windowSize" type="NPF_uint16_t" brief="Specifies window size (octets)."></field>
		</struct>
		<enum type="NPF_F_wmaxBscpSensitivityZoneType_t" brief="Sensitivity Zone Type">
			<descr>
				Defines the types of sensitivity zones.
			</descr>
			<field name="NPF_F_WMAX_BSCP_SENSITIVITY_ZONE_HIGH" value="0" brief="The high sensitivity zone."></field>
			<field name="NPF_F_WMAX_BSCP_SENSITIVITY_ZONE_LOW" brief="The low sensitivity zone."></field>
		</enum>
	</section>
	<section name="System Initialization">
		<section name="System Initialization Data Types">
			<define brief="MAC-CPS PHY Capabilities">
				<descr>
					These bits are returned in NPF_F_wmaxBscpMacCpsCaps_t.phyCapsMask.
				</descr>
				<see>NPF_F_wmaxBscpGblCpsStats_t</see>
				<field name="NPF_F_WMAX_BSCP_MAC_CPS_PHY_CAPS_OFDM" brief="MAC-CPS supports IEEE 802.16-2004 OFDM PHY.">
					<value>(0x01ull &lt;&lt; 0)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MAC_CPS_PHY_CAPS_OFDMA" brief="MAC-CPS supports P802.16-2005 OFDMA PHY.">
					<value>(0x01ull &lt;&lt; 1)</value>
				</field>
			</define>
			<struct type="NPF_F_wmaxBscpOpenArgs_t" brief="Open BSCP Interface Arguments">
				<descr>
					This structure defines parameters required to open the BSCP interface.
				</descr>
				<field name="randomSeed" type="NPF_uint8_t" size="128" brief="Random seed to initialize PKM key generator.  Recommended practices for generating random numbers for use within cryptographic systems are provided in IETF RFC 1750."></field>
			</struct>
			<enum type="NPF_F_wmaxBscpSpecVer_t" brief="Supported version of MAC specification">
				<descr>
					Defines the supported version of IEEE 802.16 specification.
				</descr>
				<field name="NPF_F_WMAX_BSCP_802_16_2001" value="1" brief="Indicates conformance with IEEE Std 802.16-2001"></field>
				<field name="NPF_F_WMAX_BSCP_802_16_2002" value="2" brief="Indicates conformance with IEEE Std 802.16c-2002 and its predecessors"></field>
				<field name="NPF_F_WMAX_BSCP_802_16_2003" value="3" brief="Indicates conformance with IEEE Std 802.16a-2003 and its predecessors"></field>
				<field name="NPF_F_WMAX_BSCP_802_16_2004" value="4" brief="Indicates conformance with IEEE Std 802.16-2004"></field>
				<field name="NPF_F_WMAX_BSCP_802_16_2005" value="5" brief="Indicates conformance with IEEE Std 802.16-2004, P802.16-2004/Cor1 and IEEE Std 802.16e-2005"></field>
			</enum>
			<struct type="NPF_F_wmaxBscpSwVer_t" brief="Software Version Number">
				<descr>
					Software Version Number.
					Software version numbers are represented by the tuple: (major.minor.build).
				</descr>
				<field name="verRelease" type="NPF_uint8_t" brief="SW Release."></field>				
				<field name="verMajor" type="NPF_uint8_t" brief="Major SW version."></field>
				<field name="verMinor" type="NPF_uint8_t" brief="Minor SW version."></field>
				<field name="verBuild" type="NPF_uint16_t" brief="Build  Number."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpBscpCaps_t" brief="BSCP Capabilities">
				<descr>
					This structure contains the MAC implementation capabilities.
				</descr>
				<see>NPF_F_wmaxBscpOpen</see>
				<field name="swVersion" type="NPF_F_wmaxBscpSwVer_t" brief="BSCP software version."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMacCpsCaps_t" brief="MAC Common Part Sublayer Capabilities">
				<descr>
					This structure contains the MAC-CPS layer capabilities.
				</descr>
				<see>NPF_F_wmaxBscpOpen</see>
				<field name="swVersion" type="NPF_F_wmaxBscpSwVer_t" brief="MAC-CPS software version."></field>
				<field name="phyCapsMask" type="NPF_uint8_t" brief="Mask indicating which PHYs are supported."></field>
				<field name="maxMac" type="NPF_uint16_t" brief="Maximum number of supported macs."></field>
				<field name="maxSs" type="NPF_uint16_t" brief="Maximum number of supported SSs across all macs."></field>
				<field name="maxConn" type="NPF_uint16_t" brief="Maximum number of supported connections across all macs. Connections objects are used for both management connections and service flows"></field>
				<field name="maxSA" type="NPF_uint16_t" brief="Maximum number of supported security associations across all macs."></field>
				<field name="maxPduSize" type="NPF_uint16_t" brief="Maximum size of MAC PDU"></field>
				<field name="maxSduSize" type="NPF_uint16_t" brief="Maximum size of MAC SDU"></field>
				<field name="maxFragSize" type="NPF_uint16_t" brief="Maximum fragment size"></field>
				<field name="minFragSize" type="NPF_uint16_t" brief="Minimum fragment size"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMacCsCaps_t" brief="MAC Convergence Sublayer Capabilities">
				<descr>
					Asynchronous response for NPF_F_wmaxBscpOpen().
					This structure contains all the MAC-CPS layer capabilities.
				</descr>
				<see>NPF_F_wmaxBscpOpen</see>
				<field name="swVersion" type="NPF_F_wmaxBscpSwVer_t" brief="MAC_CS software version."></field>
				<field name="maxCsRules" type="NPF_uint16_t" brief="Maximum number of MAC_CS rules across all macs."></field>
				<field name="maxPhsRules" type="NPF_uint16_t" brief="Maximum number of PHS rules across all macs."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpOpenResponseArgs_t" brief="Open BSCP Response Arguments">
				<descr>
					Asynchronous response for NPF_F_wmaxBscpOpen().
					This structure contains all the MAC-CPS layer capabilities.
				</descr>
				<see>NPF_F_wmaxBscpOpen</see>
				<field name="specVersion" type="NPF_F_wmaxBscpSpecVer_t" brief="Supported version of IEEE 802.16 specification."></field>
				<field name="bscpCaps" type="NPF_F_wmaxBscpBscpCaps_t" brief="BSCP Capabilities."></field>
				<field name="macCpsCaps" type="NPF_F_wmaxBscpMacCpsCaps_t" brief="MAC-CPS Capabilities."></field>
				<field name="macCsCaps" type="NPF_F_wmaxBscpMacCsCaps_t" brief="MAC-CS Capabilities."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSetPhySapAddrArgs_t" brief="Set PHY SAP Address Arguments">
				<descr>
					This structure defines parameters used for PHY SAP interface over Ethernet interface.
				</descr>
				<field name="ethAddress" type="NPF_uint8_t" size="6" brief="Base Ethernet MAC address to be used for PHY SAP">
					<descr>
						Only higher 4 bytes are valid - the rest is set according to the PHY SAP definition.
					</descr>
				</field>
			</struct>
			<enum type="NPF_F_wmaxBscpCloseType_t" brief="BSCP Close Type">
				<descr>
					Identifies the type of close operation that should be performed.
				</descr>
				<field name="NPF_F_WMAX_BSCP_CLOSE_NORMAL" brief="Performs a graceful close operation."></field>
				<field name="NPF_F_WMAX_BSCP_CLOSE_PHY_DOWN" brief="Performs an immediate close by cleaning up BSCP objects only.  This option should only used after a PHY-DOWN indication"></field>
			</enum>
			<struct type="NPF_F_wmaxBscpCloseArgs_t" brief="Close BSCP Interface Arguments">
				<descr>
					This structure defines parameters required to close the BSCP interface.  closeType specifies the type of close operation to perform (NORMAL or PHY_DOWN).
					A NORMAL close gracefully disconnects all subscribers, closes all MAC instances and shuts down the BSCP object.
					A PHY_DOWN close action frees all previously allocated objects without interaction with subscribers.
				</descr>
				<field name="closeType" type="NPF_F_wmaxBscpCloseType_t" brief="Type of close operation"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSetTimeArgs_t" brief="Set Time Arguments">
				<descr>
					This structure defines a time synchronization structure.
				</descr>
				<field name="seconds" type="NPF_uint32_t" brief="Value of seconds since the Epoch (00:00:00 UTC, January 1, 1970)"></field>
				<field name="useconds" type="NPF_uint32_t" brief="Value of micro-seconds"></field>
				<field name="tzMinutesWest" type="NPF_uint32_t" brief="Timezone in number of minutes west of Greenwich"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSetTimeResponseArgs_t" brief="Change of time and timezone on BS Response Arguments">
				<descr>
				Asynchronous response for NPF_F_wmaxBscpSetTime.
				</descr>
				<see>NPF_F_wmaxBscpSetTime</see>
				<field type="NPF_F_wmaxBscpErrorType_t" name="timeChangeErrCode">
					<descr>
						Error Code.
					</descr>
				</field>
			</struct>
			<define brief="MAC-CPS Managed Global Statistics Mask">
				<descr>
					These bits can be used to enable and reset global MAC-CPS statistics.
				</descr>
				<see>NPF_F_wmaxBscpGblCpsStats_t</see>
				<field name="NPF_F_WMAX_BSCP_STAT_G_CPS_ALL" brief="Mask to configure or reset all MAC-CPS managed global statistics.">
					<value>(-1ull)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_G_CPS_UL_PDU_DROPPED_NO_RES" brief="Number of received MAC PDUs dropped due to lack of resources.">
					<value>(0x01ull &lt;&lt; 0)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_G_CPS_UL_SDU_CTRL_DROPPED_NO_RES" brief="Number of received MAC SDUs containing MAC control messages dropped due to lack of resources.">
					<value>(0x01ull &lt;&lt; 1)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_G_CPS_UL_SDU_DATA_DROPPED_NO_RES" brief="Number of received MAC SDUs dropped due to lack of resources.">
					<value>(0x01ull &lt;&lt; 2)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_G_CPS_DL_PDU_DROPPED_NO_RES" brief="Number of MAC PDUs not transmitted due to lack of resources.">
					<value>(0x01ull &lt;&lt; 3)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_G_CPS_DL_SDU_CTRL_DROPPED_NO_RES" brief="Number of MAC SDUs containing MAC control messages not transmitted due to lack of resources.">
					<value>(0x01ull &lt;&lt; 4)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_G_CPS_DL_SDU_DATA_DROPPED_NO_RES" brief="Number of MAC SDUs not transmitted due to lack of resources.">
					<value>(0x01ull &lt;&lt; 5)</value>
				</field>
			</define>
			<struct type="NPF_F_wmaxBscpGblCpsStats_t" brief="Global MAC-CPS Statistics">
				<descr>
					This structure contains current value of global statistics collected by the MAC-CPS layer.
				</descr>
				<see>NPF_F_wmaxBscpGblStats_t</see>
				<field name="gCpsUlPduDroppedNoRes" type="NPF_uint64_t" brief="Number of received MAC PDUs dropped due to lack of resources."></field>
				<field name="gCpsUlSduCtrlDroppedNoRes" type="NPF_uint64_t" brief="Number of received MAC SDUs containing MAC control messages dropped due to lack of resources."></field>
				<field name="gCpsUlSduDataDroppedNoRes" type="NPF_uint64_t" brief="Number of received MAC SDUs dropped due to lack of resources."></field>
				<field name="gCpsDlPduDroppedNoRes" type="NPF_uint64_t" brief="Number of MAC PDUs not transmitted due to lack of resources."></field>
				<field name="gCpsDlSduCtrlDroppedNoRes" type="NPF_uint64_t" brief="Number of MAC SDUs containing MAC control messages not transmitted due to lack of resources."></field>
				<field name="gCpsDlSduDataDroppedNoRes" type="NPF_uint64_t" brief="Number of MAC SDUs not transmitted due to lack of resources."></field>
			</struct>
			<define brief="MAC-CS Managed Global Statistics Mask">
				<descr>
					These bits can be used to enable and reset global MAC-CS statistics.
				</descr>
				<see>NPF_F_wmaxBscpGblCpsStats_t</see>
				<field name="NPF_F_WMAX_BSCP_STAT_G_CS_ALL" brief="Mask to configure or reset all MAC-CS managed global statistics.">
					<value>(-1ull)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_G_CS_DL_SDU_DROPPED_NO_RULE" brief="Number of DL packets which could not be classified.">
					<value>(0x01ull &lt;&lt; 0)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_G_CS_DL_SDU_DROPPED_WRONG_HEADER" brief="Number of DL packets dropped due to errors in IP header.">
					<value>(0x01ull &lt;&lt; 1)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_G_CS_DL_SDU_DROPPED_NO_RES" brief="Number of DL packets dropped at CS layer due to lack of resources.">
					<value>(0x01ull &lt;&lt; 2)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_G_CS_UL_SDU_DROPPED_NO_RES" brief="Number of UL packets dropped at CS layer due to lack of resources.">
					<value>(0x01ull &lt;&lt; 3)</value>
				</field>
			</define>
			<struct type="NPF_F_wmaxBscpGblCsStats_t" brief="Global MAC-CS Statistics">
				<descr>
					This structure contains current value of global statistics collected by the MAC-CS layer.
				</descr>
				<see>NPF_F_wmaxBscpGblStats_t</see>
				<field name="gCsDlSduDroppedNoRule" type="NPF_uint64_t" brief="Number of DL packets which could not be classified."></field>
				<field name="gCsDlSduDroppedWrongHeader" type="NPF_uint64_t" brief="Number of DL packets dropped due to errors in IP header."></field>
				<field name="gCsDlSduDroppedNoRes" type="NPF_uint64_t" brief="Number of DL packets dropped at CS layer due to lack of resources."></field>
				<field name="gCsUlSduDroppedNoRes" type="NPF_uint64_t" brief="Number of UL packets dropped at CS layer due to lack of resources."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpGblStats_t" brief="Global Statistics">
				<descr>
					This structure contains statistics gathered outside of any MAC instance.
				</descr>
				<see>NPF_F_wmaxBscpGblStatsGetResponseArgs_t</see>
				<field name="gCpsStats" type="NPF_F_wmaxBscpGblCpsStats_t" brief="Global statistics gathered by the MAC-CPS component."></field>
				<field name="gCsStats" type="NPF_F_wmaxBscpGblCsStats_t" brief="Global statistics gathered by the MAC-CS component."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpGblStatsConfigArgs_t" brief="Configure Global Statistics Arguments">
				<descr>
					This structure defines parameters to configure gathering of global statistics.
				</descr>
				<field name="gCpsConfigMask" type="NPF_F_statsConfig_t" brief="Mask specifies which statistics will be collected.  Also causes counters to be initialized to zero.  See: MAC-CPS Managed Global Statistics Mask."></field>
				<field name="gCsConfigMask" type="NPF_F_statsConfig_t" brief="Mask specifies which statistics will be collected.  Also causes counters to be initialized to zero.  See: MAC-CS Managed Global Statistics Mask."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpGblStatsGetArgs_t" brief="Get Global Statistics Arguments">
				<descr>
					This structure defines parameters to retrieve and reset global statistics.
				</descr>
				<field name="gCpsResetMask" type="NPF_uint64_t" brief="Mask specifies which statistics will be reset.  See: MAC-CPS Global Statistics Mask."></field>
				<field name="gCpResetMask" type="NPF_uint64_t" brief="Mask specifies which statistics will be reset.  See: MAC-CS Global Statistics Mask."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpGblStatsGetResponseArgs_t" brief="Global Statistics Get Response Arguments">
				<descr>
					Asynchronous response for NPF_F_wmaxBscpGblStatsGet.
				</descr>
				<see>NPF_F_wmaxBscpGblStatsGet</see>
				<field name="gStats" type="NPF_F_wmaxBscpGblStats_t" brief="Global Statistics."></field>
			</struct>
		</section>
		<section name="System Initialization Functions">
			<descr>
				This section defines the BSCP Initialization Functions.
			</descr>
			<func name="NPF_F_wmaxBscpOpen" type="NPF_error_t" brief="Open BSCP Interface" xdrid="RPC_WMAX_BSCP_OPEN">
				<descr>
					This function initializes the Base Station Control Plane (BSCP) module. It should be called once during
					Base Station initialization. Initialization of the random generator used for security support 
					is performed in this step.
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpOpenArgs_t *" name="openArgs">
					<descr>
						BSCP open arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to indicate that the operation has been completed.
						The callback is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_OPEN.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpSetPhySapAddr" type="NPF_error_t" brief="Set PHY SAP Address" xdrid="RPC_WMAX_BSCP_SET_PHY_SAP_ADDR">
				<descr>
					This function sets base address to be used for PHY SAP interface over Ethernet. 
					It should be used only when Ethernet encapsulation for PHY SAP is used and default Ethernet address must be changed.
					This function may be called only before first call to NPF_F_wmaxBscpMacAdd() function. 					
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpSetPhySapAddrArgs_t *" name="setPhyAddrArgs">
					<descr>
						Arguments for PHY SAP interface.
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to indicate that the operation has been completed.
						The callback is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_OPEN.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpClose" type="NPF_error_t" brief="Close BSCP Interface" xdrid="RPC_WMAX_BSCP_CLOSE">
				<descr>
					This function closes the BSCP module. It should be called only during BS graceful shutdown. 
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpCloseArgs_t *" name="closeArgs">
					<descr>
						BSCP interface arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
					</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_CLOSE.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpSetTime" type="NPF_error_t" brief="Set Time" xdrid="RPC_WMAX_BSCP_SET_TIME">
				<descr>
					This section defines the interface for managing time synchronization between BSCP and managing application. 
					This functionality defines FAPI primitive to setup new time of day and time zone.
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpSetTimeArgs_t *" name="setTimeArgs">
					<descr>
						Set time arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
					</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SET_TIME.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpGblStatsConfig" type="NPF_error_t" brief="Configure MAC Statistics" xdrid="RPC_WMAX_BSCP_STAT_GLB_CFG">
				<descr>
					This function configures collection of global statistics not associated with any particular MAC instance.
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpGblStatsConfigArgs_t *" name="statsConfigArgs">
					<descr>
						MAC Statistics Config Arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_SVC_FLOW_HANDLE">
						<descr>
							The service flow handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_STATS_CFG.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpGblStatsGet" type="NPF_error_t" brief="Get MAC Statistics" xdrid="RPC_WMAX_BSCP_STAT_GLB_GET">
				<descr>
					This function gets global statistics not associated with any particular MAC instance.
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpGblStatsGetArgs_t *" name="statsGetArgs">
					<descr>
						Get MAC Statistics Arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
					</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_STATS_GET.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
		</section>
	</section>
	<section name="MAC Instances">
		<descr>
			This section defines the interface for managing MAC instances.
			MAC Instance may be configured after the BSCP object has been initialized.
		</descr>
		<section name="MAC Instance Data Types">
			<define brief="Management Channel QOS Profile Mask">
				<descr>
					Bits defined here are used to construct NPF_F_wmaxBscpMgmtParms_t.mgmtQosProfileMask.
				</descr>
				<field name="NPF_F_WMAX_BSCP_MGMT_CHANNEL_QOS_PARM_MASK_BASIC" brief="QOS parameters for basic management connection provided">
					<value>(0x01ull &lt;&lt; 0)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MGMT_CHANNEL_QOS_PARM_MASK_PRIMARY" brief="QOS parameters for basic management connection provided">
					<value>(0x01ull &lt;&lt; 1)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MGMT_CHANNEL_QOS_PARM_MASK_SECONDARY" brief="QOS parameters for secondary management connection provided">
					<value>(0x01ull &lt;&lt; 2)</value>
				</field>
			</define>
			<define brief="DCD and UCD Option Mask">
				<descr>
					These bits can be used to construct NPF_F_wmaxBscpXcdSigUpdateParms_t.changeMask
				</descr>
				<field name="NPF_F_WMAX_BSCP_BP_OPT_DCD_INTERVAL" brief="When set, DCD interval specified in NPF_F_wmaxBscpXcdSigUpdateParms_t is valid.">
					<value>(0x01ull &lt;&lt; 0)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_BP_OPT_DCD_TRANSITION" brief="When set, DCD transition time specified in NPF_F_wmaxBscpXcdSigUpdateParms_t is valid.">
					<value>(0x01ull &lt;&lt; 1)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_BP_OPT_UCD_INTERVAL" brief="When set, UCD interval  specified in NPF_F_wmaxBscpXcdSigUpdateParms_t is valid.">
					<value>(0x01ull &lt;&lt; 2)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_BP_OPT_UCD_TRANSITION" brief="When set, UCD transition time specified in NPF_F_wmaxBscpXcdSigUpdateParms_t is valid.">
					<value>(0x01ull &lt;&lt; 3)</value>
				</field>
			</define>
			<enum type="NPF_F_wmaxBscpBpSetOperation_t" brief="Burst Profile Set Operation">
				<field name="NPF_F_WMAX_BSCP_BPS_OPER_TYPE_ADD" brief="Add a new burst profile set entry"></field>
				<field name="NPF_F_WMAX_BSCP_BPS_OPER_TYPE_CHG" brief="Change definition of a burst profile set entry"></field>
				<field name="NPF_F_WMAX_BSCP_BPS_OPER_TYPE_DEL" brief="Delete definition of a burst profile set entry"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpCapOperation_t" brief="CAP Operation">
				<field name="NPF_F_WMAX_BSCP_CAP_OPER_TYPE_ADD" brief="Add a new CAP layer"></field>
				<field name="NPF_F_WMAX_BSCP_CAP_OPER_TYPE_CHG" brief="First de-reference the layer (force all SSs using this layer to move to another layer) and then change definition of a CAP layer"></field>
				<field name="NPF_F_WMAX_BSCP_CAP_OPER_TYPE_DEL" brief="Delete definition of a CAP layer"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpDuplexingType_t" brief="Duplexing Type">
				<descr>
					This enum defines the supported duplexing types.
				</descr>
				<field name="NPF_F_WMAX_BSCP_DUPLEXING_TYPE_TDD" brief="Time Division Duplexing"></field>
				<field name="NPF_F_WMAX_BSCP_DUPLEXING_TYPE_FDD" brief="Frequency Division Duplexing"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpFrameLength_t" brief="Frame Length">
				<descr>
					This enum defines the supported frame length values.
				</descr>
				<field name="NPF_F_WMAX_BSCP_FRAME_TYPE_2_5" brief="2.5 msec frame length"></field>
				<field name="NPF_F_WMAX_BSCP_FRAME_TYPE_4" brief="4.0 msec frame length"></field>
				<field name="NPF_F_WMAX_BSCP_FRAME_TYPE_5" brief="5.0 msec frame length"></field>
				<field name="NPF_F_WMAX_BSCP_FRAME_TYPE_8" brief="8.0 msec frame length"></field>
				<field name="NPF_F_WMAX_BSCP_FRAME_TYPE_10" brief="10.0 msec frame length"></field>
				<field name="NPF_F_WMAX_BSCP_FRAME_TYPE_12_5" brief="12.5 msec frame length"></field>
				<field name="NPF_F_WMAX_BSCP_FRAME_TYPE_20" brief="20.0 msec frame length"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpHarqBoostingType_t" brief="Boosting Level">
				<descr>
				This defines the boosting level to be used as part of the HARQ retransmission policy
				</descr>
				<see>NPF_F_wmaxBscpHarqRepPolicy_t</see>
				<field name="NPF_F_WMAX_BSCP_BOOSTING_TYPE_NONE" brief="No boosting."></field>
				<field name="NPF_F_WMAX_BSCP_BOOSTING_TYPE_PLUS_6" brief="Boosting: +6 dB."></field>
				<field name="NPF_F_WMAX_BSCP_BOOSTING_TYPE_MINUS_6" brief="Boosting: -6 dB."></field>
				<field name="NPF_F_WMAX_BSCP_BOOSTING_TYPE_PLUS_9" brief="Boosting: +9 dB."></field>
				<field name="NPF_F_WMAX_BSCP_BOOSTING_TYPE_PLUS_3" brief="Boosting: +3 dB."></field>
				<field name="NPF_F_WMAX_BSCP_BOOSTING_TYPE_MINUS_3" brief="Boosting: -3 dB."></field>
				<field name="NPF_F_WMAX_BSCP_BOOSTING_TYPE_MINUS_9" brief="Boosting: -9 dB."></field>
				<field name="NPF_F_WMAX_BSCP_BOOSTING_TYPE_MINUS_12" brief="Boosting: -12 dB."></field>
			</enum>
			<enum type="NPF_F_wmaxBscpSsMidamble_t" brief="Subscriber Preamble and Midamble">
				<descr>
					This enum defines preamble and midamble options for subscriber uplink communications.
				</descr>
				<field name="NPF_F_WMAX_BSCP_MIDAMBLE_NONE_PREAMBLE_SHORT" brief="Short preamble only"></field>
				<field name="NPF_F_WMAX_BSCP_MIDAMBLE_NONE_PREAMBLE_LONG" brief="Long preamble only"></field>
				<field name="NPF_F_WMAX_BSCP_MIDAMBLE_8_PREAMBLE_SHORT" brief="Midamble after 8 symbols with short preamble"></field>
				<field name="NPF_F_WMAX_BSCP_MIDAMBLE_16_PREAMBLE_SHORT" brief="Midamble after 16 symbols with short preamble"></field>
				<field name="NPF_F_WMAX_BSCP_MIDAMBLE_32_PREAMBLE_SHORT" brief="Midamble after 32 symbols with short preamble"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpSsType_t" brief="Types of SS">
				<field name="NPF_F_WMAX_BSCP_SS_TYPE_E0" brief="SS type E0 (with simplified OFDMA support)."></field>
				<field name="NPF_F_WMAX_BSCP_SS_TYPE_E1" brief="SS type E1 (regular)"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpOfdmaBurstProfileEncodings_t" brief="OFDMA Burst Profile Encodings">
				<descr>
					These values define the OFDMA Modulation and FEC combinations.
					(see P802.16-2005/D9, Table 357 and 363)
				</descr>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QPSK_CC12" brief="QPSK"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QPSK_CC34" brief="QPSK"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_16_CC12" brief="QAM-16"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_16_CC34" brief="QAM-16"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_64_CC12" brief="QAM-64"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_64_CC23" brief="QAM-64"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_64_CC34" brief="QAM-64"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QPSK_BTC12" brief="QPSK"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QPSK_BTC34_23" brief="QPSK"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_16_BTC35" brief="QAM-16"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_16_BTC45" brief="QAM-16"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_64_BTC23_58" brief="QAM-64"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_64_BTC56_45" brief="QAM-64"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QPSK_CTC12" brief="QPSK"></field>
                                <field name="NPF_F_WMAX_BSCP_OFDMA_BP_RESERVED_0" brief="reserved_0"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QPSK_CTC34" brief="QPSK"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_16_CTC12" brief="QAM-16"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_16_CTC34" brief="QAM-16"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_64_CTC12" brief="QAM-64"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_64_CTC23" brief="QAM-64"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_64_CTC34" brief="QAM-64"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_64_CTC56" brief="QAM-64"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QPSK_ZTCC12" brief="QPSK"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QPSK_ZTCC34" brief="QPSK"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_16_ZTCC12" brief="QAM-16"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_16_ZTCC34" brief="QAM-16"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_64_ZTCC12" brief="QAM-64"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_64_ZTCC23" brief="QAM-64"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_64_ZTCC34" brief="QAM-64"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QPSK_LDPC12" brief="QPSK"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QPSK_LDPC23A" brief="QPSK"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QPSK_LDPC34A" brief="QPSK"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_16_LDPC12" brief="QAM_16"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_16_LDPC23A" brief="QAM_16"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_16_LDPC34A" brief="QAM_16"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_64_LDPC12" brief="QAM_64"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_64_LDPC23A" brief="QAM_64"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_64_LDPC34A" brief="QAM_64"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QPSK_LDPC23B" brief="QPSK"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QPSK_LDPC34B" brief="QPSK"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_16_LDPC23B" brief="QAM_16"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_16_LDPC34B" brief="QAM_16"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_64_LDPC23B" brief="QAM_64"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_BP_QAM_64_LDPC34B" brief="QAM_64"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpOfdmaSubAllocType_t" brief="OFDMA Permutation Zone Sub-Allocation Type">
				<field name="NPF_F_WMAX_BSCP_OFDMA_ZONE_SUBALLOC_TYPE_CDMA_BW_P_RANG_1" value="0" brief="CDMA Bandwidth/Periodic Ranging zone - the CDMA signals to be used are 1 symbol long"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_ZONE_SUBALLOC_TYPE_CDMA_BW_P_RANG_3" brief="CDMA Bandwidth/Periodic Ranging zone - the CDMA signals to be used are 3 symbol long"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_ZONE_SUBALLOC_TYPE_CDMA_I_RANG_HO_2" brief="CDMA Initial ranging/handover zone - the CDMA signals to be used are 2 symbol long"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_ZONE_SUBALLOC_TYPE_CDMA_I_RANG_HO_4" brief="CDMA Initial ranging/handover zone - the CDMA signals to be used are 4 symbol long"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_ZONE_SUBALLOC_TYPE_AAS_DIVERSITY_MAP" brief="AAS Diversity MAP Zone"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_ZONE_SUBALLOC_TYPE_FAST_FEEDBACK" brief="Fast Feedback Channels Zone"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_ZONE_SUBALLOC_TYPE_HARQ_ACK_CHANNEL" brief="HARQ ACK Channel area"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_ZONE_SUBALLOC_TYPE_SOUNDING" brief="The sounding area"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpOfdmaZoneType_t" brief="OFDMA Zone Type">
				<field name="NPF_F_WMAX_BSCP_OFDMA_ZONE_TYPE_PUSC" brief="PUSC"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_ZONE_TYPE_OPTIONAL_PUSC" brief="Optional PUSC"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_ZONE_TYPE_FUSC" brief="FUSC"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_ZONE_TYPE_OPTIONAL_FUSC" brief="Optional FUSC"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_ZONE_TYPE_TUSC1" brief="TUSC1"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_ZONE_TYPE_TUSC2" brief="TUSC2"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_ZONE_TYPE_AMC16" brief="AMC1x6"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_ZONE_TYPE_AMC23" brief="AMC2x3"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_ZONE_TYPE_AMC32" brief="AMC3x2"></field>
        <field name="NPF_F_WMAX_BSCP_OFDMA_ZONE_TYPE_PUSC_NO_SC_ROTATION" brief="PUSC without sub-channel rotation"></field>
      </enum>

			<enum type="NPF_F_wmaxBscpOfdmaPhyProfile_t" brief="OFDMA PHY Profile Type">
				<descr>
					This enum defines OFDMA PHY profiles. See Table 411 of 802.16-2005.
				</descr>
				<see>NPF_F_wmaxBscpOfdmaPhyParms_t</see>
				<field name="NPF_F_WMAX_BSCP_OFDMA_PHY_PROF_P1" brief="OFDMA_profP1: WirelessMAN-OFDMA 1.25 MHz channel basic PHY Profile"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_PHY_PROF_P2" brief="OFDMA_profP2: WirelessMAN-OFDMA 3.5 MHz channel basic PHY Profile"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_PHY_PROF_P3" brief="OFDMA_profP3: WirelessMAN-OFDMA 7 MHz channel basic PHY Profile"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_PHY_PROF_P4" brief="OFDMA_profP4: WirelessMAN-OFDMA 8.75 MHz channel basic PHY Profile"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_PHY_PROF_P5" brief="OFDMA_profP5: WirelessMAN-OFDMA 14 MHz channel basic PHY Profile"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_PHY_PROF_P6" brief="OFDMA_profP6: WirelessHUMAN(-OFDMA) 17.5 MHz channel basic PHY Profile"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_PHY_PROF_P7" brief="OFDMA_profP7: WirelessHUMAN(-OFDMA) 28 MHz channel basic PHY Profile"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_PHY_PROF_P8" brief="OFDMA_profP8: WirelessHUMAN(-OFDMA) 10 MHz channel basic PHY Profile"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_PHY_PROF_P9" brief="OFDMA_profP9: WirelessHUMAN(-OFDMA) 20 MHz channel basic PHY Profile"></field>
                                <field name="NPF_F_WMAX_BSCP_OFDMA_PHY_PROF_5MHz" value="100" brief="5 MHz channel basic OFDMA PHY Profile"></field>                
			</enum>

			<enum type="NPF_F_wmaxBscpOfdmaFftSize_t" brief="FFT Type">
				<descr>
					This enum defines the OFDMA FFT sizes.
				</descr>
				<see>NPF_F_wmaxBscpOfdmaPhyParms_t</see>
				<field name="NPF_F_WMAX_BSCP_OFDMA_FFT_SIZE_128" brief="FFT 128 (OFDMA)"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_FFT_SIZE_512" brief="FFT 512 (OFDMA)"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_FFT_SIZE_1024" brief="FFT 1024 (OFDMA)"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_FFT_SIZE_2048" brief="FFT 2048 (OFDMA)"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpOfdmaChannelSize_t" brief="Channel BW Size">
				<descr>
					This enum defines the supported channel BW sizes.
				</descr>
				<see>NPF_F_wmaxBscpOfdmaPhyParms_t</see>
				<field name="NPF_F_WMAX_BSCP_OFDMA_CHANNEL_3_5" brief="3.5 MHz channel(OFDMA)"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_CHANNEL_5_0" brief="5 MHz channel(OFDMA)"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_CHANNEL_7_0" brief="7 MHz channel(OFDMA)"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_CHANNEL_8_75" brief="8.75 MHz channel(OFDMA)"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_CHANNEL_10" brief="10 MHz channel(OFDMA)"></field>
			</enum>

			<enum type="NPF_F_wmaxBscpOfdmBurstProfileEncodings_t" brief="OFDM Burst Profile Encodings">
				<descr>
					These values define the OFDM Modulation and FEC combinations.					
				</descr>
				<field name="NPF_F_WMAX_BSCP_OFDM_BP_BPSK_CC12" brief="BPSK CC 1/2"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_BP_QPSK_CC12" brief="QPSK CC 1/2"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_BP_QPSK_CC34" brief="QPSK CC 3/4"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_BP_QAM_16_CC12" brief="QAM-16 CC 1/2"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_BP_QAM_16_CC34" brief="QAM-16 CC 3/4"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_BP_QAM_64_CC23" brief="QAM-64 CC 2/3"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_BP_QAM_64_CC34" brief="QAM-64 CC 3/4"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_BP_QPSK_BTC12" brief="QPSK BTC 1/2"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_BP_QPSK_BTC34_23" brief="QPSK BTC 3/4"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_BP_QAM_16_BTC35" brief="QAM-16 BTC 3/5"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_BP_QAM_16_BTC45" brief="QAM-16 BTC 4/5"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_BP_QAM_64_BTC23" brief="QAM-64 BTC 2/3"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_BP_QAM_64_BTC56" brief="QAM-64 BTC 5/6"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_BP_QPSK_CTC12" brief="QPSK CTC 1/2"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_BP_QPSK_CTC23" brief="QPSK CTC 2/3"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_BP_QPSK_CTC34" brief="QPSK CTC 3/4"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_BP_QAM_16_CTC12" brief="QAM-16 CTC 1/2"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_BP_QAM_16_CTC34" brief="QAM-16 CTC 3/4"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_BP_QAM_64_CTC23" brief="QAM-64 CTC 2/3"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_BP_QAM_64_CTC34" brief="QAM-64 CTC 3/4"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpOfdmPhyProfile_t" brief="OFDM PHY profile type">
				<descr>
					This enum defines possible PHY profiles.
				</descr>
				<field name="NPF_F_WMAX_BSCP_OFDM_PHY_PROF_P3_1_75" brief="WirelessMAN-OFDMA Profile P3 (1.75 MHz channel)"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_PHY_PROF_P3_3_5" brief="WirelessMAN-OFDMA Profile P3 (3.5 MHz channel)"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_PHY_PROF_P3_7" brief="WirelessMAN-OFDMA Profile P3 (7 MHz channel)"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_PHY_PROF_P3_3" brief="WirelessMAN-OFDMA Profile P3 (3 MHz channel)"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_PHY_PROF_P3_5_5" brief="WirelessMAN-OFDMA Profile P3 (5.5 MHz channel)"></field>
				<field name="NPF_F_WMAX_BSCP_OFDM_PHY_PROF_P3_10" brief="WirelessHUMAN-OFDMA Profile P3 (10 MHz channel)"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpPhyCpType_t" brief="PHY Cyclic Prefix">
				<descr>
					This enum defines the supported lengths of the guard time part of the OFDM/OFDMA symbol (Cyclic Prefix).  This needs to be set to the same value in both the PHY and MAC-CPS layers.
				</descr>
				<field name="NPF_F_WMAX_BSCP_PHY_CP_TYPE_1_4" brief="Cyclic Prefix = 1/4 of the symbol"></field>
				<field name="NPF_F_WMAX_BSCP_PHY_CP_TYPE_1_8" brief="Cyclic Prefix = 1/8 of the symbol"></field>
				<field name="NPF_F_WMAX_BSCP_PHY_CP_TYPE_1_16" brief="Cyclic Prefix = 1/16 of the symbol"></field>
				<field name="NPF_F_WMAX_BSCP_PHY_CP_TYPE_1_32" brief="Cyclic Prefix = 1/32 of the symbol"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpPhyType_t" brief="PHY Type">
				<descr>
					Identifies kind of PHY.
				</descr>
				<field name="NPF_F_WMAX_BSCP_PHY_TYPE_OFDM" brief="Identifies OFDM PHY."></field>
				<field name="NPF_F_WMAX_BSCP_PHY_TYPE_OFDMA" brief="Identifies OFDMA PHY."></field>
			</enum>
			<enum type="NPF_F_wmaxBscpCodingType_t" brief="Coding Type">
				<descr>
				This defines the coding types.
				</descr>
				<see>NPF_F_wmaxBscpOfdmaPhyParms_t</see>
				<field name="NPF_F_WMAX_BSCP_CODING_TYPE_BTC" brief="BTC Coding Type."></field>
				<field name="NPF_F_WMAX_BSCP_CODING_TYPE_CTC" brief="CTC Coding Type."></field>
				<field name="NPF_F_WMAX_BSCP_CODING_TYPE_ZTCC" brief="ZT CC Coding Type."></field>
				<field name="NPF_F_WMAX_BSCP_CODING_TYPE_LDCP" brief="LDPC Coding Type."></field>
				<field name="NPF_F_WMAX_BSCP_CODING_TYPE_CC" brief="CC Coding Type."></field>
			</enum>
			<enum type="NPF_F_wmaxBscpRepetitionType_t" brief="Repetition Type">
				<descr>
				This defines the repetition types.
				</descr>
				<see>NPF_F_wmaxBscpHarqRepPolicy_t</see>
				<see>NPF_F_wmaxBscpOfdmaPhyParms_t</see>
				<field name="NPF_F_WMAX_BSCP_REPETITION_TYPE_NONE" brief="No repetition."></field>
				<field name="NPF_F_WMAX_BSCP_REPETITION_TYPE_2" brief="Repetition coding of 2 used."></field>
				<field name="NPF_F_WMAX_BSCP_REPETITION_TYPE_4" brief="Repetition coding of 4 used."></field>
				<field name="NPF_F_WMAX_BSCP_REPETITION_TYPE_6" brief="Repetition coding of 6 used."></field>
			</enum>
			<enum type="NPF_F_wmaxBscpStcType_t" brief="STC Type">
				<field name="NPF_F_WMAX_BSCP_STC_TYPE_NOT_DEFINED" brief="STC not defined."></field>
				<field name="NPF_F_WMAX_BSCP_STC_TYPE_2" brief="STC with 2 antennas."></field>
				<field name="NPF_F_WMAX_BSCP_STC_TYPE_3" brief="STC with 3 antennas."></field>
				<field name="NPF_F_WMAX_BSCP_STC_TYPE_4" brief="STC with 4 antennas."></field>
			</enum>
			<enum type="NPF_F_wmaxBscpUlMapRelevance_t" brief="UL-MAP Relevance">
				<descr>
					This enum defines whether the current UL map should refer to the current frame or the next frame.
				</descr>
				<field name="NPF_F_WMAX_BSCP_UL_MAP_THIS_FRAME" brief="UL-MAP defines UL part of this frame."></field>
				<field name="NPF_F_WMAX_BSCP_UL_MAP_NEXT_FRAME" brief="UL-MAP defines UL part of the next frame."></field>
			</enum>
			<struct type="NPF_F_wmaxBscpBpSetElement_t" brief="Burst Profile Set Element">
				<descr>
					This structure defines a burst profile set element.
				</descr>
				<see>NPF_F_wmaxBscpBpSetElementWithOper_t</see>
				<see>NPF_F_wmaxBscpXcdSigParms_t</see>
				<field name="xiuc" type="NPF_uint8_t" brief="Either DIUC or UIUC"></field>
				<selectunion type="bp" name="burstProfileEncoding">
					<selectfield type="NPF_F_wmaxBscpPhyType_t" name="phyType" brief="PHY Type: OFDM or OFDMA"></selectfield>
					<field name="bpOfdm" type="NPF_F_wmaxBscpOfdmBurstProfileEncodings_t">
						<selector>NPF_F_WMAX_BSCP_PHY_TYPE_OFDM</selector>
					</field>
					<field name="bpOfdma" type="NPF_F_wmaxBscpOfdmaBurstProfileEncodings_t">
						<selector>NPF_F_WMAX_BSCP_PHY_TYPE_OFDMA</selector>
					</field>
				</selectunion>
			</struct>
			<struct type="NPF_F_wmaxBscpBpSetElementWithOper_t" brief="Burst Profile Set Element and Operation">
				<descr>
					This structure defines a burst profile set element and operation requested on this element.
				</descr>
				<see>NPF_F_wmaxBscpMacDcdUcdChangeArgs_t</see>
				<field name="oper" type="NPF_F_wmaxBscpBpSetOperation_t" brief="Operation to be executed on the burst profile"></field>
				<field name="bpSetElement" type="NPF_F_wmaxBscpBpSetElement_t" brief="Burst Profile Set Element"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpCapVertex_t" brief="CAP Action Vertex Definition">
				<descr>
          This structure defines a vertex used to define range of CINR/RSSI values a CAP action applies to.
        </descr>
				<field name="cinr" type="NPF_int8_t" brief="">
					<descr>
            Specifies the CINR part of this CAP vertex specification.
            The valid range of vales: (-10 dB to 53 dB), 0.5 dB step size [-20..+106]
          </descr>
				</field>
				<field name="rssi" type="NPF_uint8_t" brief="">
				    <descr>
                                        Specifies the RSSI part of this CAP vertex specification.
                                        The valid range of values: (-157.5dBm to -30 dBm), 0.5 dBm step size [255..0]
                                    </descr>
				</field>
			</struct>
      
      <struct type="NPF_F_wmaxBscpCapAction_t" brief="CAP Action Definition">
				<descr>
					This structure defines a CAP action.
				</descr>
				<field name="seqNum" type="NPF_uint8_t" brief="Sequence number of the element in this CAP.">
					<descr>
						The first element in the subset should have 'seqNum' set to '0'.
					</descr>
				</field>
				<field name="pwrCorrection" type="NPF_int16_t" brief="Power correction to be sent in the format that is required by the RNG-RSP message"></field>
				<field name="sensitivityZone" type="NPF_F_wmaxBscpSensitivityZoneType_t" brief="Sensitivity zone type that should be set as the current one after this CAP action has been executed."></field>
				<field name="notifyOam" type="NPF_boolean_t" brief="A flag stating if during processing of this CAP action the OAM application should be notified this fact"></field>
				<field name="changeCapLayer" type="NPF_uint8_t" brief="">
					<descr>
            A flag stating if as a result of this action the CAP block tries to find more appropriate CAP layer (value set to 1)
            or the currently used CAP layer should remain as the current one (value set to 0).
          </descr>
				</field>
                                <vector name="vertexes" type="NPF_F_wmaxBscpCapVertex_t" brief="">
					<descr>
            List of all vertexes defining a convex polygon containing all CINR/RSSI values this CAP action is applying to.
          </descr>
					<length name="vertexesNum" type="NPF_uint32_t" brief="Number of elements in the 'vertexes' table"></length>
				</vector>
      </struct>
			<struct type="NPF_F_wmaxBscpCapLayer_t" brief="CAP Layer">
				<descr>
					This structure describes a CAP layer.
				</descr>
				<field name="seqNum" type="NPF_uint8_t" brief="Sequence number of the layer in this CAP."></field>
				<field name="xiuc" type="NPF_uint8_t" brief="Either DIUC or UIUC to be used"></field>
				<field name="repetition" type="NPF_F_wmaxBscpRepetitionType_t" brief="Repetition to be used"></field>
				<vector name="desiredVertexes" type="NPF_F_wmaxBscpCapVertex_t" brief="">
					<descr>
						List of all vertexes defining a convex polygon containing all desired CINR/RSSI power values this CAP layer.
					</descr>
					<length name="desiredVertexesNum" type="NPF_uint32_t" brief="Number of elements in the 'desiredVertexes' table"></length>
				</vector>
				<!--
        <field name="minSnr" type="NPF_uint8_t" brief="Minimum SNR value needed to allow usage of this CAP layer"></field>
        -->
				<field name="minRssi" type="NPF_uint8_t" brief="Minimum RSSI value allowed when using this CAP layer.">
					<descr>
						The valid range of values: (-157.5dBm to -30 dBm), 0.5 dBm step size [255..0].
					</descr>
				</field>
                                <field name="reqTxPowerBudget" type="NPF_uint16_t" brief="Required SS TX power budget needed to allow usage of this CAP layer"></field>
				<vector name="actions" type="NPF_F_wmaxBscpCapAction_t" brief="">
					<descr>
							All action definitions defined for this CAP layer.
						</descr>
					<length name="actionsNum" type="NPF_uint32_t" brief="Number of elements in the 'actions' table"></length>
				</vector>
			</struct>
			<struct type="NPF_F_wmaxBscpCapLayerWithOper_t" brief="CAP Layer and Operation">
				<descr>
					This structure defines a CAP layer and corresponding operation for this layer.
				</descr>
				<selectunion type="operation" name="operation">
					<selectfield name="oper" type="NPF_F_wmaxBscpCapOperation_t" brief="Operation to be executed on the entry"></selectfield>
					<field name="capLayer" type="NPF_F_wmaxBscpCapLayer_t" brief="The CAP layer.">
						<selector>NPF_F_WMAX_BSCP_CAP_OPER_TYPE_ADD</selector>
						<selector>NPF_F_WMAX_BSCP_CAP_OPER_TYPE_CHG</selector>
					</field>
					<field name="unused" type="NPF_uint8_t" brief="Not used.">
						<selector>NPF_F_WMAX_BSCP_CAP_OPER_TYPE_DEL</selector>
					</field>
				</selectunion>
			</struct>
			<struct type="NPF_F_wmaxBscpDregSigParms_t" brief="Subscriber Deregistration Parameters">
				<descr>
					This structure defines ranging options.
				</descr>
				<field name="dregCommandRetryCount" type="NPF_uint32_t" brief=" Number of retries on DREG-CMD message [min 3, default 3, max 16]"></field>
				<field name="timerT46" type="NPF_uint32_t" brief="Time the BS waits for DREGREQ in case of unsolicited Idle Mode initiation from BS"></field>
				<!--				<field name="mgmtResourceHoldingTimer" type="NPF_uint32_t" brief="P80216e-D7: Table 342a: Time BS maintains connection info with SS after DREG-CMD [msec, default 500, max 1000]"></field>
-->
			</struct>
			<enum type="NPF_F_wmaxBscpOfdmaDedicatedPilotsType_t" brief="Type of dedicated pilots">
				<field name="NPF_F_WMAX_BSCP_OFDMA_ZONE_DEDICATED_PILOTS" value="0" brief="Pilot symbols are dedicated. An MS should use only pilots specific to its burst for channel estimation"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_ZONE_BROADCAST_PILOTS" brief="Pilot symbols are broadcast"></field>
			</enum>
			<struct type="NPF_F_wmaxBscpOfdmaDlZoneParams_t" brief="OFDMA DL Zone specific parameters" name="">
				<descr>
          This data structure defines parameters specific to DL OFDMA Permutation zone.
        </descr>
				<field name="DL_permBase" type="NPF_uint8_t" brief="DL_permbase value."></field>
				<field name="segment" type="NPF_uint8_t" brief="segment value."></field>
				<field name="dedicatedPilots" type="NPF_F_wmaxBscpOfdmaDedicatedPilotsType_t" brief="Type of symbol pilots used: dedicated or broadcast."></field>
				<field name="midamblePresent" type="NPF_boolean_t" brief="Midamble presence: true or false"></field>
				<field name="midambleBoosting" type="NPF_boolean_t" brief="Midamble boosting: true or false. This field contains valid data only when midamblePresent is set to true."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpOfdmaUlZoneParams_t" brief="OFDMA UL Zone specific parameters" name="">
				<descr>
          This data structure defines parameters specific to UL OFDMA Permutation zone.
        </descr>
				<field name="UL_permBase" type="NPF_uint8_t" brief="UL_permbase value."></field>
			</struct>
			<!-- START OF SOUNDING SPECIFIC DATA STRUCTURES/DEFINITIONS -->
			<!-- GENERIC SOUNDING DEFINITIONS -->
			<enum type="NPF_F_wmaxBscpOfdmaSoundingRelevanceType_t" brief="Types of Sounding IE relevance">
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_RELEVANCE_THIS_FRAME" value="0" brief="The Sounding IE describes the sounding zone in the current frame"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_RELEVANCE_NEXT_FRAME" brief="The Sounding IE describes the sounding zone in the frame following the current one"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpOfdmaSoundingAddFBType_t" brief="Types of Sounding Additonal Feedback">
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_ADD_FB_NONE" value="0" brief="No additional feedback"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_ADD_FB_CHANNEL_COEF" brief="Include channel coefficients"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_ADD_FB_PILOT_COEF" brief="Include received pilot coefficients"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_ADD_FB_MSG" brief="Include feedback message"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpOfdmaSoundingType_t" brief="Types of Sounding">
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_TYPE_A" value="0" brief="The Sounding type A"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_TYPE_B" brief="The Sounding type B"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_NONE" brief="The Sounding is not supported"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpOfdmaSoundingSsSelectionType_t" brief="Types of SS Selection methods">
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_SS_SELECTION_NONE" value="0" brief="There will be no SS defined for sounding in this symbol"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_SS_SELECTION_ALL_IN_THIS_UL_SUBFRAME" brief="This symbol will contain sounding from all SSs which have got bandwidth in current UL subframe."></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_SS_SELECTION_OWNER_OF_FIRST_BURST_IN_SUBCHANNEL" brief="This symbol will contain sounding from the SSs which are owners of the first bursts in sub-channels in current UL subframe."></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_SS_SELECTION_OWNER_OF_SECOND_BURST_IN_SUBCHANNEL" brief="This symbol will contain sounding from the SSs which are owners of the second bursts in sub-channels in current UL subframe."></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_SS_SELECTION_OWNER_OF_FIRST_OR_SECOND_BURST_IN_SUBCHANNEL" brief="This symbol will contain sounding from the SSs which are owners of the first or the second bursts in sub-channels in current UL subframe."></field>
			</enum>
			<enum type="NPF_F_wmaxBscpOfdmaSoundingFreqAssignmentType_t" brief="Types of sounding frequency assignment methods">
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_FREQ_ASSIGN_ALL" value="0" brief="All frequencies will be used by the SSs selected for this symbol"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_FREQ_ASSIGN_THE_SAME_AS_DATA" brief="Limited to the frequences assigned to the SS in the adjacent zone for data transmission"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpOfdmaSoundingPwrAssignmentType_t" brief="Types of power assignment methods">
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_PWR_ASSIGN_EQUAL_POWER" value="0" brief="Equal power"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_PWR_ASSIGN_SUBCARRIER_PWR_LIMIT" brief="Interference dependent. Per subcarrier power limit"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_PWR_ASSIGN_TOTAL_PWR_LIMIT" brief="Interference dependent. Total power limit"></field>
			</enum>
			<!-- SOUNDING TYPE A -->
			<enum type="NPF_F_wmaxBscpOfdmaSoundingSeparabilityType_t" brief="Types of Sounding Type A separabilty">
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_SEPARABILITY_CYCLIC_SHIFT" value="0" brief="The Cyclic Shift Separability"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_SEPARABILITY_DECIMATION" brief="The Decimation Separability"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpOfdmaSoundingDecimationValues_t" brief="Valid values of the decimation sounding type A separabilty">
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_DECIMATION_D_2" value="0" brief="D=2"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_DECIMATION_D_4" brief="D=4"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_DECIMATION_D_5" brief="D=5"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_DECIMATION_D_8" brief="D=8"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_DECIMATION_D_16" brief="D=16"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_DECIMATION_D_32" brief="D=32"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_DECIMATION_D_64" brief="D=64"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_DECIMATION_D_128" brief="D=128"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpOfdmaSoundingCyclicShiftValues_t" brief="Valid values of the cyclic shift sounding type A separabilty">
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_CYCLIC_SHIFT_P_4" value="0" brief="P=4"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_CYCLIC_SHIFT_P_8" brief="P=8"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_CYCLIC_SHIFT_P_16" brief="P=16"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_CYCLIC_SHIFT_P_32" brief="P=32"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_CYCLIC_SHIFT_P_9" brief="P=9"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_CYCLIC_SHIFT_P_18" brief="P=18"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpOfdmaSoundingMultiantennaType_t" brief="Types of valid multi-antenna configurations">
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_MULTIANTENNA_FIRST_ONLY" value="0" brief="MS sounds first antenna only"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_MULTIANTENNA_ALL" brief="MS sounds all antennas"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpOfdmaSoundingAllocationType_t" brief="Types of sounding type A allocations">
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_ALLOCATION_NORMAL" value="0" brief="Normal"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_ALLOCATION_BAND_AMC" brief="Band AMC"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpOfdmaSoundingAddFBLocationType_t" brief="Types of locations of additional feedback">
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_ADD_FB_LOC_THIS_SYMBOL" value="0" brief="The additional feedback will be transmitted in the current symbol"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_ADD_FB_LOC_NEXT_SYMBOL" brief="The additional feedback will be transmitted in the next symbol"></field>
			</enum>
			<struct type="NPF_F_wmaxBscpOfdmaSoundingSymbolTypeA_t" name="" brief="Definition of a single sounding symbol type A">
				<field name="ssSelectionMethod" type="NPF_F_wmaxBscpOfdmaSoundingSsSelectionType_t" brief="SS selection method"></field>
				<field name="subchannelAllocationMethod" type="NPF_F_wmaxBscpOfdmaSoundingFreqAssignmentType_t" brief="Frequency assignment method"></field>
				<field name="allocationMode" type="NPF_F_wmaxBscpOfdmaSoundingAllocationType_t" brief="Type of allocation"></field>
				<field name="pwrAssignmentMethod" type="NPF_F_wmaxBscpOfdmaSoundingPwrAssignmentType_t" brief="Power assignment method"></field>
				<field name="pwrBoost" type="NPF_boolean_t" brief="Defines if the Power Boosting will be set to ON or OFF"></field>
				<field name="multiAntenna" type="NPF_F_wmaxBscpOfdmaSoundingMultiantennaType_t" brief="Multiantenna sounding method selection"></field>
				<field name="additionalFBLocation" type="NPF_F_wmaxBscpOfdmaSoundingAddFBLocationType_t" brief="Location of the additional feedback"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpOfdmaSoundingDecimationParams_t" name="" brief="The decimation specific parameters">
				<field name="D" type="NPF_F_wmaxBscpOfdmaSoundingDecimationValues_t" brief="The D parameter"></field>
				<field name="offsetRand" type="NPF_boolean_t" brief="Defines if the decimation offset randomization will be set to ON or OFF"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpOfdmaSoundingTypeA_t" name="" brief="Definition of a type A specific parameters">
				<selectunion type="separabilityBscp" name="separabilitySpec">
					<selectfield type="NPF_F_wmaxBscpOfdmaSoundingSeparabilityType_t" name="separabilityType" brief="Type of the seprability"></selectfield>
					<field name="P" type="NPF_F_wmaxBscpOfdmaSoundingCyclicShiftValues_t" brief="The P parametr">
						<selector>NPF_F_WMAX_BSCP_OFDMA_SOUNDING_SEPARABILITY_CYCLIC_SHIFT</selector>
					</field>
					<field name="D" type="NPF_F_wmaxBscpOfdmaSoundingDecimationParams_t" brief="The decimation-specific parameters">
						<selector>NPF_F_WMAX_BSCP_OFDMA_SOUNDING_SEPARABILITY_DECIMATION</selector>
					</field>
				</selectunion>
				<vector name="symbolsDef" type="NPF_F_wmaxBscpOfdmaSoundingSymbolTypeA_t" brief="The definition of a single type A sounding symbol">
					<length name="symbolsNum" type="NPF_uint32_t" brief="The number of symbols belonging to the sounding sub-allocation."></length>
				</vector>
			</struct>
			<!-- SOUNDING TYPE B -->
			<enum type="NPF_F_wmaxBscpOfdmaSoundingPermutationType_t" brief="Types of sounding type B permutations">
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_PERMUTATION_PUSC" value="0" brief="PUSC"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_PERMUTATION_FUSC" brief="FUSC"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_PERMUTATION_OPTIONAL_FUSC" brief="Optional FUSC"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_PERMUTATION_PUSC_ASCA" brief="PUSC-ASCA"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_PERMUTATION_TUSC1" brief="TUSC1"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_PERMUTATION_TUSC2" brief="TUSC2"></field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SOUNDING_PERMUTATION_AMC_2x3" brief="AMC 2x3"></field>
			</enum>
			<struct type="NPF_F_wmaxBscpOfdmaSoundingSymbolTypeB_t" name="" brief="Definition of a single sounding symbol type B">
				<field name="ssSelectionMethod" type="NPF_F_wmaxBscpOfdmaSoundingSsSelectionType_t" brief="SS selection method"></field>
				<field name="subchannelAllocationMethod" type="NPF_F_wmaxBscpOfdmaSoundingFreqAssignmentType_t" brief="Frequency assignment method"></field>
				<field name="pwrAssignmentMethod" type="NPF_F_wmaxBscpOfdmaSoundingPwrAssignmentType_t" brief="Power assignment method"></field>
				<field name="pwrBoost" type="NPF_boolean_t" brief="Defines if the Power Boosting will be set to ON or OFF"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpOfdmaSoundingTypeB_t" name="" brief="Definition of a type B specific parameters">
				<field name="permutation" type="NPF_F_wmaxBscpOfdmaSoundingPermutationType_t" brief="The permutation to be used"></field>
				<field name="DL_permbase" type="NPF_uint32_t" brief="The DL_parmbase parameter"></field>
				<vector name="symbolsDef" type="NPF_F_wmaxBscpOfdmaSoundingSymbolTypeB_t" brief="The definition of a single type B sounding symbol">
					<length name="symbolsNum" type="NPF_uint32_t" brief="The number of symbols belonging to the sounding sub-allocation."></length>
				</vector>
			</struct>
			<!-- HARQ ACKCH-SPECIFIC SUB-ALLOCATION -->
			<struct type="NPF_F_wmaxBscpOfdmaHarqAckchSpec_t" name="" brief="Definition of the HARQ ACKCH sub-allocation specific parameters.">
				<descr>This data structure defines parameters of the HARQ ACKCH-specific Sub-allocation.</descr>
				<field name="includeInUiuc0" type="NPF_boolean_t" brief="Defines if the HARQ ACKCH region is to be placed inside UIUC=0 allocation"></field>
			</struct>
			<!-- END OF HARQ ACKCH-SPECIFIC DATA STRUCTURES/DEFINITIONS-->
			<!-- SOUNDING-SPECIFIC SUB-ALLOCATION -->
			<struct type="NPF_F_wmaxBscpOfdmaSoundingSpec_t" name="" brief="Definition of the Sounding sub-allocation specific parameters.">
				<descr>This data structure defines parameters of the Sounding Sub-allocation.</descr>
				<field name="soundingRelevance" type="NPF_F_wmaxBscpOfdmaSoundingRelevanceType_t" brief="Defines if the sounding IE describes the sounding zone in this or the next frame"></field>
				<field name="includeAdditionalFeedback" type="NPF_F_wmaxBscpOfdmaSoundingAddFBType_t" brief="Defines if the additional feedback will be included"></field>
				<selectunion type="soundBscp" name="typeSpec">
					<selectfield type="NPF_F_wmaxBscpOfdmaSoundingType_t" name="soundingType" brief="Type of the sounding"></selectfield>
					<field name="typeA" type="NPF_F_wmaxBscpOfdmaSoundingTypeA_t">
						<selector>NPF_F_WMAX_BSCP_OFDMA_SOUNDING_TYPE_A</selector>
					</field>
					<field name="typeB" type="NPF_F_wmaxBscpOfdmaSoundingTypeB_t">
						<selector>NPF_F_WMAX_BSCP_OFDMA_SOUNDING_TYPE_B</selector>
					</field>
				</selectunion>
			</struct>
			<!-- END OF SOUNDING SPECIFIC DATA STRUCTURES/DEFINITIONS-->
			<struct type="NPF_F_wmaxBscpOfdmaSubAlloc_t" brief="Definition of a Sub-allocation inside an OFDMA zone">
				<descr>
				This data structure defines parameters of a Sub-allocation inside OFDMA zone.
			</descr>
				<field name="firstSubChannel" type="NPF_uint16_t">
					<descr>The number of the first sub-channel in this sub-allocation</descr>
				</field>
				<field name="numOfSubChannels" type="NPF_uint16_t">
					<descr>The number of sub-channels in this sub-allocation</descr>
				</field>
				<field name="firstSymbol" type="NPF_uint16_t">
					<descr>The number of the first symbol in this sub-allocation, relatively to the beginning of the zone this sub-allocation is defined in.</descr>
				</field>
				<field name="numOfSymbols" type="NPF_uint16_t">
					<descr>The number of symbols in this sub-allocation</descr>
				</field>
				<field name="freq" type="NPF_uint16_t">
					<descr>The time (specified in a number of frames) between two consecutive appearance in the air of this sub-allocation</descr>
				</field>
				<field name="offset" type="NPF_uint16_t">
					<descr>The time (specified in a number of frames) between the frame number 0 ant the first appearance of the sub-allocation</descr>
				</field>
				<selectunion type="as" name="areaSpec">
					<selectfield type="NPF_F_wmaxBscpOfdmaSubAllocType_t" name="subAllocType" brief="Type of the sub-allocation"></selectfield>
					<field name="unused" type="NPF_uint32_t">
						<selector>NPF_F_WMAX_BSCP_OFDMA_ZONE_SUBALLOC_TYPE_CDMA_BW_P_RANG_1</selector>
						<selector>NPF_F_WMAX_BSCP_OFDMA_ZONE_SUBALLOC_TYPE_CDMA_BW_P_RANG_3</selector>
						<selector>NPF_F_WMAX_BSCP_OFDMA_ZONE_SUBALLOC_TYPE_CDMA_I_RANG_HO_2</selector>
						<selector>NPF_F_WMAX_BSCP_OFDMA_ZONE_SUBALLOC_TYPE_CDMA_I_RANG_HO_4</selector>
						<selector>NPF_F_WMAX_BSCP_OFDMA_ZONE_SUBALLOC_TYPE_AAS_DIVERSITY_MAP</selector>
						<selector>NPF_F_WMAX_BSCP_OFDMA_ZONE_SUBALLOC_TYPE_FAST_FEEDBACK</selector>
					</field>
					<field name="harqAckchSpec" type="NPF_F_wmaxBscpOfdmaHarqAckchSpec_t" brief="Description of the HARQ ACKCH allocation option">
						<selector>NPF_F_WMAX_BSCP_OFDMA_ZONE_SUBALLOC_TYPE_HARQ_ACK_CHANNEL</selector>
					</field>
					<field name="soundingSpec" type="NPF_F_wmaxBscpOfdmaSoundingSpec_t" brief="Description of the sounding zone options">
						<selector>NPF_F_WMAX_BSCP_OFDMA_ZONE_SUBALLOC_TYPE_SOUNDING</selector>
					</field>
				</selectunion>
			</struct>
			<struct type="NPF_F_wmaxBscpOfdmaZone_t" brief="OFDMA Permutation Zone Definition" name="">
				<descr>
					This data structure defines parameters of an OFDMA Permutation zone.
				</descr>
				<selectunion type="NPF_F_wmaxBscpOfdmaZoneUnion_t" name="u">
					<selectfield type="NPF_F_wmaxBscpServiceDirection_t" name="dir" brief="Direction: uplink or downlink"></selectfield>
					<field type="NPF_F_wmaxBscpOfdmaDlZoneParams_t" name="dlSpec">
						<descr>The DL Specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_DIRECTION_DL</selector>
					</field>
					<field type="NPF_F_wmaxBscpOfdmaUlZoneParams_t" name="ulSpec">
						<descr>The UL Specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_DIRECTION_UL</selector>
					</field>
				</selectunion>
				<field name="zoneType" type="NPF_F_wmaxBscpOfdmaZoneType_t" brief="Type of the zone"></field>
				<!--
				<field name="sensitivityType" type="NPF_F_wmaxBscpSensitivityZoneType_t"></field>
					<descr>
						Type of the zone in the context of the sensitivity of the BS electronic circuits.
						Valid only for UL zones.
					</descr>
				<field name="sensitivityGain" type="NPF_int8_t">
					<descr>
						A value to be reported to the PHY togethter with the description of this zone and used 
						by the PHY to set the sensitivity of the RX path. Valid only for UL zones.
					</descr>
				</field>
        -->
				<field name="stcEnable" type="NPF_boolean_t" brief="Usage of Space-Time-Coding for this zone: true or false"></field>
				<field name="stcType" type="NPF_F_wmaxBscpStcType_t" brief="Type of used Space-Time-Coding for this zone. This field contains valid data only when stcEnable is set to true."></field>
				<field name="minSize" type="NPF_uint16_t">
					<descr>
						The minimum number of OFDMA symbols this zone must contain. 
						Value '0' means that this zone doesn't have to be present in every frame.
					</descr>
				</field>
				<field name="maxSize" type="NPF_uint16_t">
					<descr>
						The maximum number of OFDMA symbols this zone can contain.
					</descr>
				</field>
				<vector type="NPF_F_wmaxBscpOfdmaSubAlloc_t" name="subAlloc">
					<!-- Changed from SpecialAreas_t to SubAlloc_t; IDMc -->
					<descr>
						This table contains definition of Sub-allocations inside this zone.
					</descr>
					<length type="NPF_uint32_t" name="subAllocNum" brief="The number of elements in the 'subAlloc' table"></length>
				</vector>
			</struct>
			<struct type="NPF_F_wmaxBscpOfdmPhyParms_t" name="" brief="OFDM PHY Specific Parameters definition">
				<descr>
				This data structure defines the OFDM PHY Specific Parameters.
				</descr>
				<see>NPF_F_wmaxBscpMacPhyParms_t</see>
				<field name="phyProfile" type="NPF_F_wmaxBscpOfdmPhyProfile_t" brief="PHY Profile: profP3_xx"></field>
				<field name="initRangingPeriod" type="NPF_uint16_t" brief="Number of frames between those two containing Initial Ranging Slot."></field>
				<field name="initRangingSize" type="NPF_uint16_t" brief="Number of OFDM symbols in the Initial Ranging Slot."></field>
				<field name="bwrContentionFullPeriod" type="NPF_uint16_t" brief="Number of frames between those two containing Full Bandwidth Request Contention Slot."></field>
				<field name="bwrContentionFullSize" type="NPF_uint16_t" brief="Number of OFDM symbols in the Full Bandwidth Request Contention Slot."></field>
				<field name="bwrContentionFocusedPeriod" type="NPF_uint16_t" brief="Number of frames between those two containing Focused Bandwidth Request Contention Slot."></field>
				<field name="bwrContentionFocusedSize" type="NPF_uint16_t" brief="Number of OFDM symbols in the Focused Bandwidth Request Contention Slot."></field>
				<field name="startStcZone" type="NPF_uint16_t" brief="Start of the STC Zone (counted from the beginning of the frame - in OFDM symbols)."></field>
				<field name="maxUnusedOpportunities" type="NPF_uint16_t" brief="Number of unused transmit opportunities assigned to a SS by the BS can be received before a SS Inactivity Event will be triggered."></field>
				<field name="contentionReservationTimeout" type="NPF_uint8_t" brief="Number of UL-MAPs to receive before contention-based reservation is attempted again for the same connection. UCD TLV=2"></field>
				<field name="noOfSubchannelsSubch" type="NPF_uint8_t" brief="Number of subchannels for REQ in subchanalization region.">
					<descr>
						Number of subchannels used by each transmit opportunity when REQ Region-Full is allocated in subchannelization region.
						Alowed values are: 1, 2, 4, 8 and 16. UCD TLV=150 (part).
					</descr>
				</field>
				<field name="noOfSymbolsSubch" type="NPF_uint8_t" brief="Number of symbols for REQ in subchanalization region.">
					<descr>
						Number of OFDM symbols used by each transmit opportunity
						when REQ Region-Full is allocated in subchannelization region. Values 1-32. UCD TLV=150 (part).
					</descr>
				</field>
				<field name="initRangingSubchCodes" type="NPF_uint8_t" brief="Subchannelization focused contention codes">
					<descr>
							Number of contention codes (CSE) that shell only be used to reqyest a sybchanalized allocation. Allowed values 0-8, default 0.
							Valid only when subchanalization initial ranging supported - initRangingSubchSup is True. UCD TLV=151.
					</descr>
				</field>
				<field name="initRangingSubchSup" type="NPF_boolean_t" brief="True - BS is capable to support subchanalized initial ranging requests, false - BS do not support subschanalized initial ranging. UCD TLV=152"></field>
				<field name="contentionRangingOppSize" type="NPF_uint16_t" brief="Contention ranging request opportunity size.">
					<descr>
						Size (in units of PS) of the transmission opportunity that an SS may use to transmit a RNG-REQ message
						in a contention ranging request opportunity. The value includes all PHY overhead as well as the maximum SS/BS round trip propagation delay.
						UCD TLV=153.
					</descr>
				</field>
				<field name="contentionRangingReqBurstSize" type="NPF_uint16_t" brief="Contention ranging request burst size.">
					<descr>
						Size (in OFDM symbols) of PHY bursts that an SS shall use to transmit a RNG-REQ message in a contention ranging request opportunity.						
						UCD TLV=154.
					</descr>
				</field>
				<field name="cidIncState" type="NPF_boolean_t" brief="Defines if CIDs are included in maps."></field>
			</struct>
			<define brief="OFDMA Channels Mask">
				<descr>
				These mask bits are used to define which subchannels group are used in default zone of DL frame.
			</descr>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SUBCH_MASK_CH0" brief="Subchannel group 0">
					<value>(0x01ull &lt;&lt; 0)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SUBCH_MASK_CH1" brief="Subchannel group 1">
					<value>(0x01ull &lt;&lt; 1)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SUBCH_MASK_CH2" brief="Subchannel group 2">
					<value>(0x01ull &lt;&lt; 2)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SUBCH_MASK_CH3" brief="Subchannel group 3">
					<value>(0x01ull &lt;&lt; 3)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SUBCH_MASK_CH4" brief="Subchannel group 4">
					<value>(0x01ull &lt;&lt; 4)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_OFDMA_SUBCH_MASK_CH5" brief="Subchannel group 5">
					<value>(0x01ull &lt;&lt; 5)</value>
				</field>
			</define>
			<enum type="NPF_F_wmaxBscpMapsType_t" name="e2">
				<descr>
          Type of maps to be used.
        </descr>
				<field name="NPF_F_WMAX_BSCP_MAP_TYPE_NORMAL" value="0" brief="Normal DL and UL maps."></field>
				<field name="NPF_F_WMAX_BSCP_MAP_TYPE_COMPRESSED_NO_SUBMAPS" brief="Compressed DL and UL maps without usage of sub-maps"></field>
				<field name="NPF_F_WMAX_BSCP_MAP_TYPE_COMPRESSED_WITH_SUBMAPS" brief="Compressed DL and UL maps with usage of sub-maps. The sub-maps are located in the same permutation zone as the DL/UL maps."></field>
				<field name="NPF_F_WMAX_BSCP_MAP_TYPE_COMPRESSED_WITH_SUBMAPS_IN_OTHER_ZONES" brief="Compressed DL and UL maps with usage of sub-maps. The sub-maps can be located in the other permutation zones than the DL/UL maps."></field>
			</enum>
			<struct type="NPF_F_wmaxBscpHarqPhyParms_t" name="" brief="All PHY HARQ related parameters">
				<field name="harqSupport" type="NPF_boolean_t" brief="TRUE when the HARQ feature is supported in the PHY."></field>
				<!-- HARQ DL specific parameters -->
				<field name="dlHarqBuffNum" type="NPF_uint32_t" brief="The number of HARQ buffers supported by the PHY in the downlink direction"></field>
				<field name="dlHarqBuffSize" type="NPF_uint32_t" brief="The number of bytes that can be stored in one HARQ PHY DL buffer"></field>
				<field name="dlHarqAggregFlag" type="NPF_boolean_t" brief="The flag specifying if the PHY supports aggregation of HARQ DL buffers"></field>
				<!-- HARQ UL specific parameters -->
				<field name="ulHarqBuffNum" type="NPF_uint32_t" brief="The number of HARQ buffers supported by the PHY in the uplink direction"></field>
				<field name="ulHarqBuffSize" type="NPF_uint32_t" brief="The number of bytes that can be stored in one HARQ PHY UL buffer"></field>
				<field name="ulHarqAggregFlag" type="NPF_boolean_t" brief="The flag specifying if the PHY supports aggregation of HARQ UL buffers"></field>
			</struct>
			<enum type="NPF_F_wmaxBscpSlotReuseParms_t">
				<descr>
                                        Valid slot reuse options that can be set at Fast Feedback region allocation.
                                </descr>
				<field name="NPF_F_WMAX_BSCP_CQICH_REP_OPT1_SS1FREQ1" value="0" brief="One SS can use slot in each frame."></field>
				<field name="NPF_F_WMAX_BSCP_CQICH_REP_OPT2_SS2FREQ2" brief="Two SSs can use slot each 2 frames"></field>
				<field name="NPF_F_WMAX_BSCP_CQICH_REP_OPT3_SS4FREQ4" brief="Four SSs can use slot each 4 frames"></field>
				<field name="NPF_F_WMAX_BSCP_CQICH_REP_OPT4_SS8FREQ8" brief="Eight SSs can use slot each 8 frames"></field>
				<field name="NPF_F_WMAX_BSCP_CQICH_REP_OPT5_SS1FREQ2ANDSS2FREQ4" brief="One SS can use slot each 2 frames and two SSs can use slot each 4 frames"></field>
				<field name="NPF_F_WMAX_BSCP_CQICH_REP_OPT6_SS1FREQ2ANDSS1FREQ4ANDSS2FREQ8" brief="One SS can use slot each 2 frames and one SS can use slot each 4 frames and four SSs can use slot each 8 frames"></field>
				<field name="NPF_F_WMAX_BSCP_CQICH_REP_OPT7_SS1FREQ2ANDSS4FREQ8" brief="One SS can use slot each 2 frames and four SSs can use slot each 8 frames"></field>
				<field name="NPF_F_WMAX_BSCP_CQICH_REP_OPT8_SS2FREQ4ANDSS4FREQ8" brief="Two SSs can use slot each 4 frames and four SSs can use slot each 8 frames"></field>		
			</enum>
			
			<struct type="NPF_F_wmaxBscpDiucAndRepetitionType_t" name="" brief="Pair of downlink burst profile index and repetition type.">
				<descr>
              This data structure defines a pair that consists from downlink burst profile index and repetition type.  
          </descr>
				<see>NPF_F_wmaxBscpSubmapMapping_t</see>
				<see>NPF_F_wmaxBscpXiucSubmapMapping_t</see>
				<field name="diuc" type="NPF_uint8_t" brief="Downlink burst profile index."></field>
				<field name="repetition" type="NPF_F_wmaxBscpRepetitionType_t" brief="Repetition type."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpXiucSubmapMapping_t" name="" brief="Mapping between sub-maps and burst profiles.">
				<see>NPF_F_wmaxBscpOfdmaParams_t</see>
				<see>NPF_F_wmaxBscpMacDcdUcdChangeArgs_t</see>
				<descr>
              This data structure defines which sub-map is used for each burst profile.
              Furthermore it defines downlink burst profile and repetition for each sub-map.  
            </descr>
				<vector type="NPF_uint8_t" name="diucToSubmap">
					<descr>    
                    Mapping of downlink burst profile indices to sub-maps. Acceptable sub-map indices are 0,1,2,3.
                </descr>
					<length type="NPF_uint32_t" name="dlBpNum" brief="Number of elements in the array."></length>
				</vector>
				<vector type="NPF_uint8_t" name="uiucToSubmap">
					<descr>    
                    Mapping of uplink burst profile indices to sub-maps. Acceptable sub-map indices are 0,1,2,3.
                </descr>
					<length type="NPF_uint32_t" name="ulBpNum" brief="Number of elements in the array."></length>
				</vector>
				<field name="submapToDiucAndRepetitionType" type="NPF_F_wmaxBscpDiucAndRepetitionType_t" size="4" brief="Mapping of sub-maps indices to downlink burst profile indices and repetition types. For each sub-map, a pair of diuc and repetition type is selected."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpOfdmaPhyParms_t" name="" brief="OFDMA PHY Specific Parameters definition">
				<descr>
				This data structure defines the OFDMA PHY Specific Parameters.
				</descr>
				<see>NPF_F_wmaxBscpMacPhyParms_t</see>
				<field name="phyProfile" type="NPF_F_wmaxBscpOfdmaPhyProfile_t" brief="PHY Profile: profP3_xx"></field>
				<field name="channelSize" type="NPF_F_wmaxBscpOfdmaChannelSize_t" brief="Channel BW size"></field>
				<field name="fft" type="NPF_F_wmaxBscpOfdmaFftSize_t" brief="FFT Size"></field>
				<field name="dlChannelsMask" type="NPF_uint8_t" brief="Mask of used sub-channels groups on default DL PUSC zone.">
					<descr>Use NPF_F_WMAX_BSCP_OFDMA_SUBCH_MASK_CH0..5 bitmasks to define used subchannels.</descr>
				</field>
				<field name="ulAllocatedSubchannelsMask" type="NPF_uint8_t" size="9" brief="This is a bitmap describing the physical subchannels allocated to the
							segment in the UL, when using the UL PUSC permutation. The
							LSB of the first byte shall correspond to subchannel 0. For any bit
							that is not set, the corresponding subchannel shall not be used by the
							SS on that segment. UCD TLV=157"></field>
				<field name="dlMapRepet" type="NPF_F_wmaxBscpRepetitionType_t" brief="Repetition used for sending DL map."></field>
				<field name="dlMapCode" type="NPF_F_wmaxBscpCodingType_t" brief="Code used for sending DL map."></field>
				<field name="cdmaCodeGroup" type="NPF_uint8_t" brief="Starting number of the group of CDMA codes used for this BS."></field>
				<field name="cdmaCodeInitRangingNo" type="NPF_uint8_t" brief="Number of CDMA codes assigned to initial ranging"></field>
				<field name="cdmaCodePeriodicRangingNo" type="NPF_uint8_t" brief="Number of CDMA codes assigned to periodic ranging"></field>
				<field name="cdmaCodeBwdReqNo" type="NPF_uint8_t" brief="Number of CDMA codes assigned to bandwidth request"></field>
				<field name="cdmaCodeHandoverRangingNo" type="NPF_uint8_t" brief="Number of CDMA codes assigned to handover ranging"></field>
				<field name="periodtRngBackoffStart" type="NPF_uint8_t" brief="Initial backoff window size for periodic ranging, in power of 2. Range 0-15. UCD TLV=153"></field>
				<field name="periodRngBackoffEnd" type="NPF_uint8_t" brief="Final backoff window size for periodic ranging, in power of 2. Range 0-15.UCD TLV=154"></field>
				<field name="hoRngBackoffStart" type="NPF_uint8_t" brief="Initial backoff window size for handover ranging, in power of 2. Range 0-15. UCD TLV=7"></field>
				<field name="hoRngBackoffEnd" type="NPF_uint8_t" brief="Final backoff window size for handover ranging, in power of 2. Range 0-15. UCD TLV=8"></field>
				<field name="ulPermutationBase" type="NPF_uint8_t" brief="Determines the UL_PermBase parameter for the subcarrier permutation (7 LSBs valid). UCD TLV=156"></field>
				<field name="initRngInterval" type="NPF_uint8_t" brief="Number of frames between initial ranging interval allocation. UCD TLV=195"></field>
				<field name="cidIncState" type="NPF_boolean_t" brief="Defines if CIDs are included in maps."></field>
				<vector type="NPF_F_wmaxBscpOfdmaZone_t" name="dlZones">
					<descr>
						This table contains definition of dlZonesNum DL zones. Note that at least one zone has to be defined.
					</descr>
					<length type="NPF_uint32_t" name="dlZonesNum" brief="Number of elements in dlZone array."></length>
				</vector>
				<vector type="NPF_F_wmaxBscpOfdmaZone_t" name="ulZones">
					<descr>
						This table contains definition of ulZonesNum UL zones. Note that at least one zone has to be defined.
					</descr>
					<length type="NPF_uint32_t" name="ulZonesNum" brief="Number of elements in ulZone array."></length>
				</vector>
				<field name="harqPhyParms" type="NPF_F_wmaxBscpHarqPhyParms_t" brief="PHY HARQ related parameters."></field>
				<field name="cqichSlotReuseParms" type="NPF_F_wmaxBscpSlotReuseParms_t" brief="Fast Feedback region slot reuse related parameters."></field>
				<field name="cqichIdSize" type="NPF_uint8_t" brief="CQICH_ID size (3 to 9). Default equals 8."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMacPhyParms_t" brief="PHY Specific Parameters definition">
				<descr>
					This data structure defines the PHY Specific Parameters set during a NPF_F_wmaxBscpMacAdd operation.
				</descr>
				<see>NPF_F_wmaxBscpMacAddArgs_t</see>
				<field name="phyId" type="NPF_F_wmaxBscpPhyIdent_t" brief="PHY Entity Id"></field>
				<field name="cpType" type="NPF_F_wmaxBscpPhyCpType_t" brief="Cyclic Prefix: 1/4 or 1/8 or 1/16 or 1/32"></field>
				<field name="ttg" type="NPF_uint16_t" brief="Time to switch from TX to RX. (physical slots). DCD TLV=7"></field>
				<field name="rtg" type="NPF_uint16_t" brief="Time to switch from RX to TX. (physical slots). DCD TLV=8"></field>
				<field name="mapsType" type="NPF_F_wmaxBscpMapsType_t" brief="Type of DL/UL maps to be used."></field>
				<field name="xiucSubmapMapping" type="NPF_F_wmaxBscpXiucSubmapMapping_t" brief="Mapping between burst profiles and sub-maps. Valid only if sub-maps are suppported."></field>
				<field name="bsEirp" type="NPF_int16_t" brief="BS EIRP. Signed in units of 1 dBM. DCD TLV=2"></field>
				<field name="rssIrMax" type="NPF_int16_t" brief="Initial Ranging maximum equivalent isotropic received power at BS. Signed in units of 1 dBm. DCD TLV=9"></field>
				<field name="dlFrequency" type="NPF_uint32_t" brief="Downlink center frequency (kHz). DCD TLV=12"></field>
				<field name="cinrAverParm" type="NPF_uint8_t" brief="Default averaging parameter for physical CINR measurements, in multiples of 1/16. DCD TLV=21"></field>
				<field name="rssiAverParm" type="NPF_uint8_t" brief="Default averaging parameter for RSSI measurements, in multiples of 1/16. DCD TLV=21"></field>
				<field name="ulFrequency" type="NPF_uint32_t" brief="Uplink center frequency (kHz). UCD TLV=5"></field>
				<field name="initRngBackoffStart" type="NPF_uint8_t" brief="Initial backoff window size for initial ranging, in power of 2. Range 0-15."></field>
				<field name="initRngBackoffEnd" type="NPF_uint8_t" brief="Final backoff window size for initial ranging, in power of 2. Range 0-15."></field>
				<field name="bwReqBackoffStart" type="NPF_uint8_t" brief="Initial backoff window size for bandwidth request, in power of 2. Range 0-15."></field>
				<field name="bwReqtRngBackoffEnd" type="NPF_uint8_t" brief="Final backoff window size for bandwidth request, in power of 2. Range 0-15."></field>
				<selectunion type="NPF_F_wmaxBscpPhySpecificParamsUnion_t" name="u">
					<selectfield type="NPF_F_wmaxBscpPhyType_t" name="phyType" brief="Type of PHY."></selectfield>
					<field type="NPF_F_wmaxBscpOfdmPhyParms_t" name="ofdmParms">
						<descr>OFDM specific parameters.</descr>
						<selector>NPF_F_WMAX_BSCP_PHY_TYPE_OFDM</selector>
					</field>
					<field type="NPF_F_wmaxBscpOfdmaPhyParms_t" name="ofdmaParms">
						<descr>OFDMA specific parameters.</descr>
						<selector>NPF_F_WMAX_BSCP_PHY_TYPE_OFDMA</selector>
					</field>
				</selectunion>
			</struct>
			<struct type="NPF_F_wmaxBscpHarqRepPolicy_t" brief="HARQ Retransmission Policy">
				<descr>
					This structure contains the Hybrid ARQ (HARQ) retransmission policy.
				</descr>
				<see>NPF_F_wmaxBscpMacCpsParms_t</see>
				<field name="repetition" type="NPF_F_wmaxBscpRepetitionType_t" brief="Repetition to be used."></field>
				<field name="boosting" type="NPF_F_wmaxBscpHarqBoostingType_t" brief="Boosting to be used."></field>
			</struct>
                        
                        <struct type="NPF_F_wmaxBscpHarqMgmtConnAcidMapping_t" brief="HARQ ACID mapping for management connections">
                            <descr>
                               Definition of HARQ ACID mapping for management connections. Note that specific configuration applies either to uplink or downlink direction. Furthermore ACID mapping can be defined depending on the number of HARQ channels supported by SS.   
                            </descr>
                            <field name="minChannelNum" type="NPF_uint8_t" brief="The minimum number of HARQ channels supported by SS that is required for implementing this mapping."></field>
                            <field name="maxChannelNum" type="NPF_uint8_t" brief="The maximum number of HARQ channels supported by SS for which this mapping can be implemented."></field>
                            <vector name="acids" type="NPF_uint8_t" brief= "ACID mapping for management connections.">
				<descr>
                                    List of all ACIDs assigned to management connections.
                                </descr>
				<length name="acidsNum" type="NPF_uint32_t" brief="Number of elements in the 'acids' table - the number of HARQ sub-channels to be used by management connections."></length>
			    </vector>
                        </struct>

                        <struct type="NPF_F_wmaxBscpHarqMgmtConnParms_t" brief="Parameters defining HARQ configuration for management connections">
                            <descr>
                                HARQ configuration for management connections. Note that specific configuration aplies either to uplink or downlink direction.
                            </descr>
                            <field  name="enable" type="NPF_boolean_t" brief ="Indicates HARQ support for management connections.">
                            </field>
	                    <field name="retransmitNum" type="NPF_uint8_t" Brief="Maximum number of retransmissions for management connections.">
                            </field>
                            <vector name="acidMappings" type="NPF_F_wmaxBscpHarqMgmtConnAcidMapping_t" brief="HARQ ACID mapping for management connections">
                                    <descr>
                                        List of configurations defining HARQ ACID mapping for management connections.
                                    </descr>
                                    <length name="acidMappingsNum" type="NPF_uint32_t" brief="Number of elements in the 'acidMappings' table - the number of configurations."></length>
                            </vector> 
                        </struct>

			<struct type="NPF_F_wmaxBscpMacCpsHarqParms_t" name="" brief="HARQ specific MAC CPS parameters">
				<!-- HARQ DL specific parameters -->
				<field name="dlMaxBurst" type="NPF_uint8_t" brief="The maximum number of bursts in a DL sub-frame."></field>
				<field name="dlRetransmitNum" type="NPF_uint8_t" Brief="Maximum number of retransmissions in DL."></field>
                                 <field name="dlHarqMgmtConnParms" type="NPF_F_wmaxBscpHarqMgmtConnParms_t" brief="Parameters defining HARQ configuration for downlink management connections.">
                                </field>

				<!-- HARQ UL specific parameters -->
				<field name="ulMaxBurst" type="NPF_uint8_t" brief="The maximum number of bursts in a UL sub-frame."></field>
				<field name="ulRetransmitNum" type="NPF_uint8_t" Brief="Maximum number of retransmissions in UL."></field>
                                <field name="ulHarqMgmtConnParms" type="NPF_F_wmaxBscpHarqMgmtConnParms_t" brief="Parameters defining HARQ configuration for uplink management connections.">
                                </field> 
			</struct>
			<struct type="NPF_F_wmaxBscpMacCpsParms_t" brief="MAC Common Part Sublayer Specific Parameters">
				<descr>
					This structure contains MAC-CPS options.
				</descr>
				<see>NPF_F_wmaxBscpMacAddArgs_t</see>
				<field name="bsId" type="NPF_uint8_t" size="6" brief="Basestation Id."></field>
				<field name="frameLen" type="NPF_F_wmaxBscpFrameLength_t" brief="Frame Length"></field>
				<field name="duplexType" type="NPF_F_wmaxBscpDuplexingType_t" brief="Duplex type: FDD or TDD"></field>
				<field name="ulMapRelevance" type="NPF_F_wmaxBscpUlMapRelevance_t" brief="UL-MAP relevance: this frame or the next frame."></field>
				<field name="split" type="NPF_uint16_t" brief="TDD Frame split point - distance between start of the frame and the first symbol of the UL sub-frame specified in physical slots [Physical Slots]."></field>
				<field name="harqRepPolicy" type="NPF_F_wmaxBscpHarqRepPolicy_t" brief="HARQ retransmission policy"></field>
				<field name="timerT22" type="NPF_uint32_t" brief="T22 Timer - Wait for ARQ-Reset (ms)"></field>
				<field name="arqResetMaxRetries" type="NPF_uint32_t" brief="Maximum number of sending ARQ reset"></field>
				<field name="timerT27" type="NPF_uint32_t" brief="T27 Timer - SS Inactivity Timer - BS will assign a grant after T27 inactivity of the SS (ms)"></field>
				<field name="harqParms" type="NPF_F_wmaxBscpMacCpsHarqParms_t" brief="HARQ specific MAC CPS parameters"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpVendorMacCpsParms_t" brief="MAC Common Part Sublayer Vendor Specific Parameters">
				<descr>
					This structure contains vendor specific MAC-CPS options.
				</descr>
				<see>NPF_F_wmaxBscpMacAddArgs_t</see>
				<field name="timeHorizon" type="NPF_uint16_t" brief="Time Horizon in frames"></field>
				<field name="overflowThreshold" type="NPF_uint16_t" brief="The maximum number of frames when observed continuous scheduler overflow before reporting it to the Control Plane"></field>
				<field name="inactivityThreshold" type="NPF_uint16_t" brief="The maximum number of UL allocations that were not used by a SS before reporting it as inactive"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMgmtParms_t" brief="Management Connection QOS Profiles">
				<descr>
					This structure defines management channel QoS options.
				</descr>
				<field name="mgmtQosProfileMask" type="NPF_uint8_t" brief="Controls whether basicQosParms, primaryQosParms and secondaryQosParms override default values.  See: Management Channel QOS Profile Mask"></field>
				<field name="mgmtBasDlQosParmSet" type="NPF_F_wmaxBscpQosProfile_t" brief="BASIC management channel downlink QOS Profile"></field>
				<field name="mgmtBasUlQosParmSet" type="NPF_F_wmaxBscpQosProfile_t" brief="BASIC management channel uplink QOS Profile"></field>
				<field name="mgmtPriDlQosParmSet" type="NPF_F_wmaxBscpQosProfile_t" brief="PRIMARY management channel downlink QOS Profile"></field>
				<field name="mgmtPriUlQosParmSet" type="NPF_F_wmaxBscpQosProfile_t" brief="PRIMARY management channel uplink QOS Profile"></field>
				<field name="mgmtSecDlQosParmSet" type="NPF_F_wmaxBscpQosProfile_t" brief="SECONDARY management channel downlink QOS Profile"></field>
				<field name="mgmtSecUlQosParmSet" type="NPF_F_wmaxBscpQosProfile_t" brief="SECONDARY management channel uplink QOS Profile"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsParms_t" brief="Subscriber Parameters">
				<descr>
					This structure contains subscriber related parameters that are configured when a MAC instance is created.
				</descr>
				<see>NPF_F_wmaxBscpMacAddArgs_t</see>
				<field name="maxSs" type="NPF_uint16_t" brief="Specifies the maximum number of subscribers that are permitted to enter the network.  If this limit is reached, the NPF_F_wmaxBscpMacBscpStats_t.ssTotalRejected is incremented and the ranging request is discarded."></field>
				<field name="dfltSsType" type="NPF_F_wmaxBscpSsType_t" brief="Specifies the default type of SS"></field>
				<field name="dfltMidamble" type="NPF_F_wmaxBscpSsMidamble_t" brief="NPF_F_wmaxBscpDfltSsAddArgs_t: Type of preamble and midamble to be used by the SS in uplink transmissions (by default)"></field>
				<field name="mgmtParms" type="NPF_F_wmaxBscpMgmtParms_t" brief="Optional QoS settings for subscriber management channels"></field>
				<field name="ssAgingTimer" type="NPF_uint32_t" brief="Nominal time for aging SS associations [msec, min 100, max 10000]"></field>
				<field name="dfltUlCap" type="NPF_F_wmaxBscpMacCapHandle_t" brief="Specifies the default Uplink CAP to be used during Initial Ranging"></field>
				<field name="dfltDlCap" type="NPF_F_wmaxBscpMacCapHandle_t" brief="Specifies the default Downlink CAP to be used during Initial Ranging"></field>
				<field name="reportPwrCorrNumTrigger" type="NPF_uint32_t" brief="The maximum number of power corrections send to the subscriber before channal report is requested from this subscriber"></field>
				<field name="reportTimerTrigger" type="NPF_uint32_t" brief="The maximum allowed time between two channal report requests to the subscriber [ms]">
					<descr>
						The new channel report will be requested no later then reportTimerTrigger after last report was requested from the subscriber.
					</descr>
				</field>
			</struct>
			<struct type="NPF_F_wmaxBscpXcdSigParms_t" brief="DCD/UCD Sending Parameters">
				<descr>
					This structure contains the DCD and UCD signaling options.
				</descr>
				<field name="dcdInterval" type="NPF_uint32_t" brief="IEEE 802.16-2004: Table 342: Time between transmission of DCD messages [msec, max 10000]"></field>
				<field name="dcdTransition" type="NPF_uint32_t" brief="IEEE 802.16-2004: Table 342: Time BS waits after repeating DCD message until DL-MAP uses new profiles [frames, min 2]"></field>
				<field name="ucdInterval" type="NPF_uint32_t" brief="IEEE 802.16-2004: Table 342: Time between transmission of UCD messages [msec, max 10000]"></field>
				<field name="ucdTransition" type="NPF_uint32_t" brief="IEEE 802.16-2004: Table 342: Time BS waits after repeating UCD message until UL-MAP uses new profiles [frames, min 2]"></field>
				<vector type="NPF_F_wmaxBscpBpSetElement_t" name="ulBp">
					<descr>
						Set of burst profiles to be sent in the UCD message
					</descr>
					<length type="NPF_uint32_t" name="ulBpNum" brief="Number of elements in the 'ulBp' table"></length>
				</vector>
				<vector type="NPF_F_wmaxBscpBpSetElement_t" name="dlBp">
					<descr>
						Set of burst profiles to be sent in the DCD message. 
						For OFDMA, burst profile with DIUC=0 must have the same parameters as DL Map.
					</descr>
					<see>NPF_F_wmaxBscpOfdmaPhyParms_t</see>
					<length type="NPF_uint32_t" name="dlBpNum" brief="Number of elements in the 'dlBp' table"></length>
				</vector>
			</struct>
			<struct type="NPF_F_wmaxBscpXcdSigUpdateParms_t" brief="DCD/UCD Sending Parameters Update ">
				<descr>
					This structure contains the DCD and UCD signaling options that can be updated at run-time.
				</descr>
				<field name="changeMask" type="NPF_uint32_t" brief="Selects which options are valid; See: DCD and UCD Option Mask"></field>
				<field name="dcdInterval" type="NPF_uint32_t" brief="IEEE 802.16-2004: Table 342: Time between transmission of DCD messages [msec, max 10000]"></field>
				<field name="dcdTransition" type="NPF_uint32_t" brief="IEEE 802.16-2004: Table 342: Time BS waits after repeating DCD message until DL-MAP uses new profiles [frames, min 2]"></field>
				<field name="ucdInterval" type="NPF_uint32_t" brief="IEEE 802.16-2004: Table 342: Time between transmission of UCD messages [msec, max 10000]"></field>
				<field name="ucdTransition" type="NPF_uint32_t" brief="IEEE 802.16-2004: Table 342: Time BS waits after repeating UCD message until UL-MAP uses new profiles [frames, min 2]"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpRngSigParms_t" brief="Ranging Parameters">
				<descr>
					This structure defines subscriber ranging options.
				</descr>
				<field name="powerDeviation" type="NPF_uint8_t" brief="Maximum deviation from ideal received power level [0.25 dBm]"></field>
				<field name="timingDeviation" type="NPF_uint32_t" brief="Maximum deviation from ideal received timing [1 F/s]"></field>
				<field name="frequencyDeviation" type="NPF_uint32_t" brief="Maximum deviation from ideal received frequency [Hz]"></field>
				<field name="invitedRngRetriesNum" type="NPF_uint16_t" brief="Number of retries on inviting ranging requests (valid only for OFDM)[min 16]"></field>
				<field name="rngCorrectionRetriesNum" type="NPF_uint16_t" brief="Number of corrections allowed during initial inviting ranging (valid only for OFDM) [min 16]"></field>
				<field name="rngRspProcessingTime" type="NPF_uint16_t" brief="Time between RNG-RSP before being expected to reply to invited ranging request [msec, min 10 msec]"></field>
			</struct>
			<enum type="NPF_F_wmaxBscpPkmAuthMode_t" brief="PKM Authorization Mode">
				<descr>
					Indicates the authorization modes that can be negotiated with the subscriber during the SBC-REQ/RSP message exchange.
				</descr>
				<see>NPF_F_wmaxBscpSbcSigParms_t</see>
				<field name="NPF_F_WMAX_BSCP_AUTH_MODE_NONE" brief="No Authorization"></field>
				<field name="NPF_F_WMAX_BSCP_AUTH_MODE_PKMV1_RSA" brief="PKMv1 RSA Authorization"></field>
				<field name="NPF_F_WMAX_BSCP_AUTH_MODE_PKMV2_RSA" brief="PKMv2 RSA Authorization"></field>
				<field name="NPF_F_WMAX_BSCP_AUTH_MODE_PKMV2_RSA_EAP" brief="PKMv2 RSA followed by EAP Authorization"></field>
				<field name="NPF_F_WMAX_BSCP_AUTH_MODE_PKMV2_RSA_AUTH_EAP" brief="PKMv2 RSA followed by authenticated EAP Authorization"></field>
				<field name="NPF_F_WMAX_BSCP_AUTH_MODE_PKMV2_EAP" brief="PKMv2 EAP Authorization"></field>
				<field name="NPF_F_WMAX_BSCP_AUTH_MODE_PKMV2_EAP_AUTH_EAP" brief="PKMv2 EAP followed by authenticated EAP Authorization"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpPkmMacMode_t" brief="PKM Message Authentication Mode">
				<descr>
					Indicates the message authentication codes (MAC) that can be negotiated during the SBC exchange.
				</descr>
				<see>NPF_F_wmaxBscpSbcSigParms_t</see>
				<field name="NPF_F_WMAX_BSCP_MAC_MODE_NONE" brief="Do not perform signaling message authentication."></field>
				<field name="NPF_F_WMAX_BSCP_MAC_MODE_CMAC" brief="Use CMAC for message authentication."></field>
				<field name="NPF_F_WMAX_BSCP_MAC_MODE_HMAC" brief="Use 160-bit HMAC for message authentication."></field>
				<field name="NPF_F_WMAX_BSCP_MAC_MODE_HMAC_96" brief="Use 96-bit short HMAC for message authentication."></field>
				<field name="NPF_F_WMAX_BSCP_MAC_MODE_HMAC_80" brief="Use 80-bit short HMAC for message authentication."></field>
				<field name="NPF_F_WMAX_BSCP_MAC_MODE_HMAC_64" brief="Use 64-bit short HMAC for message authentication."></field>
			</enum>
			<struct type="NPF_F_wmaxBscpSbcSigParms_t" brief="Basic Capabilities Parameters">
				<descr>
					This structure defines the BS negotiating position for the SBC exchange.
				</descr>
				<vector name="pkmAuthModes" type="NPF_F_wmaxBscpPkmAuthMode_t" brief="This list defines the preferred authorization modes (in priority order) that can be negotiated during the SBC exchange.">
					<length name="pkmAuthModesNum" type="NPF_uint32_t" brief="Number of Authorization Modes."></length>
				</vector>
				<vector name="pkmMacModes" type="NPF_F_wmaxBscpPkmMacMode_t" brief="This list defines a prioritized list of message authentication modes (in priority order) that can be negotiated during the SBC exchange.">
					<length name="pkmMacModesNum" type="NPF_uint32_t" brief="Number of message authentication modes."></length>
				</vector>
			</struct>
			<enum type="NPF_F_wmaxBscpPkmCryptoSuite_t" brief="PKM Crypto Suite">
				<descr>
					Crypto suites that can be negotiated for security associations.
					Each entry represents a combination of modes used for data encryption, data authentication and TEK exchange.
				</descr>
				<see>NPF_F_wmaxBscpPkmSigParms_t</see>
				<field name="NPF_F_WMAX_BSCP_CRYPTO_SUITE_NONE_NONE_3DES" brief="Do not use data encryption and authentication."></field>
				<field name="NPF_F_WMAX_BSCP_CRYPTO_SUITE_DESCBC_NONE_3DES" brief="Use DES-CBC for data encryption, don't perform data authentication, use 3DES for TEK exchange "></field>
				<field name="NPF_F_WMAX_BSCP_CRYPTO_SUITE_NONE_NONE_RSA" brief="Do not use data encryption and authentication, RSA for TEKs (not used)."></field>
				<field name="NPF_F_WMAX_BSCP_CRYPTO_SUITE_DESCBC_NONE_RSA" brief="Use DES-CBC for data encryption, don't perform data authentication, use RSA for TEK exchange."></field>
				<field name="NPF_F_WMAX_BSCP_CRYPTO_SUITE_AESCCM_CCM_AESECB" brief="Use AES-CCM for data encryption and authentication, use AES-ECB for TEK exchange "></field>
				<field name="NPF_F_WMAX_BSCP_CRYPTO_SUITE_AESCCM_CCM_AESKEY" brief="Use AES-CCM for data encryption and authentication, use AES-KEY for TEK exchange "></field>
				<field name="NPF_F_WMAX_BSCP_CRYPTO_SUITE_AESCBC_NONE_AESECB" brief="Use AES-CBC for data encryption, don't perform data authentication, use AES-ECB for TEK exchange "></field>
			</enum>
			<struct type="NPF_F_wmaxBscpPkmSigParms_t" brief="PKM Signaling Parameters">
				<descr>
					This structure defines the PKM signaling parameters.
				</descr>
				<field name="bsCert" type="NPF_F_wmaxBscpOctetString_t" brief="BS X.509 certificate (ASN.1 DER encoded).  Only required if using PKMv2 RSA Authentication."></field>
				<field name="bsPrivateKey" type="NPF_F_wmaxBscpOctetString_t" brief="BS RSA Private Key.  Only required if PKMv2 RSA Authentication used."></field>
				<field name="timerT17" type="NPF_uint32_t" brief="IEEE 802.16-2004: Table 342: Wait for SS to complete authorization [msec, max 300000 (5 min)]"></field>
				<field name="akLifetime" type="NPF_uint32_t" brief="IEEE 802.16-2004: Table 343: Lifetime assigned to new AK [sec, min 86400 (1 day), default 604800 (7 day), max 6048000 (70 day), testMode 300 (5 min)]"></field>
				<field name="tekLifetime" type="NPF_uint32_t" brief="IEEE 802.16-2004: Table 343: Lifetime assigned to new TEK [sec, min 1800 (30 min), default 43200 (12 hour), max 604800 (7 day), testMode 180 (3 min)]"></field>
				<field name="saChallengeTimeout" type="NPF_uint32_t" brief="P802.16-2005: Table 343: Time prior to re-send of SA-TEK-Challenge. [msec, min 500, default 1000, max 2000]"></field>
				<field name="saChallengeMaxResends" type="NPF_uint32_t" brief="P802.16-2005: Table 343: Maximum number of transmissions of SATEK-Challenge"></field>
				<field name="eapStartTimeout" type="NPF_uint32_t" brief="P802.16-2005: Table 343: Time, in seconds, to wait for PKMv2_EAP_Start or PKMv2_Authenticated_EAP_Start after the success of the first EAP in double EAP mode [msec, min 300, default 1000, max 1000]."></field>
				<field name="eapCompleteMaxResends" type="NPF_uint32_t" brief="P802.16-2005: Table 343: Time, in seconds, to wait for PKMv2_EAP_Start or PKMv2_Authenticated_EAP_Start after the success of the first EAP in double EAP mode [msec, min 300, default 1000, max 1000]."></field>
				<field name="pkmTestMode" type="NPF_boolean_t" brief="Specifies whether ranges of certain PKM timers will be relaxed for testing."></field>
				<vector name="cryptoSuites" type="NPF_F_wmaxBscpPkmCryptoSuite_t" brief="This list defines the cryptographic modes (in priority order) that can be negotiated for security associations.">
					<length name="cryptoSuitesNum" type="NPF_uint32_t" brief="Number of Crypto Modes."></length>
				</vector>
			</struct>
			<struct type="NPF_F_wmaxBscpRegSigParms_t" brief="Registration Signaling Parameters">
				<descr>
					This structure defines the registration signaling options.
				</descr>
				<field name="timerT9" type="NPF_uint32_t" brief="IEEE 802.16-2004: Table 342: Registration timeout [msec, min 300]"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpTftpSigParms_t" brief="TFTP Signaling Parameters">
				<descr>
					This structure defines the TFTP signaling options.
				</descr>
				<field name="timerT13" type="NPF_uint32_t" brief="IEEE 802.16-2004: Table 342: Wait for TFTP-CMPLT [msec, max 900000 (15 min)]"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpDsxSigParms_t" brief="DSx Signaling Parameters">
				<descr>
					This structure defines the DSx signaling options.
				</descr>
				<field name="timerT7" type="NPF_uint32_t" brief="IEEE 802.16-2004: Table 342: Wait for DSA, DSC, DSD response timeout [msec, max 1000]"></field>
				<field name="timerT8" type="NPF_uint32_t" brief="IEEE 802.16-2004: Table 342: Wait for DSA, DSC acknowledgement timeout [msec, max 300]"></field>
				<field name="timerT10" type="NPF_uint32_t" brief="IEEE 802.16-2004: Table 342: Wait for DSA, DSC transaction end timeout [msec, max 3000]"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobNbrConf_t" name="" brief="Neighbor Advertisement configuration">
				<descr>
					This data structure defines parameters of the neighbor advertisement.				
				</descr>
				<field name="mobNbrAdvInterval" type="NPF_uint32_t" brief="Nominal time between transmission of MOB-NBR-ADV messages [msec, min 5, max 30 000]"></field>
				<field name="omitOperatorId" type="NPF_boolean_t" brief="Omit Operator ID field when true."></field>
				<field name="omitBsId" type="NPF_boolean_t" brief="Omit sending neighbor BS ID field when true."></field>
				<field name="omitHoOptimization" type="NPF_boolean_t" brief="Omit HO optimization field when true."></field>
				<field name="omitQos" type="NPF_boolean_t" brief="Omit QoS related fields when true."></field>
				<field name="operatorId" type="NPF_uint8_t" size="3" brief="Operator Id.">
					<descr>
               	             24-bits operator ID. Valid only when
               	             omitOperatorId field is set to false.
               	        </descr>
				</field>
			</struct>
			<enum type="NPF_F_wmaxBscpMobDelayHoMethod_t" brief="Delay Handover Method">
				<descr>
					Defines supported methods of limiting packet loss during handover by delaying handover confirmation.
				</descr>
				<field name="NPF_F_WMAX_BSCP_MOB_DELAY_HO_NONE" value="1" brief="Never delay handover."></field>
				<field name="NPF_F_WMAX_BSCP_MOB_DELAY_HO_NORMAL" brief="Delay handover confirmation until all queued DL packets are transmited. Queues are handled according to their QoS settings."></field>
				<field name="NPF_F_WMAX_BSCP_MOB_DELAY_HO_FAST" brief="Start fast transmission of queued DL packets immediatly, delay handover confirmation until packets are transmited. 
									QoS settings for DL queues are ignored in this case. Curretntly not supported."></field>
			</enum>
			<struct type="NPF_F_wmaxBscpMobDelayHoConf_t" brief="Delay Handover Configuration">
				<descr>
					This structure configures mechanisms to delay handover to limit packet loss during handover.
				</descr>
				<field name="delayHoLossMethod" type="NPF_F_wmaxBscpMobDelayHoMethod_t" brief=""></field>
				<field name="timeout" type="NPF_uint32_t" brief="Timeout waiting for queue become empty before sendig handover confirmation (MOB_BSHO-RSP) (ms).">
					<descr>	
							After this time-out handover confirmation is send even if there are some untransmited DL packets.
							Valid only when packetLossMethod is different then NPF_F_WMAX_BSCP_MOB_PACKET_LOSS_NONE.
				        </descr>
				</field>
			</struct>
			<enum type="NPF_F_wmaxBscpMobSigTriggerType_t" brief="Trigger Types">
				<descr>
					This enuneration defines possible trigger types.
				</descr>
				<field name="NPF_F_WMAX_BSCP_MOB_TRIGGER_TYPE_CINR" value="0" brief="Use CINR metric."></field>
				<field name="NPF_F_WMAX_BSCP_MOB_TRIGGER_TYPE_RSSI" brief="Use RSSI metric."></field>
				<field name="NPF_F_WMAX_BSCP_MOB_TRIGGER_TYPE_RTD" brief="Use RTD (Round Trip Delay) metric."></field>
			</enum>
			<enum type="NPF_F_wmaxBscpMobSigTriggerFunction_t" brief="Trigger Functions">
				<descr>
					This enuneration defines possible trigger functions.
				</descr>
				<field name="NPF_F_WMAX_BSCP_MOB_TRIGGER_FUN_NBR_GREATER_ABS" value="1" brief="Metric of neighbor BS is greater than absolute value. Do not use for RTD metric."></field>
				<field name="NPF_F_WMAX_BSCP_MOB_TRIGGER_FUN_NBR_LESS_ABS" brief="Metric of neighbor BS is less than absolute value. Do not use for RTD metric."></field>
				<field name="NPF_F_WMAX_BSCP_MOB_TRIGGER_FUN_NBR_GREATER_SERVING" brief="Metric of neighbor BS is greater than serving BS metric by relative value. Do not use for RTD metric."></field>
				<field name="NPF_F_WMAX_BSCP_MOB_TRIGGER_FUN_NBR_LESS_SERVING" brief="Metric of neighbor BS is less than serving BS metric by relative value. Do not use for RTD metric."></field>
				<field name="NPF_F_WMAX_BSCP_MOB_TRIGGER_FUN_SERVING_GREATER_ABS" brief="Metric of serving BS greater than absolute value."></field>
				<field name="NPF_F_WMAX_BSCP_MOB_TRIGGER_FUN_SERVING_LESS_ABS" brief="Metric of serving BS less than absolute value."></field>
			</enum>
			<enum type="NPF_F_wmaxBscpMobSigTriggerAction_t" brief="Trigger Action">
				<descr>
					This enuneration defines possible trigger actions.
				</descr>
				<field name="NPF_F_WMAX_BSCP_MOB_TRIGGER_ACTION_SCN_REP" value="1" brief="	Respond on trigger with MOB_SCN-REP after the end of each scanning intervaL."></field>
				<field name="NPF_F_WMAX_BSCP_MOB_TRIGGER_ACTION_HO_REQ" brief="Respond on trigger with MOB_MSHO-REQ."></field>
				<field name="NPF_F_WMAX_BSCP_MOB_TRIGGER_ACTION_SCN_REQ" brief="On trigger, MS starts neighbor BS scanning process by sending MOB_SCN-REQ."></field>
			</enum>
			<struct type="NPF_F_wmaxBscpMobSigTrigger_t" brief="Handover Trigger Definition.">
				<descr>
					This structure defines the HO trigger, distributed to SSes in DCD messages as compound TLV 54.
				</descr>
				<field name="type" type="NPF_F_wmaxBscpMobSigTriggerType_t" brief="The trigger metric type"></field>
				<field name="function" type="NPF_F_wmaxBscpMobSigTriggerFunction_t" brief="Computation defining trigger conditiona"></field>
				<field name="action" type="NPF_F_wmaxBscpMobSigTriggerAction_t" brief="The action to be performed upon reaching trigger condition"></field>
				<field name="value" type="NPF_uint8_t" brief="The value used in comparing measured metric for determining a trigger condition"></field>
				<field name="duration" type="NPF_uint8_t" brief="Trigger averaging duration.">
					<descr> 
							It is the time in ms over which the metric measurements are averaged. When the mean value of the
							measurement meets the trigger condition, the MS reacts using the specified action.
						</descr>
				</field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobSigParms_t" brief="Mobility Signaling Parameters">
				<descr>
					This structure defines the mobility signaling options.
				</descr>
				<field name="enableHo" type="NPF_boolean_t" brief="When true, enable handovers. When false, handovers are disabled. 
								In this case all handover-related parameters are invalid. The setting is communicated to SS during initial network entry 
								(REG-REQ/RSP Mobility Features Supported, TLV=31)"></field>
				<field name="enableIdle" type="NPF_boolean_t" brief="When true, enable support for Idle mode. When false, switch to Idle Mode is not allowed. 
								In this case all Idle Mode related parameters are invalid. The setting is communicated to SS during initial network entry 
								(REG-REQ/RSP Mobility Features Supported, TLV=31)"></field>
				<field name="enableSleep" type="NPF_boolean_t" brief="When true, enable support for Sleep mode. When false, switch to Sleep Mode is not allowed. 
								In this case all Sleep Mode related parameters are invalid. The setting is communicated to SS during initial network entry 
								(REG-REQ/RSP Mobility Features Supported, TLV=31)"></field>				
				<field name="nbrAdvConf" type="NPF_F_wmaxBscpMobNbrConf_t" brief="Neighbor advertisement options."></field>
				<field name="enableScnEvents" type="NPF_boolean_t" brief="When true, enable generating of the NPF_F_WMAX_BSCP_EVENT_MOB_SS_SCANNING_REQUEST and
				        NPF_F_WMAX_BSCP_EVENT_MOB_SS_SCANNING_COMPLETE events during scanning. 
				        In this case NPF_F_wmaxBscpMobSsScanSet is not used for SS-initiates scanning. 
				        When false, events are triggered  and the function NPF_F_wmaxBscpMobSsScanSet must be used."></field>
				<field name="hoHyseresis" type="NPF_uint8_t" brief="HO hysteresis margin. It is used by the MSS to include a neighbor BS to a list of possible target BSs. DCD TLV=51"></field>
				<field name="timeToTrigger" type="NPF_uint8_t" brief="Time duration for SS decides to select a neighbor BS as a possible target BS. It is the unit of ms. DCD TLV=52"></field>
				<vector name="triggerList" type="NPF_F_wmaxBscpMobSigTrigger_t" brief=" A list of handover triggers. DCD TLV=54">
					<length name="triggerListLen" type="NPF_uint32_t" brief="Number of triggers in triggerList."></length>
				</vector>
				<field name="idleModeTimeoutMin" type="NPF_uint16_t" brief="Minimal value of time interval between MS Idle Mode Location Updates in seconds (default = 4096 seconds). (REG-REQ/RSP, TLV=37)"></field>
				<field name="idleModeTimeoutMax" type="NPF_uint16_t" brief="Maxmial value of time interval between MS Idle Mode Location Updates in seconds (default = 4096 seconds). (REG-REQ/RSP, TLV=37"></field>
				<field name="delayHoConf" type="NPF_F_wmaxBscpMobDelayHoConf_t" brief="Configuration of supported methods of delaying handover to limit packet loss."></field>
				<field name="hoRetransTimer" type="NPF_uint8_t" brief="MS HO Retransmission Timer. After an MS transmits MOB_MSHO-REQ to initiate a handover process, it shall 
							 not transmit another MOB_MSHO-REQ until the expiration of the MS Handover Retransmission Timer. Value set in frames. (REG-REQ/RSP, TLV=30)."></field>
				<field name="resourceRetentionTime" type="NPF_uint16_t" brief="System resource retention time.">
					<descr>
 							This parameter specifies (in 100ms units) how long the SS resources will be kept on the serving BS (default recomended
 							by 802.16-2005 is 2 meaning 200ms time). This value is send to SS in REG-REQ message (TLV 28). 
 							It can be overwriten by new value in MOB_BSHO-* message during HO preparation. 
 							The timer itself is not implemented by BSCP application (MAC SW) - 
 							BSCP FAPI client (the managing application) is responsable for calling 	NPF_F_wimaxBscpSsDelete() 
 							function to remove SS resources.
 						</descr>
				</field>
			</struct>
			<struct type="NPF_F_wmaxBscpPagSigParms_t" brief="Paging Signaling Parameters">
				<descr>
					This structure defines the paging signaling options. 
				</descr>
				<field name="pagingIntervalLength" type="NPF_uint32_t" brief="Max duration in frames of Paging Listening Interval; value must be between 1 and 5 frames (default=2) DCD TLV=45"></field>
				<vector name="pagingGroupIdList" type="NPF_uint16_t" brief="Array of IDs of the Paging Groups this BS belongs to. DCD TLV=35">
					<length name="pagingGroupIdNum" type="NPF_uint32_t" brief="Number of Paging Group IDs."></length>
				</vector>
			</struct>
			
			<struct type="NPF_F_wmaxBscpSleepSigParms_t" brief="Sleep Controll Parameters">
				<descr>
					This structure defines the sleep configuration options. 
				</descr>
				<field name="stopCqichAlloc" type="NPF_boolean_t" brief="Control CQICH allcations after sleep mode activation.">
					<descr>
						When true, activation of the power saving class invalidate all CQICH allocations for a given SS. When false, 
						CQICH allications remain valid when power saving class is activated.
					</descr>
				</field>
				<field name="enableNegativeTrfInd" type="NPF_boolean_t" brief="Control generation of periodic negative indications via MOB_TRF-IND.">
					<descr>
						When true, upon MS request BS will transmit negative traffic indications in every activity window during sleep mode.
						When false, BS never transmit negative traffic indications.
					</descr>
				</field>
				<field name="reqDuration" type="NPF_uint8_t" brief="Sleep request retransmission time.">
					<descr>
						Waiting value for the MOB_SLP-REQ message re-transmission (measured in MAC frames):
						the MS may retransmit the MOB_SLP-REQ message after the reqDuration frames.						
					</descr>
				</field>
			</struct>
			
			<struct type="NPF_F_wmaxBscpSigParms_t" brief="Signaling Stack Parameters">
				<descr>
					This structure contains the MAC management signaling stack options.
				</descr>
				<see>NPF_F_wmaxBscpMacAddArgs_t</see>
				<field name="xcdSigParms" type="NPF_F_wmaxBscpXcdSigParms_t" brief="DCD/UCD signaling options"></field>
				<field name="rngSigParms" type="NPF_F_wmaxBscpRngSigParms_t" brief="Ranging signaling options"></field>
				<field name="sbcSigParms" type="NPF_F_wmaxBscpSbcSigParms_t" brief="SBC signaling options"></field>
				<field name="pkmSigParms" type="NPF_F_wmaxBscpPkmSigParms_t" brief="PKM signaling options"></field>
				<field name="regSigParms" type="NPF_F_wmaxBscpRegSigParms_t" brief="Registration signaling options"></field>
				<field name="tftpSigParms" type="NPF_F_wmaxBscpTftpSigParms_t" brief="TFTP signaling options"></field>
				<field name="dsxSigParms" type="NPF_F_wmaxBscpDsxSigParms_t" brief="DSA/DSC/DSD signaling options"></field>
				<field name="mobSigParms" type="NPF_F_wmaxBscpMobSigParms_t" brief="Mobility-related signaling options"></field>
				<field name="pagSigParms" type="NPF_F_wmaxBscpPagSigParms_t" brief="Paging signaling options"></field>
				<field name="sleepSigParms" type="NPF_F_wmaxBscpSleepSigParms_t" brief="Sleep control options"></field>				
				<field name="dregSigParms" type="NPF_F_wmaxBscpDregSigParms_t" brief="SS deregistration-related signaling options"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMacAddArgs_t" brief="Add MAC Instance Arguments">
				<descr>
					This structure defines all the parameters that can be set when adding a MAC instance.
					It is comprised of values used when creating MAC-CPS instances, default values when creating subscribers, and optional QOS profiles for management channels
					It also contains the majority of the parameters in IEEE 802.16-2004, Table 342 and 343 - as well as additional parameters specified in 802.16-2005.
				</descr>
				<see>NPF_F_wmaxBscpMacAdd</see>
				<field name="phyParms" type="NPF_F_wmaxBscpMacPhyParms_t" brief="Definition of PHY specific parameters"></field>
				<field name="macCpsParms" type="NPF_F_wmaxBscpMacCpsParms_t" brief="Definition of MAC-CPS specific parameters"></field>
				<field name="vendCpsParms" type="NPF_F_wmaxBscpVendorMacCpsParms_t" brief="Specifies vendor-specific MAC-CPS options."></field>
				<field name="ssParms" type="NPF_F_wmaxBscpSsParms_t" brief="Subscriber Parms"></field>
				<field name="sigParms" type="NPF_F_wmaxBscpSigParms_t" brief="Signaling Parameters"></field>
				<field name="dcdChangeCount" type="NPF_uint8_t" brief="Current DCD Change Count."></field>
				<field name="ucdChangeCount" type="NPF_uint8_t" brief="Current UCD Change Count."></field>
			</struct>
			
			<struct type="NPF_F_wmaxBscpZoneHandleList_t" brief="Zone Handle List">
				<vector name="zoneHandles" type="NPF_F_wmaxBscpZoneHandle_t" brief="List of Zone Handles">
					<descr>
						Contains a list of one or more zone handles.
					</descr>
					<length name="zoneHandlesNum" type="NPF_uint32_t" brief="Number of Zone Handles"></length>
				</vector>
			</struct>
			
			<struct type="NPF_F_wmaxBscpMacAddResponseArgs_t" brief="Add MAC Instance Response Arguments">
				<descr>
					Asynchronous response for NPF_F_wmaxBscpMacAdd.
				</descr>
				<see>NPF_F_wmaxBscpMacAdd</see>
				<field name="macHandle" type="NPF_F_wmaxBscpMacHandle_t" brief="A handle to the newly created MAC Instance."></field>
				<field name="zoneHandleDlList" type="NPF_F_wmaxBscpZoneHandleList_t" brief="A list of handles to newly created DL zones."></field>
				<field name="zoneHandleUlList" type="NPF_F_wmaxBscpZoneHandleList_t" brief="A list of handles to newly created UL zones."></field>
			</struct>
			
			<struct type="NPF_F_wmaxBscpMacStartParms_t" brief="Started MAC Instance Parameters">
				<descr>
					This structure defines parameters required to start a single MAC instance.
				</descr>
				<field name="macHandle" type="NPF_F_wmaxBscpMacHandle_t" brief="MAC instance handle."></field>
				<field name="restartCount" type="NPF_uint8_t" brief="Number of BS restarts. Must be incremented by 1 by controlling application each time a new MAC is (re)started "></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMacStartArgs_t" brief="Start MAC Instance Arguments">
				<descr>
					This structure defines parameters required to start a number of MAC instances.
				</descr>
				<vector name="macList" type="NPF_F_wmaxBscpMacStartParms_t" brief="Array of MAC instances to start.">
					<length name="macHandlesNum" type="NPF_uint32_t" brief="Number of MAC instances to start."></length>
				</vector>
			</struct>
			<struct type="NPF_F_wmaxBscpMacStopArgs_t" brief="Stop MAC Instance Arguments">
				<descr>
					This structure defines parameters required to stop a MAC instance.
				</descr>
				<vector name="macHandles" type="NPF_F_wmaxBscpMacHandle_t" brief="Array of MAC instances to stop. Each MAC instance is described by the MAC instance handle.">
					<length name="macHandlesNum" type="NPF_uint32_t" brief="Number of MAC instances to stop."></length>
				</vector>
			</struct>
			<struct type="NPF_F_wmaxBscpMacDeleteArgs_t" brief="Delete MAC Instance Arguments">
				<descr>
					This structure defines parameters required to delete a MAC instance.
				</descr>
				<field name="macHandle" type="NPF_F_wmaxBscpMacHandle_t" brief="MAC Instance Handle."></field>
			</struct>
			<define brief="DCD/UCD Change Mask">
				<descr>
				These mask bits are used to define which parameters in NPF_F_wmaxBscpMacDcdUcdChangeArgs_t are valid.
			</descr>
				<field name="NPF_F_WMAX_BSCP_DCD_UCD_CHG_MASK_BS_EIRP" brief="BS EIRP parameter is valid">
					<value>(0x01ull &lt;&lt; 0)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_DCD_UCD_CHG_MASK_RS_RSS_IR_MAX" brief="RSS IR MAX parameter is valid">
					<value>(0x01ull &lt;&lt; 1)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_DCD_UCD_CHG_MASK_BS_CNIR_AVER" brief="CNIR average parameter is valid">
					<value>(0x01ull &lt;&lt; 2)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_DCD_UCD_CHG_MASK_BS_RSSI_AVER" brief="RSSI average parameter is valid">
					<value>(0x01ull &lt;&lt; 3)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_DCD_UCD_CHG_MASK_PAGING_GROUP" brief="Paging Group ID lists parameter is valid">
					<value>(0x01ull &lt;&lt; 4)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_DCD_UCD_CHG_MASK_BS_DL_BP" brief="Set of DL BP elements  is valid">
					<value>(0x01ull &lt;&lt; 5)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_DCD_UCD_CHG_MASK_BS_UL_BP" brief="Set of UL BP elements  is valid">
					<value>(0x01ull &lt;&lt; 6)</value>
				</field>
			</define>
			<struct type="NPF_F_wmaxBscpMacDcdUcdChangeArgs_t" brief="DCD/UCD Change Arguments">
				<descr>
					This structure parameters advertised by DCD/UCD messages that can be modified in a MAC instance
				</descr>
				<see>NPF_F_wmaxBscpMacDcdUcdChange</see>
				<field name="macHandle" type="NPF_F_wmaxBscpMacHandle_t" brief="MAC Instance Handle"></field>
				<field name="dcdChangeCount" type="NPF_uint8_t" brief="Current DCD Change Count."></field>
				<field name="ucdChangeCount" type="NPF_uint8_t" brief="Current UCD Change Count."></field>
				<field name="changeMask" type="NPF_uint32_t" brief="Selects which options are valid; See: DCD/UCD Change Mask"></field>
				<field name="bsEirp" type="NPF_int16_t" brief="BS EIRP. Signed in units of 1 dBM. DCD TLV=2"></field>
				<field name="rssIrMax" type="NPF_int16_t" brief="Initial Ranging maximum equivalent isotropic received power at BS. Signed in units of 1 dBm. DCD TLV=9"></field>
				<field name="cinrAverParm" type="NPF_uint8_t" brief="Default averaging parameter for physical CINR measurements, in multiples of 1/16. DCD TLV=21"></field>
				<field name="rssiAverParm" type="NPF_uint8_t" brief="Default averaging parameter for RSSI measurements, in multiples of 1/16. DCD TLV=21"></field>
				<vector name="pagingGroupIdList" type="NPF_uint16_t" brief="Array of IDs of all Paging Groups this BS belongs to. This parameter replace Paging Group IDs provided
						in NPF_F_wmaxBscpMacAdd() function. DCD TLV=35">
					<length name="pagingGroupIdNum" type="NPF_uint32_t" brief="Number of Paging Group IDs."></length>
				</vector>
				<vector type="NPF_F_wmaxBscpBpSetElementWithOper_t" name="dlBp">
					<descr>
						A list of modified DL Burst Profiles that will be advertised in the DCD.
					</descr>
					<length type="NPF_uint32_t" name="dlBpNum" brief="Number of elements in the 'dlBp' table"></length>
				</vector>
				<vector type="NPF_F_wmaxBscpBpSetElementWithOper_t" name="ulBp">
					<descr>
						A list of modified UL Burst Profiles that will be advertised in the DCD.
   				    </descr>
					<length type="NPF_uint32_t" name="ulBpNum" brief="Number of elements in the 'ulBp' table"></length>
				</vector>
				<field name="xiucSubmapMapping" type="NPF_F_wmaxBscpXiucSubmapMapping_t" brief="Mapping between burst profiles and sub-maps. Valid only if sub-maps are suppported and burst profiles are changed."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMacDcdUcdChangeResponseArgs_t" brief="DCD/UCD Change Response Arguments">
				<descr>
					Asynchronous response for NPF_F_wmaxBscpMacDcdUcdChange. When the operation fails, it specifies which input parameter cause the problem.
					When operation is completed succesfully, no errors should be specified in this structure.
				</descr>
				<see>NPF_F_wmaxBscpMacDcdUcdChange</see>
				<field name="paramChangeErr" type="NPF_F_wmaxBscpErrorType_t" brief="Result of changing DCD/UCD parameters other then DL or UL Burst Profiles."></field>
				<vector type="NPF_F_wmaxBscpErrorType_t" name="dlBpChangeErrCodeArray">
					<descr>
						Array of results of DL burst profile changes. Every row in this table is related to a respective row in DL Burst Profile 
						specified in function call. The table is empty when changes of DL Burst Profiles were not specified.
					</descr>
					<length type="NPF_uint32_t" name="dlBpErrNum" brief="Number of elements in the dlBpChangeErrCodeArray table"></length>
				</vector>
				<vector type="NPF_F_wmaxBscpErrorType_t" name="ulBpChangeErrCodeArray">
					<descr>
						Array of results of UL burst profile changes. Every row in this table is related to a respective row in UL Burst Profile 
						specified in function call. The table is empty when changes of UL Burst Profiles were not specified.
					</descr>
					<length type="NPF_uint32_t" name="ulBpErrNum" brief="Number of elements in the ulBpChangeErrCodeArray table"></length>
				</vector>
			</struct>
			<define brief="BSCP Managed MAC Statistics Mask">
				<descr>
					These bits can be used to enable and reset MAC level subscriber statistics.
				</descr>
				<see>NPF_F_wmaxBscpMacStatsGet</see>
				<see>NPF_F_wmaxBscpMacStatsConfig</see>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_ALL" brief="Mask to configure or reset all BSCP managed MAC statistics.">
					<value>(-1ull)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_SS_CURRENT_ADDED" brief="Current number of subscribers that performed initial ranging.  This bit is ignored in NPF_F_wmaxBscpMacStatsGetArgs_t.resetMask since parameter is always enabled and read-only.">
					<value>(0x01ull &lt;&lt; 0)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_SS_CURRENT_LINK_ACTIVE" brief="Current number of subscribers that completed capabilities negotiation.  This bit is ignored in NPF_F_wmaxBscpMacStatsGetArgs_t.resetMask since parameter is always enabled and read-only.">
					<value>(0x01ull &lt;&lt; 1)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_SS_CURRENT_OPERATIONAL" brief="Current number of subscribers that completed authentication and remaining network entry procedures.  This bit is ignored in NPF_F_wmaxBscpMacStatsGetArgs_t.resetMask since parameter is always enabled and read-only.">
					<value>(0x01ull &lt;&lt; 2)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_SS_CURRENT_SLEEP" brief="Current number of subscribers that are in sleep mode.  This bit is ignored in NPF_F_wmaxBscpMacStatsGetArgs_t.resetMask since parameter is always enabled and read-only.">
					<value>(0x01ull &lt;&lt; 3)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_SS_TOTAL_ADDED" brief="Accumulated total number of subscribers that performed initial ranging.">
					<value>(0x01ull &lt;&lt; 4)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_SS_TOTAL_LINK_ACTIVE" brief="Accumulated total number of subscribers that completed capabilities negotiation.">
					<value>(0x01ull &lt;&lt; 5)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_SS_TOTAL_OPERATIONAL" brief="Accumulated total number of subscribers that completed authentication and remaining network entry procedures.">
					<value>(0x01ull &lt;&lt; 6)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_SS_TOTAL_SLEEP" brief="Accumulated total number of subscribers that are in sleep mode.">
					<value>(0x01ull &lt;&lt; 7)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_SS_TOTAL_IDLE" brief="Accumulated total number of subscribers that entered idle mode.">
					<value>(0x01ull &lt;&lt; 8)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_SS_TOTAL_LOC_UPDATE" brief="Accumulated total number of succesful secure location updates.">
					<value>(0x01ull &lt;&lt; 9)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_SS_TOTAL_DELETED" brief="Accumulated total number of subscribers rejected because maximum number of subscribers allocated.">
					<value>(0x01ull &lt;&lt; 10)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_SS_TOTAL_REJECTED" brief="Accumulated total number of subscribers rejected because maximum number of subscribers allocated.">
					<value>(0x01ull &lt;&lt; 11)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_SS_HANDOVER_ENTER" brief="Number of handovers performed within the MAC Instance (SS entering network).">
					<value>(0x01ull &lt;&lt; 12)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_SS_HANDOVER_EXIT" brief="Number of handovers performed within the MAC Instance (SS leaving network).">
					<value>(0x01ull &lt;&lt; 13)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_SF_SETUP_REQ_BS_INIT" brief="Number of service flow setup requests initiated by BS.">
					<value>(0x01ull &lt;&lt; 14)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_SF_SETUP_REQ_BS_INIT_FAILED" brief="Number of service flow setup requests initiated by BS that failed.">
					<value>(0x01ull &lt;&lt; 15)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_SF_ACTIVE" brief="Number of service flows currently active.">
					<value>(0x01ull &lt;&lt; 16)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_SF_DELETE_REQ" brief="Number of service flows delete requests.">
					<value>(0x01ull &lt;&lt; 17)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_SF_CHANGE_BS_INIT" brief="Number of service flows change requests initiated by BS.">
					<value>(0x01ull &lt;&lt; 18)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_SF_CHANGE_BS_INIT_FAILED" brief="Number of service flows change requests initiated by BS that failed.">
					<value>(0x01ull &lt;&lt; 19)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_HO_AUTH_FAILED" 
					brief="Number of times incorrect message authentication code (CMAC) was detected during handling RNG-REQ re-entry message.">
					<value>(0x01ull &lt;&lt; 20)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_HO_NON_COORDINATED" 
					brief="Number of re-entry HO attempts when subscriber state is not avaliable at BS.">
					<value>(0x01ull &lt;&lt; 21)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_CDMA_INITIAL_RANGING" 
					brief="Number of recieved CDMA initial ranging codes.">
					<value>(0x01ull &lt;&lt; 22)</value>
				</field>				
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_CDMA_HO_RANGING" 
					brief="Number of recieved CDMA HO ranging codes.">
					<value>(0x01ull &lt;&lt; 23)</value>
				</field>				
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_CDMA_PERIODIC_RANGING" 
					brief="Number of recieved CDMA periodic ranging codes.">
					<value>(0x01ull &lt;&lt; 24)</value>
				</field>				
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_REQ_INITIAL_RANGING" 
					brief="Number of recieved RNG-REQ for initial NW entry purpose.">
					<value>(0x01ull &lt;&lt; 25)</value>
				</field>				
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_REQ_HO_RANGING" 
					brief="Number of recieved RNG-REQ for HO purpose.">
					<value>(0x01ull &lt;&lt; 26)</value>
				</field>				
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_REQ_LOC_UPDATE_RANGING" 
					brief="Number of recieved RNG-REQ for Location Update purpose.">
					<value>(0x01ull &lt;&lt; 27)</value>
				</field>	
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_REQ_IDLE_REENTRY_RANGING" 
					brief="Number of recieved RNG-REQ for NW re-entry after idle purpose.">
					<value>(0x01ull &lt;&lt; 28)</value>					
				</field>				
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_REQ_PERIODIC_RANGING" 
					brief="Number of recieved RNG-REQ for periodic ranging purpose.">
					<value>(0x01ull &lt;&lt; 29)</value>				
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_T9_EXPIRED" 
					brief="Number of times T9 timer expired.">
					<value>(0x01ull &lt;&lt; 30)</value>									
				</field>								
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_T17_EXPIRED" 
					brief="Number of times T17 timer expired.">
					<value>(0x01ull &lt;&lt; 31)</value>									
				</field>								
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_HO_RSP_DELAY_TIMEOUT" 
					brief="Number of times delayed MOB_MSHO-RSP message was send due to timeout before DL queues were empty.">
					<value>(0x01ull &lt;&lt; 32)</value>
				</field>							
				<field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_RNG_RETR_LIMIT_EXCEEDED" 
					brief="Number of times ranging retry limit exceeded.">
					<value>(0x01ull &lt;&lt; 33)</value>
				</field>
                                <field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_UL_RX_MOB_SCN_REQ" brief="Number of uplink MOB-SCN-REQ messages received.">
					<value>(0x01ull &lt;&lt; 34)</value>
				</field>
                                <field name="NPF_F_WMAX_BSCP_STAT_M_BSCP_DL_TX_MOB_BSHO_RSP" brief="Number of downlink MOB-BSHO-RSP messages transmitted.">
					<value>(0x01ull &lt;&lt; 35)</value>
				</field>							
			
			</define>
			
			<struct type="NPF_F_wmaxBscpMacBscpStats_t" brief="MAC-Level Subscriber Statistics">
				<descr>
					This structure contains MAC statistics gathered by the BSCP layer.
				</descr>
				<see>NPF_F_wmaxBscpMacStats_t</see>
				<field name="mBscpSsCurrentAdded" type="NPF_uint64_t" brief="Current number of subscribers that performed initial ranging.  The sum of variables ssCurrentLinkActive, ssCurrentOperational, ssCurrentSleep and ssCurrentIdle should equal ssCurrentAdded."></field>
				<field name="mBscpSsCurrentLinkActive" type="NPF_uint64_t" brief="Current number of subscribers that completed capabilities negotiation."></field>
				<field name="mBscpSsCurrentOperational" type="NPF_uint64_t" brief="Current number of subscribers that completed authentication and remaining network entry procedures."></field>
				<field name="mBscpSsCurrentSleep" type="NPF_uint64_t" brief="Current number of subscribers that are in sleep mode."></field>
				<field name="mBscpSsTotalAdded" type="NPF_uint64_t" brief="Accumulated total number of subscribers that performed initial ranging"></field>
				<field name="mBscpSsTotalLinkActive" type="NPF_uint64_t" brief="Accumulated total number of subscribers that completed capabilities negotiation"></field>
				<field name="mBscpSsTotalOperational" type="NPF_uint64_t" brief="Accumulated total number of subscribers that completed authentication and remaining network entry procedures"></field>
				<field name="mBscpSsTotalSleep" type="NPF_uint64_t" brief="Accumulated total number of subscribers that entered sleep mode"></field>
				<field name="mBscpSsTotalIdle" type="NPF_uint64_t" brief="Accumulated total number of subscribers that entered idle mode"></field>
				<field name="mBscpSsTotalLocUpdate" type="NPF_uint64_t" brief="Accumulated total number of succesful secure location updates"></field>
				<field name="mBscpSsTotalDeleted" type="NPF_uint64_t" brief="Accumulated total number of subscribers deleted (for various reasons)"></field>
				<field name="mBscpSsTotalRejected" type="NPF_uint64_t" brief="Accumulated total number of subscribers rejected because maximum number of subscribers allocated."></field>
				<field name="mBscpSsHandoverEnter" type="NPF_uint64_t" brief="Number of handovers performed within the MAC Instance (SS entering network)."></field>
				<field name="mBscpSsHandoverExit" type="NPF_uint64_t" brief="Number of handovers performed within the MAC Instance (SS leaving network)."></field>
				<field name="mBscpSfSetupReqBsInit" type="NPF_uint64_t" brief="Number of service flow setup requests initiated by BS."></field>
				<field name="mBscpSfSetupReqBsInitFailed" type="NPF_uint64_t" brief="Number of service flow setup requests initiated by BS that failed."></field>
				<field name="mBscpSfActive" type="NPF_uint64_t" brief="Number of service flows currently active."></field>
				<field name="mBscpSfDeleteReq" type="NPF_uint64_t" brief="Number of service flows delete requests."></field>
				<field name="mBscpSfChangeReqBsInit" type="NPF_uint64_t" brief="Number of service flows change requests initiated by BS."></field>
				<field name="mBscpSfChangeReqBsInitFailed" type="NPF_uint64_t" brief="Number of service flows change requests initiated by BS that failed."></field>
				<field name="mBscpHoAuthFailed" type="NPF_uint64_t" 
					brief="Number of times incorrect message authentication code (CMAC) was detected during handling RNG-REQ re-entry message."></field>
				<field name="mBscpHoNonCoordinated" type="NPF_uint64_t" 
					brief="Number of re-entry HO attempts when subscriber state is not avaliable at BS."></field>
				<field name="mBscpCdmaInitialRanging" type="NPF_uint64_t" brief="Number of recieved CDMA initial ranging codes."></field>				
				<field name="mBscpCdmaHoRanging" type="NPF_uint64_t" brief="Number of recieved CDMA HO ranging codes."></field>								
				<field name="mBscpCdmaPeriodicRanging" type="NPF_uint64_t" brief="Number of recieved CDMA periodic ranging codes."></field>				
				<field name="mBscpReqInitialRanging" type="NPF_uint64_t" brief="Number of recieved RNG-REQ for initial NW entry purpose."></field>								
				<field name="mBscpReqHoRanging" type="NPF_uint64_t" brief="Number of recieved RNG-REQ for HO  purpose."></field>								
				<field name="mBscpReqLocUpdateRanging" type="NPF_uint64_t" brief="Number of recieved RNG-REQ for Location Update purpose."></field>								
				<field name="mBscpReqIdleReEntryRanging" type="NPF_uint64_t" brief="Number of recieved RNG-REQ for NW re-entry after idle purpose."></field>											
				<field name="mBscpReqPeriodicRanging" type="NPF_uint64_t" brief="Number of recieved RNG-REQ for periodic ranging purpose."></field>												
				<field name="mBscpT9Expired" type="NPF_uint64_t" brief="Number of times T9 timer expired."></field>												
				<field name="mBscpT17Expired" type="NPF_uint64_t" brief="Number of times T17 timer expired."></field>												
				<field name="mBscpHoRspDelayTimeout" type="NPF_uint64_t" 
					brief="Number of times delayed MOB_MSHO-RSP message was send due to timeout before DL queues were empty."></field>												
				<field name="mBscpRngRetryLimitExceeded" type="NPF_uint64_t" 
					brief="Number of times ranging retry limit exceeded."></field>
                                <field name="mBscpUlRxMobScnReq" type="NPF_uint64_t" brief="Number of uplink MOB-SCN-REQ messages received."></field>
                                <field name="mBscpDlTxMobBshoRsp" type="NPF_uint64_t" brief="Number of downlink MOB-BSHO-RSP messages transmitted"></field>												
			</struct>
			<define brief="MAC-CPS Managed MAC Statistics Mask">
				<descr>
					These bits can be used to enable and reset MAC statistics gathered by the MAC-CPS layer.
				</descr>
				<see>NPF_F_wmaxBscpMacStatsGet</see>
				<see>NPF_F_wmaxBscpMacStatsConfig</see>
				<field name="NPF_F_WMAX_BSCP_STAT_M_CPS_ALL" brief="Mask to configure or reset all MAC-CPS managed MAC statistics.">
					<value>(-1ull)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_CPS_UL_PDU_RX_DROPPED_HCS_ERR" brief="Number of received and then dropped MAC PDUs due to invalid HCS.">
					<value>(0x01ull &lt;&lt; 0)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_CPS_UL_PDU_RX_DROPPED_BAD_CID" brief="Number of received and then dropped MAC PDUs due to invalid CID.">
					<value>(0x01ull &lt;&lt; 1)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_CPS_UL_PDU_RX_ACCEPTED" brief="Number of received and then accepted MAC PDUs.">
					<value>(0x01ull &lt;&lt; 2)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_CPS_DL_PDU_TX_TRANSMITTED" brief="Number of transmitted MAC PDUs.">
					<value>(0x01ull &lt;&lt; 3)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_CPS_UL_SDU_CTRL_ACCEPTED" brief="Number of received and then accepted MAC SDUs containing MAC Control Messages.">
					<value>(0x01ull &lt;&lt; 4)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_CPS_DL_SDU_CTRL_TRANSMITTED" brief="Number of transmitted MAC SDUs containing MAC Control Messages.">
					<value>(0x01ull &lt;&lt; 5)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_CPS_DL_SLOTS_TOTAL" brief="Total cumulative number of DL allocations slots (symbols * subchannels) which were available.">
					<value>(0x01ull &lt;&lt; 6)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_CPS_DL_SLOTS_USED" brief="Cumulative number of DL allocations slots (symbols * subchannels) which were used by the DL scheduler for data transmission.">
					<value>(0x01ull &lt;&lt; 7)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_CPS_UL_SLOTS_TOTAL" brief="Total cumulative number of UL allocations slots (symbols * subchannels) which were available.">
					<value>(0x01ull &lt;&lt; 8)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_CPS_UL_SLOTS_USED" brief="Cumulative number of DL allocations slots (symbols * subchannels) which were used by the UL scheduler for data transmission.">
					<value>(0x01ull &lt;&lt; 9)</value>
				</field>
			</define>
			<struct type="NPF_F_wmaxBscpMacCpsStats_t" brief="MAC-CPS MAC Statistics">
				<descr>
					This structure contains MAC statistics gathered by the MAC-CPS layer.
				</descr>
				<see>NPF_F_wmaxBscpMacStats_t</see>
				<field name="mCpsUlPduRxDroppedHcsErr" type="NPF_uint64_t" brief="Number of received and then dropped MAC PDUs due to invalid HCS"></field>
				<field name="mCpsUlPduRxDroppedBadCid" type="NPF_uint64_t" brief="Number of received and then dropped MAC PDUs due to invalid CID"></field>
				<field name="mCpsUlPduAccepted" type="NPF_uint64_t" brief="Number of received and then accepted MAC PDUs"></field>
				<field name="mCpsDlPduTransmitted" type="NPF_uint64_t" brief="Number of transmitted MAC PDUs"></field>
				<field name="mCpsUlSduCtrlAccepted" type="NPF_uint64_t" brief="Number of received and then accepted MAC SDUs containing MAC Control Messages"></field>
				<field name="mCpsDlSduCtrlTransmitted" type="NPF_uint64_t" brief="Number of transmitted MAC SDUs containing MAC Control Messages"></field>
				<field name="mCpsDlSlotsTotal" type="NPF_uint64_t" brief="Total cumulative number of DL allocations slots (symbols * subchannels) which were available."></field>
				<field name="mCpsDlSlotsUsed" type="NPF_uint64_t" brief="Cumulative number of DL allocations slots (symbols * subchannels) which were used by the DL scheduler for data transmission."></field>
				<field name="mCpsUlSlotsTotal" type="NPF_uint64_t" brief="Total cumulative number of UL allocations slots (symbols * subchannels) which were available."></field>
				<field name="mCpsUlSlotsUsed" type="NPF_uint64_t" brief="Cumulative number of DL allocations slots (symbols * subchannels) which were used by the UL scheduler for data transmission."></field>
			</struct>
			<define brief="MAC-CS Managed MAC Statistics Mask">
				<descr>
					These bits can be used to enable and reset MAC-CS managed MAC statistics.
				</descr>
				<see>NPF_F_wmaxBscpMacCsStats_t</see>
				<field name="NPF_F_WMAX_BSCP_STAT_M_CS_ALL" brief="Number of received MAC PDUs dropped due to lack of resources.">
					<value>(-1ull)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_CS_UL_DHCP_MSG" brief="Number of DHCP messages recognized in UL at DHCP-PROXY.">
					<value>(0x01ull &lt;&lt; 0)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_M_CS_DL_DHCP_MSG" brief="Number of DHCP messages recognized in DL at DHCP-PROXY.">
					<value>(0x01ull &lt;&lt; 1)</value>
				</field>
			</define>
			<struct type="NPF_F_wmaxBscpMacCsStats_t" brief="MAC-CPS MAC Statistics">
				<descr>
					This structure contains MAC statistics gathered by the MAC-CS layer.
				</descr>
				<see>NPF_F_wmaxBscpMacStats_t</see>
				<field name="mCsUlDhcpMsg" type="NPF_uint64_t" brief="Number of DHCP messages recognized in UL at DHCP-PROXY."></field>
				<field name="mCsDlDhcpMsg" type="NPF_uint64_t" brief="Number of DHCP messages recognized in DL at DHCP-PROXY."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMacStats_t" brief="MAC Statistics">
				<descr>
					This structure contains all statistics gathered by the MAC instance.
				</descr>
				<see>NPF_F_wmaxBscpMacStatsGetResponseArgs_t</see>
				<field name="mBscpStats" type="NPF_F_wmaxBscpMacBscpStats_t" brief="MAC statistics gathered by the BSCP component."></field>
				<field name="mCpsStats" type="NPF_F_wmaxBscpMacCpsStats_t" brief="MAC statistics gathered by the MAC-CPS component."></field>
				<field name="mCsStats" type="NPF_F_wmaxBscpMacCsStats_t" brief="MAC statistics gathered by the MAC-CS component."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMacStatsConfigArgs_t" brief="Configure MAC Statistics Arguments">
				<descr>
					This structure defines parameters to retrieve and reset MAC instance statistics.
				</descr>
				<field name="macHandle" type="NPF_F_wmaxBscpMacHandle_t" brief="MAC Instance Handle"></field>
				<field name="mBscpConfigMask" type="NPF_F_statsConfig_t" brief="Mask specifies which statistics will be collected.  Also causes counters to be reset to zero.  See: BSCP Managed MAC Statistics Mask."></field>
				<field name="mCpsConfigMask" type="NPF_F_statsConfig_t" brief="Mask specifies which statistics will be collected.  Also causes counters to be reset to zero.  See: MAC-CPS Managed MAC Statistics Mask."></field>
				<field name="mCsConfigMask" type="NPF_F_statsConfig_t" brief="Mask specifies which statistics will be collected.  Also causes counters to be reset to zero.  See: MAC-CS Managed MAC Statistics Mask."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMacStatsGetArgs_t" brief="Get MAC Statistics Arguments">
				<descr>
					This structure defines parameters required to get the MAC statistics.
				</descr>
				<field name="macHandle" type="NPF_F_wmaxBscpMacHandle_t" brief="MAC Instance Handle."></field>
				<field name="mBscpResetMask" type="NPF_uint64_t" brief="Mask specifies which statistics will be reset.  See: BSCP Managed MAC Statistics Mask."></field>
				<field name="mCpsResetMask" type="NPF_uint64_t" brief="Mask specifies which statistics will be reset.  See: MAC-CPS Managed MAC Statistics Mask."></field>
				<field name="mCsResetMask" type="NPF_uint64_t" brief="Mask specifies which statistics will be reset.  See: MAC-CS Managed MAC Statistics Mask."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMacStatsGetResponseArgs_t" brief="MAC Statistics Get Response Arguments">
				<descr>
					Asynchronous response for NPF_F_wmaxBscpMacStatsGet.
				</descr>
				<see>NPF_F_wmaxBscpMacStatsGet</see>
				<field name="mStats" type="NPF_F_wmaxBscpMacStats_t" brief="MAC Statistics."></field>
			</struct>
		</section>
		<section name="MAC Instance Functions">
			<func name="NPF_F_wmaxBscpMacAdd" type="NPF_error_t" brief="Add MAC Instance" xdrid="RPC_WMAX_BSCP_MAC_ADD">
				<descr>
					This function adds a MAC instance into the BSCP
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpMacAddArgs_t *" name="macAddArgs">
					<descr>
						MAC Instance Add Arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
					</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_ADD.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpMacStart" type="NPF_error_t" brief="Start MAC" xdrid="RPC_WMAX_BSCP_MAC_START">
				<descr>
					This function starts one or more MAC instances.
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpMacStartArgs_t *" name="macStartArgs">
					<descr>
						MAC Instance Start Arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
					</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_START.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpMacStop" type="NPF_error_t" brief="Stop MAC" xdrid="RPC_WMAX_BSCP_MAC_STOP">
				<descr>
					This function stops mac transmission
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpMacStopArgs_t *" name="macStopArgs">
					<descr>
						MAC Instance Stop Arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
					</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_STOP.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpMacDcdUcdChange" type="NPF_error_t" brief="Change Content of DCD/UCD messages" xdrid="RPC_WMAX_BSCP_DCD_UCD_CHG">
				<descr>
					This function changes parameters of BS advertised via DCD/UCD messages. In particular, a set of used Burst Profiles can be 
					modified using this function.
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
					Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
					A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
					Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
					Identifies the forwarding element where the action will be executed. This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpMacDcdUcdChangeArgs_t" name="dcdUcdChangeArgs" xdr="yes">
					<descr>Parameters that should be changed in DCD/UCD messages.</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
						The callback handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
						The operation cannot be completed successfully because
						of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_BPS_CHG.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_OBJ_NONEXISTANT" brief="A Burst Profile Set does not exist."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_OBJ_INVALID_STATE" brief="A Burst Profile Set cannot be modified because one of the entries to be modified is referenced in at least one burst profile subset."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpMacDelete" type="NPF_error_t" brief="Delete MAC Instance" xdrid="RPC_WMAX_BSCP_MAC_DEL">
				<descr>
					This function adds a MAC instance
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpMacDeleteArgs_t *" name="macDeleteArgs">
					<descr>
						MAC Instance Delete Arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
					</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_DEL.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpMacStatsConfig" type="NPF_error_t" brief="Configure MAC Statistics" xdrid="RPC_WMAX_BSCP_MAC_STATS_CFG">
				<descr>
					This function gets statistics information for a specified service flow.
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpMacStatsConfigArgs_t *" name="statsConfigArgs">
					<descr>
						MAC Statistics Config Arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_SVC_FLOW_HANDLE">
						<descr>
							The service flow handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_STATS_CFG.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpMacStatsGet" type="NPF_error_t" brief="Get MAC Statistics" xdrid="RPC_WMAX_BSCP_MAC_STATS_GET">
				<descr>
					This function requests (and optionally resets) mac statistics
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpMacStatsGetArgs_t *" name="statsGetArgs">
					<descr>
						Get MAC Statistics Arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
					</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_STATS_GET.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
		</section>
	</section>
	<section name="Correction and Action Profiles">
		<descr>
			This section defines the interface for managing CAPs associated with MAC instances.
			CAPs identify which burst profiles, repetition counts and reciever sensitivity are to be used when communicating with a particular subscriber.
			Default CAPs can be defined using NPF_F_wmaxBscpMacAdd and more specific CAPs can be associated with a particular subscriber using NPF_F_wmaxBscpSsCapChange()
		</descr>
		<section name="CAP Types">
			<struct type="NPF_F_wmaxBscpMacCapAddArgs_t" brief="Add CAP Arguments">
				<descr>
					This structure defines all the parameters that can be set when adding a CAP.
				</descr>
				<field name="direction" type="NPF_F_wmaxBscpServiceDirection_t" brief="Direction: either Uplink or Downlink"></field>
				<vector name="capLayersArray" type="NPF_F_wmaxBscpCapLayer_t">
					<descr>
						Set of CAP layers
					</descr>
					<length type="NPF_uint32_t" name="capLayersNum" brief="Number of elements in the 'capLayerArray' table"></length>
				</vector>
			</struct>
			<struct type="NPF_F_wmaxBscpMacCapChangeArgs_t" brief="Change CAP Arguments">
				<descr>
					This structure defines all the parameters that can be set when changing a CAP.
				</descr>
				<field name="capHandle" type="NPF_F_wmaxBscpMacCapHandle_t" brief="CAP Handle"></field>
				<vector type="NPF_F_wmaxBscpCapLayerWithOper_t" name="capLayersArray">
					<descr>
						Set of CAP layers.
					</descr>
					<length type="NPF_uint32_t" name="capLayersNum" brief="Number of elements in the 'capLayerArray' table"></length>
				</vector>
			</struct>
			<struct type="NPF_F_wmaxBscpMacCapDeleteArgs_t" brief="CAP Delete arguments">
				<descr>
					This data structure defines parameters of a CAP Delete FAPI call.
				</descr>
				<field name="capHandle" type="NPF_F_wmaxBscpMacCapHandle_t" brief="Identifier of the CAP to be deleted."></field>
			</struct>
		</section>
		<section name="CAP Functions">
			<func name="NPF_F_wmaxBscpMacCapAdd" type="NPF_error_t" brief="Add CAP" xdrid="RPC_WMAX_BSCP_CAP_ADD">
				<descr>
					This function adds a CAP into a MAC Instance
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
					Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
					A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
					Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
					Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" class="vector" type="NPF_F_wmaxBscpMacCapAddArgs_t" name="capAddArray" xdr="yes">
					<descr>Array of structures containing argsNum entries. Each entry contains parameters for one request.</descr>
					<length type="NPF_uint32_t" name="argsNum" brief="Number of elements in the capAddArray table."></length>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
						The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
						The callback handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
						The operation cannot be completed successfully because
						of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_CAP_ADD.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpMacCapChange" type="NPF_error_t" brief="Change CAP" xdrid="RPC_WMAX_BSCP_CAP_CHG">
				<descr>
					This function changes an existing CAP.
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
					Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
					A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
					Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
					Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" class="vector" type="NPF_F_wmaxBscpMacCapChangeArgs_t" name="capChangeArray" xdr="yes">
					<descr>Array of structures containing argsNum entries. Each entry contains parameters for one request.</descr>
					<length type="NPF_uint32_t" name="argsNum" brief="Number of elements in the capChangeArray table."></length>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
					If errorReporting is set to ALWAYS, a callback is invoked to
					indicate that the operation has been completed. The callback
					is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_CAP_CHG.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_OBJ_NONEXISTANT" brief="A CAP does not exist."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_OBJ_INVALID_STATE" brief="A CAP cannot be modified because one of the entries to be modified is used in communication with at least one SS."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpMacCapDelete" type="NPF_error_t" brief="CAP Delete" xdrid="RPC_WMAX_BSCP_CAP_DEL">
				<descr>
					This function allows for deletion of a CAP.
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
					Identifies the callback function which should be called.
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
					A unique application invocation context that will be
					supplied to the asynchronous completion callback routine.
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
					Defines whether a callback will be called after
					completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
					Identifies the forwarding element where the action will be executed.
					</descr>
				</param>
				<param io="in" class="vector" type="NPF_F_wmaxBscpMacCapDeleteArgs_t" name="argsArray" xdr="yes">
					<descr>Array of structures containing argsNum entries. Each entry contains parameters for one request.</descr>
					<length type="NPF_uint32_t" name="argsNum" brief="Number of elements in the argsArray table."></length>
				</param>
				<return>
					<descr>
						Error code indicating if function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_CAP_DEL.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_OBJ_INVALID_STATE" brief="The CAP is still referenced by a SS."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_OBJ_NONEXISTANT" brief="CAP does not exists."></retval>
				</callback>
			</func>
		</section>
	</section>
	<section name="Security Associations">
		<descr>
			This section defines the interface for managing static and dynamic security associations.
			Static SAs may be created anytime before a subscriber has entered the network and then bound to the subscriber during the authorization phase.
			Dynamic SAs may be created before or after a subscriber has entered the network and then bound to the subscriber during service flow creation.
		</descr>
		<section name="Security Association Data Types">
			<enum type="NPF_F_wmaxBscpPkmSaType_t" brief="Security Association Type">
				<descr>
              		This enum specifies the type of Security Association.			
      			</descr>
				<field name="NPF_F_WMAX_BSCP_SA_PRIMARY" brief="Primary SA."></field>
				<field name="NPF_F_WMAX_BSCP_SA_STATIC" brief="Static SA."></field>
				<field name="NPF_F_WMAX_BSCP_SA_DYNAMIC" brief="Dynamic SA."></field>
			</enum>
			<struct type="NPF_F_wmaxBscpMacDynamicSaAddArgs_t" brief="Add Dynamic Security Association Arguments">
				<descr>
					This structure defines parameters that can be set when adding a dynamic security association.
				</descr>
				<see>NPF_F_wmaxBscpMacSaAddArgs_t</see>
				<vector name="ssHandles" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscribers that are allowed to access this dynamic security association.">
					<length name="ssHandlesNum" type="NPF_uint32_t" brief="Number of subscribers."></length>
				</vector>
			</struct>
			<struct type="NPF_F_wmaxBscpMacSaAddArgs_t" brief="Add Security Association Arguments">
				<descr>
					This structure defines all the parameters that can be set when adding a security association.
				</descr>
				<field name="macHandle" type="NPF_F_wmaxBscpMacHandle_t" brief="MAC Instance Handle"></field>
				<field name="cryptoSuite" type="NPF_F_wmaxBscpPkmCryptoSuite_t" brief="Crypto suite to be used with this security association"></field>
				<selectunion type="NPF_F_wmaxBscpMacSaAddTypeUnion_t" name="u">
					<selectfield name="saType" type="NPF_F_wmaxBscpPkmSaType_t" brief="Security Association Type."></selectfield>
					<field name="dynamicSa" type="NPF_F_wmaxBscpMacDynamicSaAddArgs_t" brief="Add Dynamic Security Association Arguments">
						<selector>NPF_F_WMAX_BSCP_SA_DYNAMIC</selector>
					</field>
					<field name="unused" type="NPF_uint32_t" brief="Unused.">
						<selector>NPF_F_WMAX_BSCP_SA_STATIC</selector>
						<selector>NPF_F_WMAX_BSCP_SA_PRIMARY</selector>
					</field>
				</selectunion>
			</struct>
			<struct type="NPF_F_wmaxBscpMacSaAddResponseArgs_t" brief="Add Security Association Response Arguments">
				<descr>
					Asynchronous response for NPF_F_wmaxBscpMacSaAdd().
				</descr>
				<field name="errCode" type="NPF_F_wmaxBscpErrorType_t" brief="Error Code"></field>
				<field name="saHandle" type="NPF_F_wmaxBscpSaHandle_t" brief="A handle to the newly created Security Association"></field>
				<field name="said" type="NPF_uint16_t" brief="Security Association ID"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMacSaDeleteArgs_t" name="" brief="Security Association Delete arguments">
				<descr>
					This data structure defines parameters for NPF_F_wmaxBscpMacSaDelete().
				</descr>
				<field type="NPF_F_wmaxBscpSaHandle_t" name="id" brief="Identifier of the Security Association to be deleted."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMacSaDeleteResponseArgs_t" brief="Delete Security Association Response Arguments">
				<descr>
					Asynchronous response for NPF_F_wmaxBscpMacSaDelete().
				</descr>
				<see>NPF_F_wmaxBscpMacSaDelete</see>
				<field type="NPF_F_wmaxBscpErrorType_t" name="errCode">
					<descr>
						Error code.
					</descr>
				</field>
			</struct>
		</section>
		<section name="Security Association Functions">
			<func name="NPF_F_wmaxBscpMacSaAdd" type="NPF_error_t" brief="Add Security Association" xdrid="RPC_WMAX_BSCP_SA_ADD">
				<descr>
					This function adds a security association in the MAC instance. Primary security associations are created 
					automatically and cannot be added using this function.
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
					Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
					A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
					Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
					Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpMacSaAddArgs_t *" name="saAddAArgs" xdr="yes">
					<descr>Parameters of the new security association.</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
						The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
						The callback handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
						The operation cannot be completed successfully because
						of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SA_ADD.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpMacSaDelete" type="NPF_error_t" brief="Delete Security Association" xdrid="RPC_WMAX_BSCP_SA_DEL">
				<descr>
					This function deletes a security association in the MAC instance. Primary security association cannot be deleted using this function.
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
					Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
					A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
					Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
					Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpMacSaDeleteArgs_t *" name="saDeleteArgs" xdr="yes">
					<descr>Parameters of the security association to be deleted.</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
						The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
						The callback handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
						The operation cannot be completed successfully because
						of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SA_CHG.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
		</section>
	</section>
	<section name="Subscribers">
		<descr>
			This section defines the interface for managing subscriber stations.
			The controlling application is first notified that a new subscriber station has entered the wireless network when it receives a NPF_F_WMAX_BSCP_EVENT_SS_STATE(CREATED) event.
			After completing initial ranging procedures and negotiating basic capabilities, a subscriber station needs to be authenticated before it is allowed to access the core network.
			The next section describes the authentication APIs.
		</descr>
		<section name="Subscriber Data Types">
			<struct type="NPF_F_wmaxBscpSsEapTransferArgs_t" brief="EAP Transfer Arguments">
				<descr>
					This structure defines parameters required to send an EAP message.  EAP messages are encapsulated in PKM-RSP.EapTransfer messages.
				</descr>
				<see>NPF_F_WMAX_BSCP_EVENT_PKMV2_EAP_TRANSFER</see>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle."></field>
				<field name="eapMsg" type="NPF_F_wmaxBscpOctetString_t" brief="EAP encoded message."></field>
			</struct>
			<enum type="NPF_F_wmaxBscpPkmAuthCode_t" brief="PKM Authorization Code">
				<descr>
					Indicates the type of response to deliver to the subscriber.
				</descr>
				<field name="NPF_F_WMAX_BSCP_AUTH_CODE_AUTHORIZED" brief="Subscriber Authorized"></field>
				<field name="NPF_F_WMAX_BSCP_AUTH_CODE_REJECT" brief="Unspecified"></field>
				<field name="NPF_F_WMAX_BSCP_AUTH_CODE_REJECT_SS" brief="Unauthorized Subscriber"></field>
				<field name="NPF_F_WMAX_BSCP_AUTH_CODE_REJECT_SAID" brief="Unauthorized SAID"></field>
				<field name="NPF_F_WMAX_BSCP_AUTH_CODE_REJECT_PERMANENT" brief="Permanent Authorization Failure"></field>
			</enum>
			<!--
			<struct type="NPF_F_wmaxBscpPkmConfigSettings_t" brief="PKM Configuration Settings">
				<descr>
					<!- Reference: IEEE 802.16-2004, section 11.9.19 ->
					This structure defines PKM configuration settings that may be written to a subscriber in the PKM-RSP.AuthResponse message.
					Since these configuration values are optional, only non-zero values will be written.
					Any value of zero will indicate the SS should use a default from IEEE 802.16-2004 Table 343.
				</descr>
				<field name="authWaitTimeout" type="NPF_uint32_t" brief="Authorization wait timeout [sec]."></field>
				<field name="reAuthWaitTimeout" type="NPF_uint32_t" brief="Reauthorization wait timeout [sec]."></field>
				<field name="authGraceTime" type="NPF_uint32_t" brief="Authorization Grace time [sec]."></field>
				<field name="operWaitTimeout" type="NPF_uint32_t" brief="Operational wait timeout [sec]."></field>
				<field name="reKeyWaitTimeout" type="NPF_uint32_t" brief="Re-Key wait timeout [sec]."></field>
				<field name="tekGraceTime" type="NPF_uint32_t" brief="TEK Grace time [sec]."></field>
				<field name="authRejectWaitTimeout" type="NPF_uint32_t" brief="Authorization reject wait timeout [sec]."></field>
			</struct>
-->
			<enum type="NPF_F_wmaxBscpPkmAuthType_t" brief="PKM Authorization Type">
				<descr>
					Indicates the type of authorization being performed.
				</descr>
				<see>NPF_F_wmaxBscpSsAuthorizeArgs_t</see>
				<field name="NPF_F_WMAX_BSCP_AUTH_TYPE_PKMV1_RSA" brief="PKMv1 RSA Authorization"></field>
				<field name="NPF_F_WMAX_BSCP_AUTH_TYPE_PKMV2_RSA" brief="PKMv2 RSA Authorization"></field>
				<field name="NPF_F_WMAX_BSCP_AUTH_TYPE_PKMV2_EAP" brief="PKMv2 EAP Authorization"></field>
			</enum>
			<struct type="NPF_F_wmaxBscpSsPkmv2RsaAuthArgs_t" brief="PKMv2 RSA Authorization">
				<descr>
					This structure defines the parameters required for PKMv2 RSA Authentication.
				</descr>
				<field name="prePak" type="NPF_uint8_t" size="32" brief="256-bit Pre-Primary Authorization Key generated during RSA authentication procedures; only used during initial network entry, handovers use MSK"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsPkmv2Msk_t" brief="Master Session Key (MSK) Type">
				<descr>
					This structure defines the MSK (Master Session Key) used in PKMv2 EAP Authentication.
				</descr>
				<see>NPF_F_wmaxBscpSsAuthorizeArgs_t</see>
				<field name="msk" type="NPF_uint8_t" size="64" brief="512-bit Master Session Key (MSK)"></field>
				<field name="mskSeqNum" type="NPF_uint32_t" brief="MSK sequence number"></field>
				<field name="lifetime" type="NPF_uint32_t" brief="Master Session Key Lifetime (sec).  If this value is non-zero, it will be used as the AK lifetime.  If it is zero, the AK lifetime specified in NPF_F_wmaxBscpPkmSigParms_t will be used."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsPkmv2Ak_t" brief="Authorization Key (AK) Type.">
				<descr>
					This structure defines the MSK (Master Session Key) used in PKMv2 EAP Authentication.
				</descr>
				<see>NPF_F_wmaxBscpSsAuthorizeArgs_t</see>
				<field name="ak" type="NPF_uint8_t" size="20" brief="160-bits Authentication Key (AK)"></field>
				<field name="akSeqNum" type="NPF_uint32_t" brief="AK sequence number"></field>
				<field name="lifetime" type="NPF_uint32_t" brief="AK Lifetime (sec).  If it is zero, the default AK lifetime specified in NPF_F_wmaxBscpPkmSigParms_t will be used."></field>
			</struct>
			<enum type="NPF_F_wmaxBscpPkmAuthKeyType_t" brief="PKM Authentication Key Type">
				<descr>
					Indicates whether MSK or AK (derived from MSK) is provided.
				</descr>
				<see>NPF_F_wmaxBscpSsAuthorizeArgs_t</see>
				<field name="NPF_F_WMAX_BSCP_AUTH_PKMV2_EAP_AK" brief="AK key "></field>
				<field name="NPF_F_WMAX_BSCP_AUTH_PKMV2_EAP_MSK" brief="MSK key"></field>
			</enum>
			<struct type="NPF_F_wmaxBscpSsPkmv2EapAuthArgs_t" brief="PKMv2 EAP Authorization.">
				<descr>
					This structure defines the parameters required for PKMv2 EAP Authentication.
				</descr>
				<see>NPF_F_wmaxBscpSsAuthorizeArgs_t</see>
				<selectunion type="NPF_F_wmaxBscpSsAuthKeyTypeUnion_t" name="u">
					<selectfield name="keyType" type="NPF_F_wmaxBscpPkmAuthKeyType_t" brief="Key Type."></selectfield>
					<field name="ak" type="NPF_F_wmaxBscpSsPkmv2Ak_t" brief="Authentication Key (AK). Used for single EAP authentication.">
						<selector>NPF_F_WMAX_BSCP_AUTH_PKMV2_EAP_AK</selector>
					</field>
					<field name="msk" type="NPF_F_wmaxBscpSsPkmv2Msk_t" brief="Master Session Key (MSK). Used for EAP (single, double) to derive AK">
						<selector>NPF_F_WMAX_BSCP_AUTH_PKMV2_EAP_MSK</selector>
					</field>
				</selectunion>
			</struct>
			<struct type="NPF_F_wmaxBscpSsAuthorizeArgs_t" brief="Authorize Subscriber Arguments">
				<descr>
					This structure defines parameters required to authorize a subscriber.
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle."></field>
				<field name="authCode" type="NPF_F_wmaxBscpPkmAuthCode_t" brief="Authorization Code."></field>
				<field name="dispString" type="NPF_F_wmaxBscpOctetString_t" brief="Optional display string if authCode != AUTHORIZED."></field>
				<vector name="staticSaHandles" type="NPF_F_wmaxBscpSaHandle_t" brief="Static security associations the subscriber is allowed to access.">
					<length name="staticSaHandlesNum" type="NPF_uint32_t" brief="Number of static security associations."></length>
				</vector>
				<selectunion type="NPF_F_wmaxBscpSsAuthTypeUnion_t" name="u">
					<selectfield name="authType" type="NPF_F_wmaxBscpPkmAuthType_t" brief="Authorization Type."></selectfield>
					<field name="pkmv2Rsa" type="NPF_F_wmaxBscpSsPkmv2RsaAuthArgs_t" brief="PKMv2 RSA Authorization">
						<selector>NPF_F_WMAX_BSCP_AUTH_TYPE_PKMV2_RSA</selector>
					</field>
					<field name="pkmv2Eap" type="NPF_F_wmaxBscpSsPkmv2EapAuthArgs_t" brief="PKMv2 EAP Authorization">
						<selector>NPF_F_WMAX_BSCP_AUTH_TYPE_PKMV2_EAP</selector>
					</field>
					<field name="pkmv1RsaPublicKey" type="NPF_uint8_t" size="128" brief="PKMv1 RSA public key of Ss, i.e. modulus.">
						<selector>NPF_F_WMAX_BSCP_AUTH_TYPE_PKMV1_RSA</selector>
					</field>
				</selectunion>
			</struct>
			<struct type="NPF_F_wmaxBscpSsReAuthorizeArgs_t" brief="Reauthorize Subscriber Arguments">
				<descr>
					This structure defines parameters required to reauthorize a subscriber. 
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle."></field>
				<field name="authCode" type="NPF_F_wmaxBscpPkmAuthCode_t" brief="Authorization Code."></field>
				<field name="dispString" type="NPF_F_wmaxBscpOctetString_t" brief="Optional display string if authCode != AUTHORIZED."></field>
				<selectunion type="NPF_F_wmaxBscpSsReAuthTypeUnion_t" name="u">
					<selectfield name="reauthType" type="NPF_F_wmaxBscpPkmAuthType_t" brief="Authorization Type."></selectfield>
					<field name="pkmv2Eap" type="NPF_F_wmaxBscpSsPkmv2EapAuthArgs_t" brief="PKMv2 EAP Authorization">
						<selector>NPF_F_WMAX_BSCP_AUTH_TYPE_PKMV2_EAP</selector>
					</field>
					<field name="unused" type="NPF_uint32_t" brief="Unused.">
						<selector>NPF_F_WMAX_BSCP_AUTH_TYPE_PKMV1_RSA</selector>
						<selector>NPF_F_WMAX_BSCP_AUTH_TYPE_PKMV2_RSA</selector>
					</field>
				</selectunion>
			</struct>
			<enum type="NPF_F_wmaxBscpSsDregType_t" brief="Subscriber Deregistration Type">
				<descr>
					Indicates the type of the subscriber deregistration.
				</descr>
				<see>NPF_F_wmaxBscpSsAuthorizeArgs_t</see>
				<field name="NPF_F_WMAX_BSCP_SS_DREG_LEAVE" brief="SS shell immediately terminate service with the BS and should attempt 
				    network entry at another BS. DREG-CMD will be send."></field>
				<field name="NPF_F_WMAX_BSCP_SS_DREG_SUSPEND_ALL" brief="SS shall listen to the current BS but shall not transmit until an RES-CMD message 
				    or DREG_CMD with an Action Code that allows transmission is received. DREG-CMD will be send."></field>
				<field name="NPF_F_WMAX_BSCP_SS_DREG_SUSPEND_TRANSPORT" brief="SS shall listen to the current channel but only transmit on the Basic and
				    Primary Management Connections. DREG-CMD will be send."></field>
				<field name="NPF_F_WMAX_BSCP_SS_DREG_RESUME" brief="SS shall return to normal operation and may transmit 
				    on any of its active connections. DREG-CMD will be send."></field>
				<field name="NPF_F_WMAX_BSCP_SS_DREG_RESET" brief="SS shall perform a reset of existing connections. RES-CMD will be send."></field>
			</enum>

-          
			<struct type="NPF_F_wmaxBscpSsDregArgs_t" brief="Deregister Subscriber Arguments">
				<descr>
					This structure defines parameters required to perform subscriber deregistration, suspending or reassuming its activity.					
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle."></field>
				<field name="operation" type="NPF_F_wmaxBscpSsDregType_t" brief="Subscriber Deregistration Type."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsDeleteArgs_t" brief="Delete Subscriber Arguments">
				<descr>
					This structure defines parameters required to delete a subscriber.
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle."></field>
			</struct>
			<define brief="MAC-CPS Managed Uplink Connection Statistics">
				<descr>
					These bits can be used to configure or reset MAC-CPS Managed Uplink Connection Statistics.
				</descr>
				<see>NPF_F_wmaxBscpSsStatsConfigArgs_t</see>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_UL_ALL" brief="Mask to configure or reset all MAC-CPS Managed Uplink Connection Statistics.">
					<value>(-1ull)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_UL_SDU_DROPPED_DUPLICATED" brief="Number of uplink and then dropped MAC-CPS SDUs due to duplication.">
					<value>(0x01ull &lt;&lt; 0)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_UL_SDU_DROPPED_ARQ_PURGE_TIMEOUT" brief="Number of uplink and then dropped MAC-CPS SDUs due to ARQ Purge Timeout expiration.">
					<value>(0x01ull &lt;&lt; 1)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_SDU_ARQ_FEEDBACK" brief="Number of generated ARQ Feedbacks for the connection.">
					<value>(0x01ull &lt;&lt; 2)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_UL_SDU_ARQ_REQUESTS" brief="Number of uplink ARQ Resets.">
					<value>(0x01ull &lt;&lt; 3)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_UL_SDU_ARQ_DISCARD" brief="Number of uplink ARQ Discard messages received.">
					<value>(0x01ull &lt;&lt; 4)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_UL_ARQ_BLOCKS" brief="Number of uplink ARQ blocks.">
					<value>(0x01ull &lt;&lt; 5)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_UL_SDU_FRAGMENTS" brief="Number of uplink MAC-CPS SDU fragments.">
					<value>(0x01ull &lt;&lt; 6)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_UL_SDU_TOTAL_BYTES" brief="_TOTAL number of bytes in received and then accepted MAC-CPS SDUs.">
					<value>(0x01ull &lt;&lt; 7)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_UL_SDU_TOTAL_PKTS" brief="Number of successfully processed UL MAC-CPS SDUs (delivered to CS).">
					<value>(0x01ull &lt;&lt; 8)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_UL_PDU_DROPPED_NO_DECRYPT" brief="Number of uplink and then dropped MAC-CPS PDUs due to inability to decrypt.">
					<value>(0x01ull &lt;&lt; 9)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_UL_PDU_DROPPED_BAD_TYPE" brief="Number of uplink and then dropped MAC-CPS PDUs due to invalid type.">
					<value>(0x01ull &lt;&lt; 10)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_UL_PDU_DROPPED_BAD_CRC" brief="Number of uplink and then dropped MAC-CPS PDUs due to invalid CRC.">
					<value>(0x01ull &lt;&lt; 11)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_UL_PDU_DROPPED_BAD_PACK_SUBHDR" brief="Number of uplink and then dropped MAC-CPS PDUs due to invalid packing sub-header.">
					<value>(0x01ull &lt;&lt; 12)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_UL_PDU_DROPPED_BAD_FRAG_SUBHDR" brief="Number of uplink and then dropped MAC-CPS PDUs due to invalid fragmentation sub-header.">
					<value>(0x01ull &lt;&lt; 13)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_UL_PDU_DROPPED_OTHER" brief="Number of uplink and then dropped MAC-CPS PDUs due to other reasons.">
					<value>(0x01ull &lt;&lt; 14)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_UL_PDU_TOTAL_BYTES" brief="_TOTAL number of bytes in received and then accepted MAC-CPS PDUs.">
					<value>(0x01ull &lt;&lt; 15)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_UL_PDU_TOTAL_PKTS" brief="Number of MAC-CPS PDUs received from PHY.">
					<value>(0x01ull &lt;&lt; 16)</value>
				</field>
			</define>
			<struct type="NPF_F_wmaxBscpConnCpsUlStats_t" brief="MAC-CPS Managed Uplink Connection Statistics">
				<descr>
					This structure contains all statistics gathered for one uplink connection.
				</descr>
				<see>NPF_F_wmaxBscpSsStats_t</see>
				<field name="cCpsUlSduDroppedDuplicated" type="NPF_uint64_t" brief="Number of uplink and then dropped MAC-CPS SDUs due to duplication."></field>
				<field name="cCpsUlSduDroppedARQPurgeTimeout" type="NPF_uint64_t" brief="Number of uplink and then dropped MAC-CPS SDUs due to ARQ Purge Timeout expiration."></field>
				<field name="cCpsSduArqFeedback" type="NPF_uint64_t" brief="Number of generated ARQ Feedbacks for the connection."></field>
				<field name="cCpsUlSduArqResets" type="NPF_uint64_t" brief="Number of uplink ARQ Resets."></field>
				<field name="cCpsUlSduArqDiscard" type="NPF_uint64_t" brief="Number of uplink ARQ Discard messages received."></field>
				<field name="cCpsUlArqBlocks" type="NPF_uint64_t" brief="Number of uplink ARQ blocks."></field>
				<field name="cCpsUlSduFragments" type="NPF_uint64_t" brief="Number of uplink MAC-CPS SDU fragments."></field>
				<field name="cCpsUlSduTotalBytes" type="NPF_uint64_t" brief="Total number of bytes in received and then accepted MAC-CPS SDUs."></field>
				<field name="cCpsUlSduTotalPkts" type="NPF_uint64_t" brief="Number of successfully processed UL MAC-CPS SDUs (delivered to CS)."></field>
				<field name="cCpsUlPduDroppedNoDecrypt" type="NPF_uint64_t" brief="Number of uplink and then dropped MAC-CPS PDUs due to inability to decrypt."></field>
				<field name="cCpsUlPduDroppedBadType" type="NPF_uint64_t" brief="Number of uplink and then dropped MAC-CPS PDUs due to invalid type."></field>
				<field name="cCpsUlPduDroppedBadCrc" type="NPF_uint64_t" brief="Number of uplink and then dropped MAC-CPS PDUs due to invalid CRC."></field>
				<field name="cCpsUlPduDroppedBadPackSubhdr" type="NPF_uint64_t" brief="Number of uplink and then dropped MAC-CPS PDUs due to invalid packing sub-header."></field>
				<field name="cCpsUlPduDroppedBadFragSubhdr" type="NPF_uint64_t" brief="Number of uplink and then dropped MAC-CPS PDUs due to invalid fragmentation sub-header."></field>
				<field name="cCpsUlPduDroppedOther" type="NPF_uint64_t" brief="Number of uplink and then dropped MAC-CPS PDUs due to other reasons."></field>
				<field name="cCpsUlPduTotalBytes" type="NPF_uint64_t" brief="Total number of bytes in received and then accepted MAC-CPS PDUs."></field>
				<field name="cCpsUlPduTotalPkts" type="NPF_uint64_t" brief="Number of MAC-CPS PDUs received from PHY."></field>
			</struct>
			<define brief="MAC-CPS Managed Downlink Connection Statistics">
				<descr>
					These bits can be used to configure or reset MAC-CPS Managed Downlink Connection Statistics.
				</descr>
				<see>NPF_F_wmaxBscpSsStatsConfigArgs_t</see>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_DL_ALL" brief="Mask to configure or reset all MAC-CPS Managed Downlink Connection Statistics">
					<value>(-1ull)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_DL_SDU_DROPPED_QOS_CONSTRAINT" brief="Number of dropped DL packets due to QOS constraints (ie: max delay).">
					<value>(0x01ull &lt;&lt; 0)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_DL_SDU_DROPPED_ARQ_BLOCK_LIFETIME" brief="Number of downlink and then dropped MAC-CPS SDUs due to ARQ Block Lifetime expiration.">
					<value>(0x01ull &lt;&lt; 1)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_DL_SDU_ARQ_RETRANSMIT" brief="Number of MAC-CPS SDU fragments retransmitted on ARQ retransmit requests.">
					<value>(0x01ull &lt;&lt; 2)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_DL_SDU_ARQ_FEEDBACK_ACCEPTED" brief="Number of received and accepted ARQ feedbacks for the connection.">
					<value>(0x01ull &lt;&lt; 3)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_DL_SDU_ARQ_FEEDBACK_REJECTED" brief="Number of received and dropped ARQ feedbacks for the connection.">
					<value>(0x01ull &lt;&lt; 4)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_DL_SDU_ARQ_RESETS" brief="Number of downlink ARQ resets.">
					<value>(0x01ull &lt;&lt; 5)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_DL_ARQ_BLOCKS" brief="Number of downlink ARQ blocks.">
					<value>(0x01ull &lt;&lt; 6)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_DL_SDU_FRAGMENTS" brief="Number of MAC-CPS SDU fragments.">
					<value>(0x01ull &lt;&lt; 7)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_DL_SDU_TOTAL_BYTES" brief="_TOTAL number of bytes in transmitted MAC-CPS SDUs.">
					<value>(0x01ull &lt;&lt; 8)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_DL_SDU_TOTAL_PKTS" brief="Number of successfully processed MAC-CPS SDUs delivered to lower layers.">
					<value>(0x01ull &lt;&lt; 9)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_DL_PDU_DROPPED_NO_ENCRYPT" brief="Number of MAC-CPS PDUs not transmitted due to inability to encrypt.">
					<value>(0x01ull &lt;&lt; 10)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_DL_PDU_DROPPED_OTHER" brief="Number of MAC-CPS PDUs not transmitted due to other reasons.">
					<value>(0x01ull &lt;&lt; 11)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_DL_PDU_TOTAL_BYTES" brief="_TOTAL number of bytes in transmitted MAC-CPS PDUs.">
					<value>(0x01ull &lt;&lt; 12)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CPS_DL_PDU_TOTAL_PKTS" brief="Number of MAC-CPS PDUs delivered to PHY.">
					<value>(0x01ull &lt;&lt; 13)</value>
				</field>
			</define>
			<struct type="NPF_F_wmaxBscpConnCpsDlStats_t" brief="MAC-CPS Managed Downlink Connection Statistics">
				<descr>
					This structure contains all statistics gathered for one connection.
					Returned in callback for NPF_F_wmaxBscpSvcFlowStatsGet and NPF_F_wmaxBscpSsStatsGet functions.
					If data collection is disabled for a particular counter, the value returned is undefined.
				</descr>
				<see>NPF_F_wmaxBscpSsStats_t</see>
				<field name="cCpsDlSduDroppedQoSConstraint" type="NPF_uint64_t" brief="Number of dropped DL packets due to QOS constraints (ie: max delay)."></field>
				<field name="cCpsDlSduDroppedArqBlockLifetime" type="NPF_uint64_t" brief="Number of downlink and then dropped MAC-CPS SDUs due to ARQ Block Lifetime expiration."></field>
				<field name="cCpsDlSduArqRetransmit" type="NPF_uint64_t" brief="Number of MAC-CPS SDU fragments retransmitted on ARQ retransmit requests."></field>
				<field name="cCpsDlSduArqFeedbackAccepted" type="NPF_uint64_t" brief="Number of received and accepted ARQ feedbacks for the connection."></field>
				<field name="cCpsDlSduArqFeedbackRejected" type="NPF_uint64_t" brief="Number of received and dropped ARQ feedbacks for the connection."></field>
				<field name="cCpsDlSduArqResets" type="NPF_uint64_t" brief="Number of downlink ARQ resets."></field>
				<field name="cCpsDlArqBlocks" type="NPF_uint64_t" brief="Number of downlink ARQ blocks."></field>
				<field name="cCpsDlSduFragments" type="NPF_uint64_t" brief="Number of MAC-CPS SDU fragments."></field>
				<field name="cCpsDlSduTotalBytes" type="NPF_uint64_t" brief="Total number of bytes in transmitted MAC-CPS SDUs."></field>
				<field name="cCpsDlSduTotalPkts" type="NPF_uint64_t" brief="Number of successfully processed MAC-CPS SDUs delivered to lower layers."></field>
				<field name="cCpsUlPduDroppedNoEncrypt" type="NPF_uint64_t" brief="Number of MAC-CPS PDUs not transmitted due to inability to encrypt."></field>
				<field name="cCpsUlPduDroppedOther" type="NPF_uint64_t" brief="Number of MAC-CPS PDUs not transmitted due to other reasons."></field>
				<field name="cCpsDlPduTotalBytes" type="NPF_uint64_t" brief="Total number of bytes in transmitted MAC-CPS PDUs."></field>
				<field name="cCpsDlPduTotalPkts" type="NPF_uint64_t" brief="Number of MAC-CPS PDUs delivered to PHY."></field>
			</struct>
			<define brief="BSCP Managed Subscriber Statistics Mask">
				<descr>
					These bits can be used to configure or reset BSCP Managed Subscriber Statistics.
				</descr>
				<see>NPF_F_wmaxBscpSsStatsConfigArgs_t</see>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_ALL" brief="Mask to configure or reset all BSCP Managed Subscriber Statistics.">
					<value>(-1ull)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_UL_RX_RNG_REQ" brief="Number of uplink RNG-REQ messages received">
					<value>(0x01ull &lt;&lt; 0)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_RNG_RSP" brief="Number of downlink RNG-RSP messages transmitted">
					<value>(0x01ull &lt;&lt; 1)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_UL_RX_SBC_REQ" brief="Number of uplink SBC-REQ messages received">
					<value>(0x01ull &lt;&lt; 2)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_SBC_RSP" brief="Number of downlink SBC-RSP messages transmitted">
					<value>(0x01ull &lt;&lt; 3)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_UL_RX_PKM_REQ" brief="Number of uplink PKM-REQ messages received">
					<value>(0x01ull &lt;&lt; 4)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_PKM_RSP" brief="Number of downlink PKM-RSP messages transmitted">
					<value>(0x01ull &lt;&lt; 5)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_UL_RX_REG_REQ" brief="Number of uplink REG-REQ messages received">
					<value>(0x01ull &lt;&lt; 6)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_REG_RSP" brief="Number of downlink REG-RSP messages transmitted">
					<value>(0x01ull &lt;&lt; 7)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_DSA_REQ" brief="Number of downlink DSA-REQ messages transmitted">
					<value>(0x01ull &lt;&lt; 8)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_UL_RX_DSA_RSP" brief="Number of uplink DSA-RSP messages received">
					<value>(0x01ull &lt;&lt; 9)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_DSA_ACK" brief="Number of downlink DSA-ACK messages transmitted">
					<value>(0x01ull &lt;&lt; 10)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_UL_RX_DSA_REQ" brief="Number of uplink DSA-REQ messages received">
					<value>(0x01ull &lt;&lt; 11)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_DSA_RSP" brief="Number of downlink DSA-RSP messages transmitted">
					<value>(0x01ull &lt;&lt; 12)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_UL_RX_DSA_ACK" brief="Number of uplink DSA-ACK messages received">
					<value>(0x01ull &lt;&lt; 13)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_DSC_REQ" brief="Number of downlink DSC-REQ messages transmitted">
					<value>(0x01ull &lt;&lt; 14)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_UL_RX_DSC_RSP" brief="Number of uplink DSC-RSP messages received">
					<value>(0x01ull &lt;&lt; 15)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_DSC_ACK" brief="Number of downlink DSC-ACK messages transmitted">
					<value>(0x01ull &lt;&lt; 16)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_UL_RX_DSC_REQ" brief="Number of uplink DSC-REQ messages received">
					<value>(0x01ull &lt;&lt; 17)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_DSC_RSP" brief="Number of downlink DSC-RSP messages transmitted">
					<value>(0x01ull &lt;&lt; 18)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_UL_RX_DSC_ACK" brief="Number of uplink DSC-ACK messages received">
					<value>(0x01ull &lt;&lt; 19)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_DSD_REQ" brief="Number of downlink DSD-REQ messages transmitted">
					<value>(0x01ull &lt;&lt; 20)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_UL_RX_DSD_RSP" brief="Number of uplink DSD-RSP messages received">
					<value>(0x01ull &lt;&lt; 21)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_UL_RX_DSD_REQ" brief="Number of uplink DSD-REQ messages received">
					<value>(0x01ull &lt;&lt; 22)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_DSD_RSP" brief="Number of downlink DSD-RSP messages transmitted">
					<value>(0x01ull &lt;&lt; 23)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_DSX_RVD" brief="Number of downlink DSX-RVD messages transmitted">
					<value>(0x01ull &lt;&lt; 24)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_MCA_REQ" brief="Number of downlink MCA-REQ messages transmitted">
					<value>(0x01ull &lt;&lt; 25)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_UL_RX_MCA_RSP" brief="Number of uplink MCA-RSP messages received">
					<value>(0x01ull &lt;&lt; 26)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_UL_RX_DBPC_REQ" brief="Number of uplink DBPC-REQ messages received (802.16-2004 only)">
					<value>(0x01ull &lt;&lt; 27)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_DBPC_RSP" brief="Number of downlink DBPC-RSP messages transmitted (802.16-2004 only)">
					<value>(0x01ull &lt;&lt; 28)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_UL_RX_DREG_REQ" brief="Number of uplink DREG-REQ messages received">
					<value>(0x01ull &lt;&lt; 29)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_DREG_CMD" brief="Number of downlink DREG-CMD messages transmitted">
					<value>(0x01ull &lt;&lt; 30)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_RES_CMD" brief="Number of downlink DREG-CMD messages transmitted">
					<value>(0x01ull &lt;&lt; 31)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_CLK_CMP" brief="Number of downlink CLK-CMP messages transmitted">
					<value>(0x01ull &lt;&lt; 32)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_UL_RX_TFTP_CPLT" brief="Number of uplink TFTP-CMPLT messages received">
					<value>(0x01ull &lt;&lt; 33)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_TFTP_RSP" brief="Number of downlink TFTP-RSP messages transmitted">
					<value>(0x01ull &lt;&lt; 34)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_REP_REQ" brief="Number of downlink REP-REQ messages transmitted">
					<value>(0x01ull &lt;&lt; 35)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_UL_RX_REP_RSP" brief="Number of uplink REP-RSP messages received">
					<value>(0x01ull &lt;&lt; 36)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_FPC" brief="Number of downlink FPC messages transmitted">
					<value>(0x01ull &lt;&lt; 37)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_UL_RX_MOB_SLP_REQ" brief="Number of uplink MOB-SLP-REQ messages received">
					<value>(0x01ull &lt;&lt; 38)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_MOB_SLP_RSP" brief="Number of downlink MOB-SLP-RSP messages transmitted">
					<value>(0x01ull &lt;&lt; 39)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_MOB_TRF_IND" brief="Number of downlink MOB-TRF-IND messages transmitted">
					<value>(0x01ull &lt;&lt; 40)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_MOB_NBR_ADV" brief="Number of downlink MOB-NBR-ADV messages transmitted">
					<value>(0x01ull &lt;&lt; 41)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_UL_RX_MOB_SCN_REQ" brief="Number of uplink MOB-SCN-REQ messages received">
					<value>(0x01ull &lt;&lt; 42)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_MOB_SCN_RSP" brief="Number of downlink MOB-SCN-RSP messages transmitted">
					<value>(0x01ull &lt;&lt; 43)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_UL_RX_MOB_SCN_REP" brief="Number of uplink MOB-SCAN-REP messages received">
					<value>(0x01ull &lt;&lt; 44)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_MOB_BSHO_REQ" brief="Number of downlink MOB-BSHO-REQ messages transmitted">
					<value>(0x01ull &lt;&lt; 45)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_UL_RX_MOB_MSHO_REQ" brief="Number of uplink MOB-MSHO-REQ messages received">
					<value>(0x01ull &lt;&lt; 46)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_MOB_BSHO_RSP" brief="Number of downlink MOB-BSHO-RSP messages transmitted">
					<value>(0x01ull &lt;&lt; 47)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_UL_RX_MOB_HO_IND" brief="Number of uplink MOB-HO-IND messages received">
					<value>(0x01ull &lt;&lt; 48)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_MOB_PAG_ADV" brief="Number of downlink MOB-PAGE-ADV messages transmitted">
					<value>(0x01ull &lt;&lt; 49)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_MBS_MAP" brief="Number of downlink MBS-MAP messages transmitted">
					<value>(0x01ull &lt;&lt; 50)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_UL_RX_PMC_REQ" brief="Number of uplink PMC-REQ messages received">
					<value>(0x01ull &lt;&lt; 51)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_PMC_RSP" brief="Number of downlink PMC-RSP messages transmitted">
					<value>(0x01ull &lt;&lt; 52)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_DL_TX_PRC_LT_CTRL" brief="Number of downlink PRC-LT-CTRL messages transmitted">
					<value>(0x01ull &lt;&lt; 53)</value>
				</field>
        <field name="NPF_F_WMAX_BSCP_STAT_S_BSCP_BP_CHANGES" brief="Number of burst profile changes (UL + DL).">
          <value>(0x01ull &lt;&lt; 54)</value>
        </field>
      </define>
      <struct type="NPF_F_wmaxBscpSsBscpStats_t" brief="BSCP Managed Subscriber Statistics">
        <descr>
          This structure contains the BSCP managed subscriber statistics.
        </descr>
        <see>NPF_F_wmaxBscpSsStats_t</see>
        <field name="sBscpUlRxRngReq" type="NPF_uint64_t" brief="Number of uplink RNG-REQ messages received"></field>
        <field name="sBscpDlTxRngRsp" type="NPF_uint64_t" brief="Number of downlink RNG-RSP messages transmitted"></field>
        <field name="sBscpUlRxSbcReq" type="NPF_uint64_t" brief="Number of uplink SBC-REQ messages received"></field>
        <field name="sBscpDlTxSbcRsp" type="NPF_uint64_t" brief="Number of downlink SBC-RSP messages transmitted"></field>
        <field name="sBscpUlRxPkmReq" type="NPF_uint64_t" brief="Number of uplink PKM-REQ messages received"></field>
        <field name="sBscpDlTxPkmRsp" type="NPF_uint64_t" brief="Number of downlink PKM-RSP messages transmitted"></field>
        <field name="sBscpUlRxRegReq" type="NPF_uint64_t" brief="Number of uplink REG-REQ messages received"></field>
        <field name="sBscpDlTxRegRsp" type="NPF_uint64_t" brief="Number of downlink REG-RSP messages transmitted"></field>
        <field name="sBscpDlTxDsaReq" type="NPF_uint64_t" brief="Number of downlink DSA-REQ messages transmitted"></field>
        <field name="sBscpUlRxDsaRsp" type="NPF_uint64_t" brief="Number of uplink DSA-RSP messages received"></field>
        <field name="sBscpDlTxDsaAck" type="NPF_uint64_t" brief="Number of downlink DSA-ACK messages transmitted"></field>
        <field name="sBscpUlRxDsaReq" type="NPF_uint64_t" brief="Number of uplink DSA-REQ messages received"></field>
        <field name="sBscpDlTxDsaRsp" type="NPF_uint64_t" brief="Number of downlink DSA-RSP messages transmitted"></field>
        <field name="sBscpUlRxDsaAck" type="NPF_uint64_t" brief="Number of uplink DSA-ACK messages received"></field>
        <field name="sBscpDlTxDscReq" type="NPF_uint64_t" brief="Number of downlink DSC-REQ messages transmitted"></field>
        <field name="sBscpUlRxDscRsp" type="NPF_uint64_t" brief="Number of uplink DSC-RSP messages received"></field>
        <field name="sBscpDlTxDscAck" type="NPF_uint64_t" brief="Number of downlink DSC-ACK messages transmitted"></field>
        <field name="sBscpUlRxDscReq" type="NPF_uint64_t" brief="Number of uplink DSC-REQ messages received"></field>
        <field name="sBscpDlTxDscRsp" type="NPF_uint64_t" brief="Number of downlink DSC-RSP messages transmitted"></field>
        <field name="sBscpUlRxDscAck" type="NPF_uint64_t" brief="Number of uplink DSC-ACK messages received"></field>
        <field name="sBscpDlTxDsdReq" type="NPF_uint64_t" brief="Number of downlink DSD-REQ messages transmitted"></field>
        <field name="sBscpUlRxDsdRsp" type="NPF_uint64_t" brief="Number of uplink DSD-RSP messages received"></field>
        <field name="sBscpUlRxDsdReq" type="NPF_uint64_t" brief="Number of uplink DSD-REQ messages received"></field>
        <field name="sBscpDlTxDsdRsp" type="NPF_uint64_t" brief="Number of downlink DSD-RSP messages transmitted"></field>
        <field name="sBscpDlTxDsxRvd" type="NPF_uint64_t" brief="Number of downlink DSX-RVD messages transmitted"></field>
        <field name="sBscpDlTxMcaReq" type="NPF_uint64_t" brief="Number of downlink MCA-REQ messages transmitted"></field>
        <field name="sBscpUlRxMcaRsp" type="NPF_uint64_t" brief="Number of uplink MCA-RSP messages received"></field>
        <field name="sBscpUlRxDbpcReq" type="NPF_uint64_t" brief="Number of uplink DBPC-REQ messages received (802.16-2004 only)"></field>
        <field name="sBscpDlTxDbpcRsp" type="NPF_uint64_t" brief="Number of downlink DBPC-RSP messages transmitted (802.16-2004 only)"></field>
        <field name="sBscpUlRxDregReq" type="NPF_uint64_t" brief="Number of uplink DREG-REQ messages received"></field>
        <field name="sBscpDlTxDregCmd" type="NPF_uint64_t" brief="Number of downlink DREG-CMD messages transmitted"></field>
        <field name="sBscpDlTxResCmd" type="NPF_uint64_t" brief="Number of downlink DREG-CMD messages transmitted"></field>
        <field name="sBscpDlTxClkCmp" type="NPF_uint64_t" brief="Number of downlink CLK-CMP messages transmitted"></field>
        <field name="sBscpUlRxTftpCplt" type="NPF_uint64_t" brief="Number of uplink TFTP-CMPLT messages received"></field>
        <field name="sBscpDlTxTftpRsp" type="NPF_uint64_t" brief="Number of downlink TFTP-RSP messages transmitted"></field>
        <field name="sBscpDlTxRepReq" type="NPF_uint64_t" brief="Number of downlink REP-REQ messages transmitted"></field>
        <field name="sBscpUlRxRepRsp" type="NPF_uint64_t" brief="Number of uplink REP-RSP messages received"></field>
        <field name="sBscpDlTxFpc" type="NPF_uint64_t" brief="Number of downlink FPC messages transmitted"></field>
        <field name="sBscpUlRxMobSlpReq" type="NPF_uint64_t" brief="Number of uplink MOB-SLP-REQ messages received"></field>
        <field name="sBscpDlTxMobSlpRsp" type="NPF_uint64_t" brief="Number of downlink MOB-SLP-RSP messages transmitted"></field>
        <field name="sBscpDlTxMobTrfInd" type="NPF_uint64_t" brief="Number of downlink MOB-TRF-IND messages transmitted"></field>
        <field name="sBscpDlTxMobNbrAdv" type="NPF_uint64_t" brief="Number of downlink MOB-NBR-ADV messages transmitted"></field>
        <field name="sBscpUlRxMobScnReq" type="NPF_uint64_t" brief="Number of uplink MOB-SCN-REQ messages received"></field>
        <field name="sBscpDlTxMobScnRsp" type="NPF_uint64_t" brief="Number of downlink MOB-SCN-RSP messages transmitted"></field>
        <field name="sBscpUlRxMobScnRep" type="NPF_uint64_t" brief="Number of uplink MOB-SCAN-REP messages received"></field>
        <field name="sBscpDlTxMobBshoReq" type="NPF_uint64_t" brief="Number of downlink MOB-BSHO-REQ messages transmitted"></field>
        <field name="sBscpUlRxMobSshoReq" type="NPF_uint64_t" brief="Number of uplink MOB-MSHO-REQ messages received"></field>
        <field name="sBscpDlTxMobBshoRsp" type="NPF_uint64_t" brief="Number of downlink MOB-BSHO-RSP messages transmitted"></field>
        <field name="sBscpUlRxMobHoInd" type="NPF_uint64_t" brief="Number of uplink MOB-HO-IND messages received"></field>
        <field name="sBscpDlTxMobPagAdv" type="NPF_uint64_t" brief="Number of downlink MOB-PAGE-ADV messages transmitted"></field>
        <field name="sBscpDlTxMbsMap" type="NPF_uint64_t" brief="Number of downlink MBS-MAP messages transmitted"></field>
        <field name="sBscpUlRxPmcReq" type="NPF_uint64_t" brief="Number of uplink PMC-REQ messages received"></field>
        <field name="sBscpDlTxPmcRsp" type="NPF_uint64_t" brief="Number of downlink PMC-RSP messages transmitted"></field>
        <field name="sBscpDlTxPrcLtCtrl" type="NPF_uint64_t" brief="Number of downlink PRC-LT-CTRL messages transmitted"></field>
        <field name="sBscpBurstProfileChanges" type="NPF_uint64_t" brief="Number of burst profile changes (UL + DL)."></field>
      </struct>
      <define brief="PHY Managed Subscriber Statistics Mask">
        <descr>
          These bits can be used to configure or reset PHY Managed Subscriber Statistics.
        </descr>
        <see>NPF_F_wmaxBscpSsStatsConfigArgs_t</see>
        <field name="NPF_F_WMAX_BSCP_STAT_S_PHY_ALL" brief="Mask to configure or reset all PHY statistics">
          <value>(-1ull)</value>
        </field>
        <field name="NPF_F_WMAX_BSCP_STAT_S_PHY_RSSI_AVG" brief="Average value of RSSI status value reported by PHY.">
          <value>(0x01ull &lt;&lt; 0)</value>
        </field>
        <field name="NPF_F_WMAX_BSCP_STAT_S_PHY_CINR_AVG" brief="Average value of CINR status value reported by PHY.">
          <value>(0x01ull &lt;&lt; 1)</value>
        </field>
        <field name="NPF_F_WMAX_BSCP_STAT_S_UL_HARQ_BURST_RCVD" brief="Number of successfully received uplink HARQ bursts.">
          <value>(0x01ull &lt;&lt; 2)</value>
        </field>
        <field name="NPF_F_WMAX_BSCP_STAT_S_UL_HARQ_BURST_DROPPED" brief="Number of uplink HARQ bursts that were not successfully received.">
          <value>(0x01ull &lt;&lt; 3)</value>
        </field>
        <field name="NPF_F_WMAX_BSCP_STAT_S_UL_HARQ_BURST_RETRANSMIT" brief="Number of uplink HARQ retransmissions.">
          <value>(0x01ull &lt;&lt; 4)</value>
        </field>
        <field name="NPF_F_WMAX_BSCP_STAT_S_DL_HARQ_BURST_TRANSMIT" brief="Number of acknowledged transmitted downlink HARQ bursts.">
          <value>(0x01ull &lt;&lt; 5)</value>
        </field>
        <field name="NPF_F_WMAX_BSCP_STAT_S_DL_HARQ_BURST_DROPPED" brief="Number of downlink HARQ bursts that were not acknowledged.">
          <value>(0x01ull &lt;&lt; 6)</value>
        </field>
        <field name="NPF_F_WMAX_BSCP_STAT_S_DL_HARQ_BURST_RETRANSMIT" brief="Number of downlink HARQ retransmissions.">
          <value>(0x01ull &lt;&lt; 7)</value>
        </field>
        <field name="NPF_F_WMAX_BSCP_STAT_S_PHY_CINR_REP_MSS" brief="The last reported by the MSS CINR value measured for DL.">
          <value>(0x01ull &lt;&lt; 8)</value>
        </field>
        <field name="NPF_F_WMAX_BSCP_STAT_S_PHY_RSSI_REP_MSS" brief="The last reported by the MSS RSSI value measured for DL.">
          <value>(0x01ull &lt;&lt; 9)</value>
        </field>
        <field name="NPF_F_WMAX_BSCP_STAT_S_PHY_TX_PWR_REP_MSS" brief="The current SS TX Power as seen by the BS.">
          <value>(0x01ull &lt;&lt; 10)</value>
        </field>
      </define>
			<struct type="NPF_F_wmaxBscpSsPhyStats_t" brief="PHY Managed Subscriber Statistics">
				<descr>
					This structure contains the PHY statistics gathered for a subscriber instance.
				</descr>
				<see>NPF_F_wmaxBscpSsStats_t</see>
				<field name="sPhyRssiAvg" type="NPF_uint64_t" brief="Average value of RSSI status value reported by PHY."></field>
				<field name="sPhyCinrAvg" type="NPF_uint64_t" brief="Average value of CINR status value reported by PHY."></field>
				<field name="sUlHarqBurstReceived" type="NPF_uint64_t" brief="Number of successfully received uplink HARQ bursts."></field>
				<field name="sUlHarqBurstDropped" type="NPF_uint64_t" brief="Number of uplink HARQ bursts that were not successfully received."></field>
				<field name="sUlHarqBurstRetransmit" type="NPF_uint64_t" brief="Number of uplink HARQ retransmissions."></field>
				<field name="sDlHarqBurstTransmit" type="NPF_uint64_t" brief="Number of acknowledged transmitted downlink HARQ bursts."></field>
				<field name="sDlHarqBurstDropped" type="NPF_uint64_t" brief="Number of downlink HARQ bursts that were not acknowledged."></field>
				<field name="sDlHarqBurstRetransmit" type="NPF_uint64_t" brief="Number of downlink HARQ retransmissions."></field>
        <field name="sPhyCinrMss" type="NPF_uint64_t" brief="The last reported by the MSS CINR value measured for DL."></field>
        <field name="sPhyRssiMss" type="NPF_uint64_t" brief="The last reported by the MSS RSSI value measured for DL."></field>
        <field name="sPhyTransmitPowerMss" type="NPF_uint64_t" brief="The current SS TX Power as seen by the BS."></field>
      </struct>
			<struct type="NPF_F_wmaxBscpSsStats_t" brief="Subscriber Statistics">
				<descr>
					This structure contains subscriber statistics.
				</descr>
				<see>NPF_F_wmaxBscpSsStatsGetResponseArgs_t</see>
				<field name="sBscpStats" type="NPF_F_wmaxBscpSsBscpStats_t" brief="BSCP managed subscriber statistics."></field>
				<field name="sPhyStats" type="NPF_F_wmaxBscpSsPhyStats_t" brief="PHY managed subscriber statistics."></field>
				<field name="cCpsBasUlStats" type="NPF_F_wmaxBscpConnCpsUlStats_t" brief="MAC-CPS managed uplink connection statistics for BASIC management channel."></field>
				<field name="cCpsBasDlStats" type="NPF_F_wmaxBscpConnCpsDlStats_t" brief="MAC-CPS managed downlink connection statistics for BASIC management channel."></field>
				<field name="cCpsPriUlStats" type="NPF_F_wmaxBscpConnCpsUlStats_t" brief="MAC-CPS managed uplink connection statistics for PRIMARY management channel."></field>
				<field name="cCpsPriDlStats" type="NPF_F_wmaxBscpConnCpsDlStats_t" brief="MAC-CPS managed downlink connection statistics for PRIMARY management channel."></field>
				<field name="cCpsSecUlStats" type="NPF_F_wmaxBscpConnCpsUlStats_t" brief="MAC-CPS managed uplink connection statistics for SECONDARY management channel (if configured)."></field>
				<field name="cCpsSecDlStats" type="NPF_F_wmaxBscpConnCpsDlStats_t" brief="MAC-CPS managed downlink connection statistics for SECONDARY management channel (if configured)."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsStatsConfigArgs_t" brief="Configure Subscriber Statistics Arguments">
				<descr>
					This structure defines parameters to retrieve and reset subscriber statistics.
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle"></field>
				<field name="sBscpConfigMask" type="NPF_F_statsConfig_t" brief="Mask specifies which statistics will be collected.  Also causes counters to be reset to zero.  See: BSCP Managed Subscriber Statistics."></field>
				<field name="sPhyConfigMask" type="NPF_F_statsConfig_t" brief="Mask specifies which statistics will be collected.  Also causes counters to be reset to zero.  See: PHY Managed Subscriber Statistics Mask."></field>
				<field name="cCpsBasUlConfigMask" type="NPF_F_statsConfig_t" brief="Mask specifies which statistics will be collected.  Also causes counters to be reset to zero.  See: MAC-CPS Managed uplink Connection Statistics Mask."></field>
				<field name="cCpsBasDlConfigMask" type="NPF_F_statsConfig_t" brief="Mask specifies which statistics will be collected.  Also causes counters to be reset to zero.  See: MAC-CPS Managed downlink Connection Statistics Mask."></field>
				<field name="cCpsPriUlConfigMask" type="NPF_F_statsConfig_t" brief="Mask specifies which statistics will be collected.  Also causes counters to be reset to zero.  See: MAC-CPS Managed uplink Connection Statistics Mask."></field>
				<field name="cCpsPriDlConfigMask" type="NPF_F_statsConfig_t" brief="Mask specifies which statistics will be collected.  Also causes counters to be reset to zero.  See: MAC-CPS Managed downlink Connection Statistics Mask."></field>
				<field name="cCpsSecUlConfigMask" type="NPF_F_statsConfig_t" brief="Mask specifies which statistics will be collected.  Also causes counters to be reset to zero.  See: MAC-CPS Managed uplink Connection Statistics Mask."></field>
				<field name="cCpsSecDlConfigMask" type="NPF_F_statsConfig_t" brief="Mask specifies which statistics will be collected.  Also causes counters to be reset to zero.  See: MAC-CPS Managed downlink Connection Statistics Mask."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsStatsGetArgs_t" brief="Get Subscriber Statistics Arguments">
				<descr>
					This structure defines parameters to get the subscriber statistics.
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle."></field>
				<field name="sBscpResetMask" type="NPF_uint64_t" brief="Mask specifies which statistics will be collected.  Also causes counters to be reset to zero.  See: BSCP Managed Subscriber Statistics Mask."></field>
				<field name="sPhyResetMask" type="NPF_uint64_t" brief="Mask specifies which statistics will be collected.  Also causes counters to be reset to zero.  See: PHY Managed Subscriber Statistics Mask."></field>
				<field name="cCpsBasUlResetMask" type="NPF_uint64_t" brief="Mask specifies which statistics will reset to zero.  See: MAC-CPS Managed uplink Connection Statistics Mask."></field>
				<field name="cCpsBasDlResetMask" type="NPF_uint64_t" brief="Mask specifies which statistics will reset to zero.  See: MAC-CPS Managed downlink Connection Statistics Mask."></field>
				<field name="cCpsPriUlResetMask" type="NPF_uint64_t" brief="Mask specifies which statistics will reset to zero.  See: MAC-CPS Managed uplink Connection Statistics Mask."></field>
				<field name="cCpsPriDlResetMask" type="NPF_uint64_t" brief="Mask specifies which statistics will reset to zero.  See: MAC-CPS Managed downlink Connection Statistics Mask."></field>
				<field name="cCpsSecUlResetMask" type="NPF_uint64_t" brief="Mask specifies which statistics will reset to zero.  See: MAC-CPS Managed uplink Connection Statistics Mask."></field>
				<field name="cCpsSecDlResetMask" type="NPF_uint64_t" brief="Mask specifies which statistics will reset to zero.  See: MAC-CPS Managed downlink Connection Statistics Mask."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsStatsGetResponseArgs_t" brief="Get Subscriber Statistics Response Arguments">
				<descr>
					Asynchronous response for NPF_F_wmaxBscpSsStatsGet.
					If the subscriber is not configured to use a SECONDARY management channel, secStats will be undefined.
				</descr>
				<see>NPF_F_wmaxBscpSsStatsGet</see>
				<field name="ssStats" type="NPF_F_wmaxBscpSsStats_t" brief="."></field>
			</struct>
			<enum type="NPF_F_wmaxBscpSsFeedbackMethod_t" brief="Feedback Method">
				<descr>
					Defines the feedback methods used to get channel measurements from the SS. 
				</descr>
				<field name="NPF_F_WMAX_BSCP_SS_FEEDBACK_CQICH" brief="Use CQICH channel."></field>
				<field name="NPF_F_WMAX_BSCP_SS_FEEDBACK_MESSAGES" brief="Use REP-REQ/RSP messages."></field>
			</enum>
			<enum type="NPF_F_wmaxBscpSsReportType_t" name="e3">
				<descr>			
			          Valid reports types that can be requested from a SS over a CQI channel allocation.
				</descr>
				<field name="NPF_F_WMAX_BSCP_SS_REPORT_1_NO_REP" value="0" brief="The option number 1 - no CINR report configuration."></field>
				<field name="NPF_F_WMAX_BSCP_SS_REPORT_2_PR_EF" brief="The option number 2 - Effective CINR report on preamble"></field>
				<field name="NPF_F_WMAX_BSCP_SS_REPORT_3_PR_PH" brief="The option number 3 - Physical CINR report on preamble"></field>
				<field name="NPF_F_WMAX_BSCP_SS_REPORT_4_PR_PH_AV" brief="The option number 4 - Physical CINR report on preamble with specified averaging parameter"></field>
				<field name="NPF_F_WMAX_BSCP_SS_REPORT_5_NON_PUSC_EF" brief="The option number 5 - Effective CINR report on specified non-PUSC permutation zone"></field>
				<field name="NPF_F_WMAX_BSCP_SS_REPORT_6_NON_PUSC_PH" brief="The option number 6 - Physical CINR report on specified non-PUSC permutation zone"></field>
				<field name="NPF_F_WMAX_BSCP_SS_REPORT_7_NON_PUSC_PH_AV" brief="The option number 7 - Physical CINR report on specified non-PUSC permutation zone with specified averaging parameter"></field>
				<field name="NPF_F_WMAX_BSCP_SS_REPORT_8_PUSC_EF" brief="The option number 8 - Effective CINR report on specified PUSC permutation zone"></field>
				<field name="NPF_F_WMAX_BSCP_SS_REPORT_9_PUSC_GR_EF" brief="The option number 9 - Effective CINR report on specified major groups of specified PUSC permutation zone"></field>
				<field name="NPF_F_WMAX_BSCP_SS_REPORT_10_PUSC_PH" brief="The option number 10 - Physical CINR report on specified PUSC permutation zone"></field>
				<field name="NPF_F_WMAX_BSCP_SS_REPORT_11_PUSC_GR_PH" brief="The option number 11 - Physical CINR report on specified major groups of specified PUSC permutation zone"></field>
				<field name="NPF_F_WMAX_BSCP_SS_REPORT_12_PUSC_PH_AV" brief="The option number 12 - Physical CINR report on specified PUSC permutation zone with specified averaging parameter"></field>
				<field name="NPF_F_WMAX_BSCP_SS_REPORT_13_PUSC_GR_PH_AV" brief="The option number 13 - Physical CINR report on specified major groups of specified PUSC permutation zone with specified averaging parameter"></field>
				<field name="NPF_F_WMAX_BSCP_SS_REPORT_14_GEN_CINR" brief="The option number 14 - Generic Physical CINR report (REP- only)"></field>
				<field name="NPF_F_WMAX_BSCP_SS_REPORT_15_GEN_RSSI" brief="The option number 15 - Generic RSSI report (REP- only)"></field>
				<field name="NPF_F_WMAX_BSCP_SS_REPORT_16_NRM_SUBCH" brief="The option number 16 - Physical CINR report on Normal Sub-channel (REP- only)"></field>
				<field name="NPF_F_WMAX_BSCP_SS_REPORT_17_BND_AMC" brief="The option number 17 - Physical CINR report on Band AMC (REP- only)"></field>
				<field name="NPF_F_WMAX_BSCP_SS_REPORT_18_SFT_CH" brief="The option number 18 - Physical CINR report on Safety Channel (REP- only)"></field>
				<field name="NPF_F_WMAX_BSCP_SS_REPORT_19_SND_CH" brief="The option number 19 - Physical SINR report on Sounding Channel (REP- only)"></field>
				<field name="NPF_F_WMAX_BSCP_SS_REPORT_20_BSC_DFS" brief="The option number 20 - Basic DFS report (REP- only)"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpCqiMimoFeedback_t" name="e9">
				<descr>
                          Type of requested MIMO and permutation mode feedback.
                                </descr>
				<field name="NPF_F_WMAX_BSCP_CQI_MIMO_FEEDBACK_NONE" value="0" brief="No MIMO feedback"></field>
				<field name="NPF_F_WMAX_BSCP_CQI_MIMO_FEEDBACK_4" brief="MIMO feedback every 4th allocation"></field>
				<field name="NPF_F_WMAX_BSCP_CQI_MIMO_FEEDBACK_8" brief="MIMO feedback every 8th allocation"></field>
				<field name="NPF_F_WMAX_BSCP_CQI_MIMO_FEEDBACK_18" brief="MIMO feedback every 16th allocation"></field>
			</enum>
			
			
			<struct type="NPF_F_wmaxBscpSsReportOption01NoRep_t" 	brief="Parameters for the option number 1 - no CINR report configuration.">
				<field type="NPF_F_wmaxBscpCqiMimoFeedback_t" name="mimo"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsReportOption02PrEf_t" brief="Parameters for the option number 2 - Effective CINR report on preamble" >
				<field type="NPF_uint8_t" name="freqReuse" brief="Frequency reuse factor: '0' means 'factor= 1', while '1' means 'factor= 3'"></field>
				<field type="NPF_F_wmaxBscpCqiMimoFeedback_t" name="mimo" brief="MIMO and permutation mode feedback"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsReportOption03PrPh_t" brief="Parameters for the option number 3 - Physical CINR report on preamble">
				<field type="NPF_uint8_t" name="freqReuse" brief="Frequency reuse factor: '0' means 'factor= 1', while '1' means 'factor= 3'"></field>
				<field type="NPF_F_wmaxBscpCqiMimoFeedback_t" name="mimo" brief="MIMO and permutation mode feedback"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsReportOption04PrPhAv_t" brief="Parameters for the option number 4 - Physical CINR report on preamble with specified averaging parameter">
				<field type="NPF_uint8_t" name="freqReuse" brief="Frequency reuse factor: '0' means 'factor= 1', while '1' means 'factor= 3'"></field>
				<field type="NPF_uint8_t" name="averParam" brief="Averaging parameter. The value is specified in multiples of 1/16 in the range of [1/16..16/16]"></field>
				<field type="NPF_F_wmaxBscpCqiMimoFeedback_t" name="mimo" brief="MIMO and permutation mode feedback"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsReportOption05NonPuscEf_t" brief="Parameters for the option number 5 - Effective CINR report on specified non-PUSC permutation zone">
				<field type="NPF_F_wmaxBscpZoneHandle_t" name="zoneId" brief="The handle to the non-PUSC zone the report pertains to"></field>
				<field type="NPF_uint8_t" name="measurementType" brief="The type of requested measurement: 0 - from pilot sub-carriers; 1 - from data sub-carriers"></field>
				<field type="NPF_F_wmaxBscpCqiMimoFeedback_t" name="mimo" brief="MIMO and permutation mode feedback"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsReportOption06NonPuscPh"  brief="Parameters for the option number 6 - Physical CINR report on specified non-PUSC permutation zone">
				<field type="NPF_F_wmaxBscpZoneHandle_t" name="zoneId" brief="The handle to the non-PUSC zone the report pertains to"></field>
				<field type="NPF_uint8_t" name="measurementType" brief="The type of requested measurement: 0 - from pilot sub-carriers; 1 - from data sub-carriers"></field>
				<field type="NPF_F_wmaxBscpCqiMimoFeedback_t" name="mimo" brief="MIMO and permutation mode feedback"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsReportOption07NonPuscPhAv" brief="Parameters for the option number 7 - Physical CINR report on specified non-PUSC permutation zone with specified averaging parameter">
				<field type="NPF_F_wmaxBscpZoneHandle_t" name="zoneId" brief="The handle to the non-PUSC zone the report pertains to"></field>
				<field type="NPF_uint8_t" name="measurementType" brief="The type of requested measurement: 0 - from pilot sub-carriers; 1 - from data sub-carriers"></field>
				<field type="NPF_uint8_t" name="averParam" brief="Averaging parameter. The value is specified in multiples of 1/16 in the range of [1/16..16/16]"></field>
				<field type="NPF_F_wmaxBscpCqiMimoFeedback_t" name="mimo" brief="MIMO and permutation mode feedback"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsReportOption08PuscEf_t" brief="Parameters for the option number 8 - Effective CINR report on specified PUSC permutation zone">
				<field type="NPF_F_wmaxBscpZoneHandle_t" name="zoneId" brief="The handle to the PUSC zone the report pertains to"></field>
				<field type="NPF_uint8_t" name="measurementType" brief="The type of requested measurement: 0 - from pilot sub-carriers; 1 - from data sub-carriers"></field>
				<field type="NPF_F_wmaxBscpCqiMimoFeedback_t" name="mimo" brief="MIMO and permutation mode feedback"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsReportOption09PuscGrEf_t" brief="Parameters for the option number 9 - Effective CINR report on specified major groups of specified PUSC permutation zone">
				<field type="NPF_F_wmaxBscpZoneHandle_t" name="zoneId" brief="The handle to the PUSC zone the report pertains to"></field>
				<field type="NPF_uint8_t" name="majorGrpBitmap" brief="Reported CINR shall only apply to the sub-channels of PUSC major groups for which the corresponding bit is set"></field>
				<field type="NPF_uint8_t" name="measurementType" brief="The type of requested measurement: 0 - from pilot sub-carriers; 1 - from data sub-carriers"></field>
				<field type="NPF_F_wmaxBscpCqiMimoFeedback_t" name="mimo" brief="MIMO and permutation mode feedback"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsReportOption10PuscPh_t" brief="Parameters for the option number 10 - Physical CINR report on specified PUSC permutation zone">
				<field type="NPF_F_wmaxBscpZoneHandle_t" name="zoneId" brief="The handle to the PUSC zone the report pertains to"></field>
				<field type="NPF_uint8_t" name="measurementType" brief="The type of requested measurement: 0 - from pilot sub-carriers; 1 - from data sub-carriers"></field>
				<field type="NPF_F_wmaxBscpCqiMimoFeedback_t" name="mimo" brief="MIMO and permutation mode feedback"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsReportOption11PuscGrPh_t" brief="Parameters for the option number 11 - Physical CINR report on specified major groups of specified PUSC permutation zone" >
				<field type="NPF_F_wmaxBscpZoneHandle_t" name="zoneId" brief="The handle to the PUSC zone the report pertains to"></field>
				<field type="NPF_uint8_t" name="majorGrpBitmap" brief="Reported CINR shall only apply to the sub-channels of PUSC major groups for which the corresponding bit is set"></field>
				<field type="NPF_uint8_t" name="measurementType" brief="The type of requested measurement: 0 - from pilot sub-carriers; 1 - from data sub-carriers"></field>
				<field type="NPF_F_wmaxBscpCqiMimoFeedback_t" name="mimo" brief="MIMO and permutation mode feedback"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsReportOption12PuscPhAv_t" brief="Parameters for the option number 12 - Physical CINR report on specified PUSC permutation zone with specified averaging parameter" >
				<field type="NPF_F_wmaxBscpZoneHandle_t" name="zoneId" brief="The handle to the PUSC zone the report pertains to"></field>
				<field type="NPF_uint8_t" name="measurementType" brief="The type of requested measurement: 0 - from pilot sub-carriers; 1 - from data sub-carriers"></field>
				<field type="NPF_uint8_t" name="averParam" brief="Averaging parameter. The value is specified in multiples of 1/16 in the range of [1/16..16/16]"></field>
				<field type="NPF_F_wmaxBscpCqiMimoFeedback_t" name="mimo" brief="MIMO and permutation mode feedback"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsReportOption13PuscGrPhAv_t" brief="Parameters for the option number 13 - Physical CINR report on specified major groups of specified PUSC permutation zone with specified averaging parameter">
				<field type="NPF_F_wmaxBscpZoneHandle_t" name="zoneId" brief="The handle to the PUSC zone the report pertains to"></field>
				<field type="NPF_uint8_t" name="majorGrpBitmap" brief="Reported CINR shall only apply to the sub-channels of PUSC major groups for which the corresponding bit is set"></field>
				<field type="NPF_uint8_t" name="measurementType" brief="The type of requested measurement: 0 - from pilot sub-carriers; 1 - from data sub-carriers"></field>
				<field type="NPF_uint8_t" name="averParam" brief="Averaging parameter. The value is specified in multiples of 1/16 in the range of [1/16..16/16]"></field>
				<field type="NPF_F_wmaxBscpCqiMimoFeedback_t" name="mimo" brief="MIMO and permutation mode feedback"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsReportOption14GenCinr_t" brief="Parameters for the option number 14 - Generic Physical CINR report (REP- only)">
				<field type="NPF_uint8_t" name="averParam" brief="Averaging parameter. The value is specified in multiples of 1/32 in the range of [1/32..16/32]"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsReportOption15GenRssi_t" brief="Parameters for the option number 15 - Generic RSSI report (REP- only)">
				<field type="NPF_uint8_t" name="averParam" brief="Averaging parameter. The value is specified in multiples of 1/32 in the range of [1/32..16/32]"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsReportOption16NrmSubch_t" brief="Parameters for the option number 16 - Physical CINR report on Normal Sub-channel (REP- only)" >
				<field type="NPF_uint8_t" name="reserved" brief="Reserved"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsReportOption17BndAmc_t" brief="Parameters for the option number 17 - Physical CINR report on Band AMC (REP- only)" >
				<field type="NPF_uint8_t" name="reserved" brief="Reserved"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsReportOption18SftCh_t" brief="Parameters for the option number 18 - Physical CINR report on Safety Channel (REP- only)">
				<field type="NPF_uint8_t" name="reserved" brief="Reserved"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsReportOption19SndCh_t" brief="Parameters for the option number 19 - Physical SINR report on Sounding Channel (REP- only)">
				<field type="NPF_uint8_t" name="reserved" brief="Reserved"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsReportOption20BscDfs_t" brief="Parameters for the option number 20 - Basic DFS report (REP- only)" >
				<field type="NPF_uint16_t" name="physicalChannelNum" brief="The physical channel number for which the report is requested"></field>
			</struct>
			
							
				

			<struct type="NPF_F_wmaxBscpSsReportOptionSpecificParams_t" brief="SS Report option-specific parameters">
				<selectunion type="NPF_F_wmaxBscpSsUnion1_t" name="u">
					<selectfield type="NPF_F_wmaxBscpSsReportType_t" name="optionType" brief="Type of the requested feedback.">
					</selectfield>
					<field type="NPF_F_wmaxBscpSsReportOption01NoRep_t" name="option01NoRep">
						<descr>Option #1 specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_SS_REPORT_1_NO_REP</selector>
					</field>
					<field type="NPF_F_wmaxBscpSsReportOption02PrEf_t" name="option02PrEf">
						<descr>Option #2 specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_SS_REPORT_2_PR_EF</selector>
					</field>
					<field type="NPF_F_wmaxBscpSsReportOption03PrPh_t" name="option03PrPh">
						<descr>Option #3 specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_SS_REPORT_3_PR_PH</selector>
					</field>
					<field type="NPF_F_wmaxBscpSsReportOption04PrPhAv_t" name="option04PrPhAv">
						<descr>Option #4 specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_SS_REPORT_4_PR_PH_AV</selector>
					</field>
					<field type="NPF_F_wmaxBscpSsReportOption05NonPuscEf_t" name="option05NonPuscEf">
						<descr>Option #5 specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_SS_REPORT_5_NON_PUSC_EF</selector>
					</field>
					<field type="NPF_F_wmaxBscpSsReportOption06NonPuscPh" name="option06NonPuscPh">
						<descr>Option #6 specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_SS_REPORT_6_NON_PUSC_PH</selector>
					</field>
					<field type="NPF_F_wmaxBscpSsReportOption07NonPuscPhAv" name="option07NonPuscPhAv">
						<descr>Option #7 specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_SS_REPORT_7_NON_PUSC_PH_AV</selector>
					</field>
					<field type="NPF_F_wmaxBscpSsReportOption08PuscEf_t" name="option08PuscEf">
						<descr>Option #8 specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_SS_REPORT_8_PUSC_EF</selector>
					</field>
					<field type="NPF_F_wmaxBscpSsReportOption09PuscGrEf_t" name="option09PuscGrEf">
						<descr>Option #9 specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_SS_REPORT_9_PUSC_GR_EF</selector>
					</field>
					<field type="NPF_F_wmaxBscpSsReportOption10PuscPh_t" name="option10PuscPh">
						<descr>Option #10 specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_SS_REPORT_10_PUSC_PH</selector>
					</field>
					<field type="NPF_F_wmaxBscpSsReportOption11PuscGrPh_t" name="option11PuscGrPh">
						<descr>Option #11 specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_SS_REPORT_11_PUSC_GR_PH</selector>
					</field>
					<field type="NPF_F_wmaxBscpSsReportOption12PuscPhAv_t" name="option12PuscPhAv">
						<descr>Option #12 specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_SS_REPORT_12_PUSC_PH_AV</selector>
					</field>
					<field type="NPF_F_wmaxBscpSsReportOption13PuscGrPhAv_t" name="option13PuscGrPhAv">
						<descr>Option #13 specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_SS_REPORT_13_PUSC_GR_PH_AV</selector>
					</field>
					<field type="NPF_F_wmaxBscpSsReportOption14GenCinr_t" name="option14GenCinr">
						<descr>Option #14 specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_SS_REPORT_14_GEN_CINR</selector>
					</field>
					<field type="NPF_F_wmaxBscpSsReportOption15GenRssi_t" name="option15GenRssi">
						<descr>Option #15 specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_SS_REPORT_15_GEN_RSSI</selector>
					</field>
					<field type="NPF_F_wmaxBscpSsReportOption16NrmSubch_t" name="option16NrmSubch">
						<descr>Option #16 specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_SS_REPORT_16_NRM_SUBCH</selector>
					</field>
					<field type="NPF_F_wmaxBscpSsReportOption17BndAmc_t" name="option17BndAmc">
						<descr>Option #17 specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_SS_REPORT_17_BND_AMC</selector>
					</field>
					<field type="NPF_F_wmaxBscpSsReportOption18SftCh_t" name="option18SftCh">
						<descr>Option #18 specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_SS_REPORT_18_SFT_CH</selector>
					</field>
					<field type="NPF_F_wmaxBscpSsReportOption19SndCh_t" name="option19SndCh">
						<descr>Option #19 specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_SS_REPORT_19_SND_CH</selector>
					</field>
					<field type="NPF_F_wmaxBscpSsReportOption20BscDfs_t" name="option20BscDfs">
						<descr>Option #20 specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_SS_REPORT_20_BSC_DFS</selector>
					</field>
				</selectunion>
			</struct>
			<enum type="NPF_F_wmaxBscpCqiFrequency_t" name="e10">
				<descr>
          The requested CQI feedback frequency.
        </descr>
				<field name="NPF_F_WMAX_BSCP_CQI_FREQUENCY_1" value="0" brief="Feedback every frame"></field>
				<field name="NPF_F_WMAX_BSCP_CQI_FREQUENCY_2" brief="Feedback every second frame"></field>
				<field name="NPF_F_WMAX_BSCP_CQI_FREQUENCY_4" brief="Feedback every 4th frame"></field>
				<field name="NPF_F_WMAX_BSCP_CQI_FREQUENCY_8" brief="Feedback every 8th frame"></field>
			</enum>
			
			<struct type="NPF_F_wmaxBscpSsCqichConfig_t" brief="Configuration of reports using CQICH">
				<field name="frequency" type="NPF_F_wmaxBscpCqiFrequency_t">
					<descr>
            Required frequency of the SS feedback arriving via CQICH. It can be one of the following:
          </descr>
					<descr>
            -	every frame
          </descr>
					<descr>
            -	every 2nd frame
          </descr>
					<descr>
            -	every 4th frame
          </descr>
						<descr>
            -	every 8th frame
          </descr>
        </field>			
			</struct>
			<struct type="NPF_F_wmaxBscpSsReportsConfig_t" brief="Configuration of reports REP-REQ/RSP messages">
				<field name="frequency" type="NPF_uint16_t" brief="Feedback frequency in frames (valid range from 10 to 1000 frames equivalent to 50ms to 5s)"></field>
			</struct>
			<struct type="NPF_F_wimaxBscpSsPowerRepConfig_t" brief="Power reports configuration">
				<field name="maxTimeBetweenReports" type="NPF_uint32_t" brief="Maximum time (in 100ms units) between power reports. Supported value from 1 (100ms) to 300 (30s)"></field>
				<field name="maxCorrectionsBetweenReports" type="NPF_uint32_t" brief="Maximum number of corrections (burst profile or power changes) between power reports. Supported value from 1 to 100."></field>
			</struct>
      <struct type="NPF_F_wmaxBscpSsFeedbackConfig_t" brief="Configuration of reports requested from the SS">
        <descr>
          This structures configures how DL signal reports will be requested from the subscriber, what types of reports will be expected and how often.
        </descr>
        <selectunion type="NPF_F_wmaxBscpSsFeedbackConfigUnion_t" name="u">
          <selectfield name="method" type="NPF_F_wmaxBscpSsFeedbackMethod_t" brief="Feedbeck access method"></selectfield>
          <field name="cqichConfig" type="NPF_F_wmaxBscpSsCqichConfig_t" brief="CQICH-specific configuration">
            <selector>NPF_F_WMAX_BSCP_SS_FEEDBACK_CQICH</selector>
          </field>
          <field name="reportConfig" type="NPF_F_wmaxBscpSsReportsConfig_t" brief="REP-REQ/RSP-specific configuration">
            <selector>NPF_F_WMAX_BSCP_SS_FEEDBACK_MESSAGES</selector>
          </field>
        </selectunion>
        <field name="reportOptions" type="NPF_F_wmaxBscpSsReportOptionSpecificParams_t" brief="Report option-specific parameters"></field>
        <field name="powerReportConfig" type="NPF_F_wimaxBscpSsPowerRepConfig_t" brief="Power reports configuration"></field>
      </struct>
			<struct type="NPF_F_wmaxBscpSsCapChangeArgs_t" brief="CAP Association with SS Change Arguments">
				<descr>
					This structure defines the arguments to NPF_F_wmaxBscpSsCapChange.
					The ssHandle parameter specifies the subscriber handle and ulCapHandle and ulCapHandle specify the new CAPs that should be used.
					If ulCapHandle or ulCapHandle is NULL, the default CAPs will be used instead.
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle."></field>
				<field name="ulCapHandle" type="NPF_F_wmaxBscpMacCapHandle_t" brief="Uplink CAP Handle"></field>
				<field name="dlCapHandle" type="NPF_F_wmaxBscpMacCapHandle_t" brief="Downlink CAP Handle"></field>
				<field name="reportsConfig" type="NPF_F_wmaxBscpSsFeedbackConfig_t" brief="Configuration of the signal feedbacks generated by this SS"></field>
			</struct>
		</section>
		<section name="Subscriber Functions">
			<descr>
				This section defines the interface to manage Subscriber Stations.
			</descr>
			<func name="NPF_F_wmaxBscpSsEapTransfer" type="NPF_error_t" brief="Send EAP Request" xdrid="RPC_WMAX_BSCP_PKM_EAP_XFER">
				<descr>
					This function sends an EAP request encapsulated in a PKM-RSP message. 
					It is used durig EAP (or double-EAP) authorization or re-authorization procedure.
				</descr>
				<see>NPF_F_WMAX_BSCP_EVENT_PKMV2_EAP_TRANSFER</see>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpSsEapTransferArgs_t *" name="authRequestArgs">
					<descr>
						Send EAP Request Arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_EAP_XFER.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpSsAuthorize" type="NPF_error_t" brief="Authorize Subscriber" xdrid="RPC_WMAX_BSCP_SS_AUTHORIZE">
				<descr>
					This function authorizes a subscriber station and provides the keying materials
					(key(s) used by a given authorization method).
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpSsAuthorizeArgs_t *" name="authorizeArgs">
					<descr>
						Authorize Subscriber Arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
					</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_AUTHORIZE.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpSsReAuthorize" type="NPF_error_t" brief="Reauthorize Subscriber" xdrid="RPC_WMAX_BSCP_SS_REAUTHORIZE">
				<descr>
					This function reauthorizes a subscriber station and provides the keying materials
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpSsReAuthorizeArgs_t *" name="reauthorizeArgs">
					<descr>
						Reauthorize Subscriber Arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
					</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_REAUTHORIZE.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpSsDreg" type="NPF_error_t" brief="Deregister Subscriber" xdrid="RPC_WMAX_BSCP_SS_DREG">
				<descr>
					This function deregisters a subscriber station, temporary suspend/resume operations of the subscriber station
					or force subscriber station reset. Note, that when BS supports idle mode, idle mode request should be triggered using 
					NPF_F_wimaxBscpMobSsIdleReq() function.					
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpSsDregArgs_t *" name="dregArgs">
					<descr>
						Deregister Subscriber Arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_DREG.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpSsDelete" type="NPF_error_t" brief="Delete Subscriber" xdrid="RPC_WMAX_BSCP_SS_DEL">
				<descr>
					This function deletes a subscriber station resources and triggers the report of an SS_STATE(DELETED, APP_RELEASED) event.
					When the subscriber is currently attached to the BS, it should be previously deregistered using 
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpSsDeleteArgs_t *" name="deleteArgs">
					<descr>
						Delete Subscriber Arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_DEL.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpSsStatsConfig" type="NPF_error_t" brief="Configure Subscriber Statistics" xdrid="RPC_WMAX_BSCP_SS_STATS_CFG">
				<descr>
					This function configures statistics collected for a specified subscriber. The configuration of the statistics is valid 
					in the normal statistic mode and in the radio trace mode.
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpSsStatsConfigArgs_t *" name="statsConfigArgs">
					<descr>
						Subscriber Statistics Config Arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_SVC_FLOW_HANDLE">
						<descr>
							The service flow handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_STATS_CFG.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpSsStatsGet" type="NPF_error_t" brief="Get Subscriber Statistics" xdrid="RPC_WMAX_BSCP_SS_STATS_GET">
				<descr>
					This function requests (and optionally resets) subscriber statistics
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpSsStatsGetArgs_t *" name="statsGetArgs">
					<descr>
						Get Subscriber Statistics Arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
					</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_STATS_GET.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpSsCapChange" type="NPF_error_t" brief="Change CAP Association" xdrid="RPC_WMAX_BSCP_SS_CAP_CHG">
				<descr>
					This function requests change of the CAPs used to adapt communication parameters of the link to the specified SS when radio conditions changes.
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpSsCapChangeArgs_t *" name="capChangeArgs">
					<descr>
						Change CAP association parameters.
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
					</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_CAP_CHG.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
		</section>
	</section>
	<section name="Service Flows">
		<descr>
			This section defines the interface for managing service flows.
		</descr>
		<section name="Service Flow Data Types">
			<define brief="Service Flow QOS Profile Type Mask">
				<descr>
					These mask bits are used to construct NPF_F_wmaxBscpQosProfileSpec_t.parmSetType.
				</descr>
				<descr>001 - Apply to provisioned set only.</descr>
				<descr>011 - Apply to provisioned and admitted sets, perform admission control.</descr>
				<descr>101 - Apply to provisioned and active sets, perform admission control and activate this service flow.</descr>
				<descr>111 - Apply to provisioned, admitted and active sets, perform admission control and activate this service flow.</descr>
				<descr>000 - Set active and admitted sets to NULL.</descr>
				<descr>010 - Apply to admitted set and perform admission control.</descr>
				<descr>100 - Check against admitted set in separate service flow encoding, apply to active set, perform admission control if needed and activate this service flow.</descr>
				<descr>110 - Apply to admitted and active sets, perform admission control and activate this service flow.</descr>
				<field name="NPF_F_WMAX_BSCP_QOS_PROFILE_MASK_PROVISIONED" brief="Apply to PROVISIONED Set">
					<value>(0x01ull &lt;&lt; 0)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_QOS_PROFILE_MASK_ADMITTED" brief="Apply to ADMITTED Set">
					<value>(0x01ull &lt;&lt; 1)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_QOS_PROFILE_MASK_ACTIVE" brief="Apply to ACTIVE Set">
					<value>(0x01ull &lt;&lt; 2)</value>
				</field>
			</define>
			<define brief="CS Rule Mask">
				<descr>
					These bits can be used to construct NPF_F_wmaxBscpCsRuleIpv4_t.ruleMask or NPF_F_wmaxBscpCsRuleIpv6_t.ruleMask.
				</descr>
				<field name="NPF_F_WMAX_BSCP_CS_RULE_MASK_SRC_ADDR" brief="srcAddr and srcMask fields contain valid data">
					<value>(0x01ull &lt;&lt; 0)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_CS_RULE_MASK_DST_ADDR" brief="dstAddr and dstMask fields contain valid data">
					<value>(0x01ull &lt;&lt; 1)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_CS_RULE_MASK_SRC_PORT" brief="srcPortMin and srcPortMax fields contain valid data">
					<value>(0x01ull &lt;&lt; 2)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_CS_RULE_MASK_DST_PORT" brief="dstPortMin and dstPortMax fields contain valid data">
					<value>(0x01ull &lt;&lt; 3)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_CS_RULE_MASK_PROTOCOL" brief="protocol field contains valid data">
					<value>(0x01ull &lt;&lt; 4)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_CS_RULE_MASK_TOS" brief="tosMin, tosMax and tosMask fields contain valid data">
					<value>(0x01ull &lt;&lt; 5)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_CS_RULE_MASK_PHS_ID" brief="phsId field contains valid data">
					<value>(0x01ull &lt;&lt; 6)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_CS_RULE_ETH_SRC_ADDR" brief="macSrcAddr field contains valid data">
					<value>(0x01ull &lt;&lt; 7)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_CS_RULE_ETH_DST_ADDR" brief="macDstAddr field contains valid data">
					<value>(0x01ull &lt;&lt; 8)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_CS_RULE_ETH_TYPE" brief="etherType field contains valid data">
					<value>(0x01ull &lt;&lt; 9)</value>
				</field>
			</define>
			<enum type="NPF_F_wmaxBscpCsMode_t" brief="Convergence Sublayer Mode">
				<descr>
					This defines convergence sublayer layer modes
				</descr>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_NONE" brief="No CS"></field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_IPV4" brief="Packet, IPv4"></field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_IPV6" brief="Packet, IPv6"></field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_8023" brief="Packet, 802.3/Ethernet"></field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_8021Q" brief="Packet, 802.1Q VLAN"></field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_IPV4_8023" brief="Packet, IPv4 over 802.3/Ethernet"></field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_IPV6_8023" brief="Packet, IPv6 over 802.3/Ethernet"></field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_IPV4_8021Q" brief="Packet, IPv4 over 802.1Q VLAN"></field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_IPV6_8021Q" brief="Packet, IPv6 over 802.1Q VLAN"></field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_ATM" brief="ATM"></field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_8023_ROHC" brief="Packet, 802.3/Ethernet with header compression (ROHC)"></field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_8023_ECRTP" brief="Packet, 802.3/Ethernet with header compression (ECRTP)"></field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_IP_ROHC" brief="Packet, IP with header compression (ROHC)."></field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_IP_ECRTP" brief="Packet, IP with header compression (ECRTP)"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpCsRuleAction_t">
				<descr>
					CS Rule Action. This data structures define possible actions to be performed on CS rules 
					while a Service Flow is added or modified.  
				</descr>
				<see>NPF_F_wmaxBscpSvcFlowAdd</see>
				<see>NPF_F_wmaxBscpSvcFlowChange</see>
				<field name="NPF_F_WMAX_BSCP_CS_RULE_ACTION_ADD" brief="CS Rule Add."></field>
				<field name="NPF_F_WMAX_BSCP_CS_RULE_ACTION_CHG" brief="CS Rule Change. Use only to modify existing Service Flow."></field>
				<field name="NPF_F_WMAX_BSCP_CS_RULE_ACTION_DEL" brief="CS Rule Delete. Use only to modify existing Service Flow."></field>
			</enum>
			<enum type="NPF_F_wmaxBscpSvcFlowDsxCc_t" brief="Service Flow DSx-RSP Confirmation Code">
				<descr>
					This enum defines the DSx-RSP confirmation code values.
					Error codes are from IEEE 802.16-2004, Table 384.
				</descr>
				<field name="NPF_F_WMAX_BSCP_DSX_CC_OK" brief="OK/success"></field>
				<field name="NPF_F_WMAX_BSCP_DSX_CC_REJ_OTHER" brief="Unspecified Error"></field>
				<field name="NPF_F_WMAX_BSCP_DSX_CC_REJ_UNRECOGNIZED_CONFIG_SETTING" brief="Unrecognized configuration setting"></field>
				<field name="NPF_F_WMAX_BSCP_DSX_CC_REJ_TEMPORARY_RESOURCE" brief="reject-temporary or reject-resource"></field>
				<field name="NPF_F_WMAX_BSCP_DSX_CC_REJ_PERMANENT_ADMIN" brief="reject-permanent or reject-admin"></field>
				<field name="NPF_F_WMAX_BSCP_DSX_CC_REJ_NOT_OWNER" brief="reject-not-owner"></field>
				<field name="NPF_F_WMAX_BSCP_DSX_CC_REJ_SVC_FLOW_NOT_FOUND" brief="reject-service-flow-not-found"></field>
				<field name="NPF_F_WMAX_BSCP_DSX_CC_REJ_SVC_FLOW_EXISTS" brief="reject-service-flow-exists"></field>
				<field name="NPF_F_WMAX_BSCP_DSX_CC_REJ_REQUIRED_PARAMETER_NOT" brief="reject-required-parameter-not-present"></field>
				<field name="NPF_F_WMAX_BSCP_DSX_CC_REJ_HEADER_SUPPRESSION" brief="reject-header-suppression"></field>
				<field name="NPF_F_WMAX_BSCP_DSX_CC_REJ_UNKNOWN_TRANSACTION_ID" brief="reject-unknown-transaction-id"></field>
				<field name="NPF_F_WMAX_BSCP_DSX_CC_REJ_AUTHENTICATION_FAILURE" brief="reject-authentication-failure"></field>
				<field name="NPF_F_WMAX_BSCP_DSX_CC_REJ_ADD_ABORTED" brief="reject-add-aborted"></field>
				<field name="NPF_F_WMAX_BSCP_DSX_CC_REJ_EXCEEDED_DYNAMIC_SERVICE_LIMIT" brief="reject-exceeded-dynamic-service-limit"></field>
				<field name="NPF_F_WMAX_BSCP_DSX_CC_REJ_NOT_AUTHD_FOR_REQUESTED_SAID" brief="reject-not-authorized-for-the-requested-SAID"></field>
				<field name="NPF_F_WMAX_BSCP_DSX_CC_REJ_FAIL_TO_ESTABLISH_REQUESTED_SA" brief="reject-failed-to-establish-requested-SA"></field>
				<field name="NPF_F_WMAX_BSCP_DSX_CC_REJ_NOT_SUPPORTED_PARAMETER" brief="reject-not-supported-parameter"></field>
				<field name="NPF_F_WMAX_BSCP_DSX_CC_REJ_NOT_SUPPORTED_PARAMETER_VALUE" brief="reject-not-supported-parameter-value"></field>
			</enum>
			<enum type="NPF_F_wmaxBscpHarqType_t">
				<descr>
				HARQ Type.
				Identifies type of HARQ to be used.
				</descr>
				<field name="NPF_F_WMAX_BSCP_HARQ_CC" brief="Chase Combining HARQ."></field>
				<field name="NPF_F_WMAX_BSCP_HARQ_IR" brief="Incremental Redundancy HARQ."></field>
			</enum>
			<struct type="NPF_F_wmaxBscpHarqParms_t" name="" brief="Hybrid ARQ Parameters">
				<descr>
					This data structure defines HARQ-specific parameters used when defining service flows
				</descr>
				<see>NPF_F_wmaxBscpSvcFlowAddArgs_t</see>
				<field name="type" type="NPF_F_wmaxBscpHarqType_t" brief="HARQ Type"></field>
				<vector name="acids" type="NPF_uint8_t" brief="ACID to CID mapping">
					<descr>
                                        List of all ACIDs assigned to the connection.
                                    </descr>
					<length name="acidsNum" type="NPF_uint32_t" brief="Number of elements in the 'acids' table - the number of HARQ sub-channels to be used by this connection."></length>
				</vector>
				<field name="retransmitNum" type="NPF_uint8_t" brief="The maximum number of retransmissions."></field>
				<field name="pduSnExtendedSubheaderShort" type="NPF_boolean_t" brief="Indicates whether PDU SN Extended Subheader Short is supported."></field>
				<field name="pduSnExtendedSubheaderLong" type="NPF_boolean_t" brief="Indicates whether PDU SN Extended Subheader Long is supported."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpPhsRule_t" brief="PHS Rule">
				<descr>
					This data structure defined a single Packet Header Supression (PHS) rule used to supress/restore packet 
					headers. This data structure can be used for DL service flows (header suppresion) and UL service flows (restoring original headers).
				</descr>
				<field name="phsv" type="NPF_boolean_t" brief="PHSV - per packet verification">
					<descr>TRUE validate each packet against PHSF/PHSM, FALSE otherwise</descr>
				</field>
				<field name="phsf" type="NPF_F_wmaxBscpOctetString_t" brief="PHSF; pattern to be compressed."></field>
				<field name="phsm" type="NPF_F_wmaxBscpOctetString_t" brief="PHSM; mask of the compressed fields. 0 on bit x means that (x+1) byte of the suppression field should not be suppresed; 
						   1 on bit x means that (x+1) byte should be suppresed"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpCsRuleIpv4_t" brief="Convergence Sublayer rule for Packet IPv4 service flows">
				<descr>
				This structure defines the fields of an IPv4 classification rule.
				</descr>
				<field name="rulePriority" type="NPF_uint8_t" brief="The priority of this rule, determing the order of rules evaluation.
					 Since a certain packet may match several rules, the rule priority must be specified. 
					 A higher value indicates higher priority."></field>
				<field name="ruleMask" type="NPF_uint16_t" brief="Indicates which fields contains valid data. See: CS Rule Mask."></field>
				<field name="srcAddr" type="NPF_IPv4Address_t" brief="Source IP address"></field>
				<field name="srcMask" type="NPF_uint8_t" brief="Source IP address subnet mask (nbits starting from MSB)"></field>
				<field name="dstAddr" type="NPF_IPv4Address_t" brief="Destination IP address"></field>
				<field name="dstMask" type="NPF_uint8_t" brief="Destination IP address subnet mask (nbits starting from MSB)"></field>
				<field name="srcPortMin" type="NPF_uint16_t" brief="Source port minimum value"></field>
				<field name="srcPortMax" type="NPF_uint16_t" brief="Source port maximum value"></field>
				<field name="dstPortMin" type="NPF_uint16_t" brief="Destination port minimum value"></field>
				<field name="dstPortMax" type="NPF_uint16_t" brief="Destination port maximum value"></field>
				<field name="protocol" type="NPF_uint8_t" brief="Protocol number"></field>
				<field name="tosMin" type="NPF_uint8_t" brief="TOS - traffic class marker in IPv4 TOS field minimum value"></field>
				<field name="tosMax" type="NPF_uint8_t" brief="TOS - traffic class marker in IPv4 TOS field maximum value"></field>
				<field name="tosMask" type="NPF_uint8_t" brief="TOS - traffic class marker in IPv4 TOS field mask"></field>
				<field name="phsRule" type="NPF_F_wmaxBscpPhsRule_t" brief="PHS rule associated with this CS classification rule."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpCsRuleEthIpv4_t" brief="Convergence Sublayer rule for Packet IPv4 over 802.3/Ethernet service flows">
				<descr>
					This structure defines the fields of an IPv4 over 802.3/Ethernet classification rule.
				</descr>
				<field name="rulePriority" type="NPF_uint8_t" brief="The priority of this rule. Since a certain packet may match several rules, the rule priority must be specified."></field>
				<field name="ruleMask" type="NPF_uint16_t" brief="Indicates which fields contains valid data"></field>
				<field type="NPF_uint8_t" name="macSrcAddr" size="6" brief="Source Ethernet MAC address."></field>
				<field type="NPF_uint8_t" name="macDstAddr" size="6" brief="Destination Ethernet MAC address."></field>
				<field type="NPF_uint16_t" name="etherType" brief="Ethertype."></field>
				<field name="srcAddr" type="NPF_IPv4Address_t" brief="Source IP address"></field>
				<field name="srcMask" type="NPF_uint8_t" brief="Source IP address subnet mask (nbits starting from MSB)"></field>
				<field name="dstAddr" type="NPF_IPv4Address_t" brief="Destination IP address"></field>
				<field name="dstMask" type="NPF_uint8_t" brief="Destination IP address subnet mask (nbits starting from MSB)"></field>
				<field name="srcPortMin" type="NPF_uint16_t" brief="Source port minimum value"></field>
				<field name="srcPortMax" type="NPF_uint16_t" brief="Source port maximum value"></field>
				<field name="dstPortMin" type="NPF_uint16_t" brief="Destination port minimum value"></field>
				<field name="dstPortMax" type="NPF_uint16_t" brief="Destination port maximum value"></field>
				<field name="protocol" type="NPF_uint8_t" brief="Protocol number"></field>
				<field name="tosMin" type="NPF_uint8_t" brief="TOS - traffic class marker in IPv4 TOS field minimum value"></field>
				<field name="tosMax" type="NPF_uint8_t" brief="TOS - traffic class marker in IPv4 TOS field maximum value"></field>
				<field name="tosMask" type="NPF_uint8_t" brief="TOS - traffic class marker in IPv4 TOS field mask"></field>
				<field name="phsRule" type="NPF_F_wmaxBscpPhsRule_t" brief="PHS rule associated with this CS classification rule."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpCsRuleEth_t" brief="Convergence Sublayer rule for Packet I 802.3/Ethernet service flows">
				<descr>
					This structure defines the fields of a 802.3/Ethernet classification rule.
				</descr>
				<field name="rulePriority" type="NPF_uint8_t" brief="The priority of this rule. Since a certain packet may match several rules, the rule priority must be specified."></field>
				<field name="ruleMask" type="NPF_uint16_t" brief="Indicates which fields contains valid data"></field>
				<field type="NPF_uint8_t" name="macSrcAddr" size="6" brief="Source Ethernet MAC address."></field>
				<field type="NPF_uint8_t" name="macDstAddr" size="6" brief="Destination Ethernet MAC address."></field>
				<field type="NPF_uint16_t" name="etherType" brief="Ethertype."></field>
				<field name="phsRule" type="NPF_F_wmaxBscpPhsRule_t" brief="PHS rule associated with this CS classification rule."></field>
			</struct>
			<!-- Union of all CS Rule Types -->
			<struct type="NPF_F_wmaxBscpCsRule_t" brief="CS Rule">
				<descr>
					This structure contains one rule of the specified type.
				</descr>
				<selectunion type="NPF_F_wmaxBscpCsRuleUnion_t" name="u">
					<selectfield name="csMode" type="NPF_F_wmaxBscpCsMode_t" brief="Service Flow Convergence Sublayer Mode."></selectfield>
					<field name="ipv4Rule" type="NPF_F_wmaxBscpCsRuleIpv4_t" brief="IPv4 CS rule">
						<selector>NPF_F_WMAX_BSCP_CS_MODE_IPV4</selector>
					</field>
					<field name="ipv4EthRule" type="NPF_F_wmaxBscpCsRuleEthIpv4_t" brief="IPv4 over 802.3/Ethernet CS rule">
						<selector>NPF_F_WMAX_BSCP_CS_MODE_IPV4_8023</selector>
					</field>
					<field name="ethRule" type="NPF_F_wmaxBscpCsRuleEth_t" brief="802.3/Ethernet CS rule">
						<selector>NPF_F_WMAX_BSCP_CS_MODE_8023</selector>
					</field>
					<field name="unsupported" type="NPF_uint32_t" brief="Unsupported CS Rules.">
						<descr></descr>
						<selector>NPF_F_WMAX_BSCP_CS_MODE_NONE</selector>
						<selector>NPF_F_WMAX_BSCP_CS_MODE_IPV6</selector>
						<selector>NPF_F_WMAX_BSCP_CS_MODE_8021Q</selector>
						<selector>NPF_F_WMAX_BSCP_CS_MODE_IPV6_8023</selector>
						<selector>NPF_F_WMAX_BSCP_CS_MODE_IPV4_8021Q</selector>
						<selector>NPF_F_WMAX_BSCP_CS_MODE_IPV6_8021Q</selector>
						<selector>NPF_F_WMAX_BSCP_CS_MODE_ATM</selector>
						<selector>NPF_F_WMAX_BSCP_CS_MODE_8023_ROHC</selector>
						<selector>NPF_F_WMAX_BSCP_CS_MODE_8023_ECRTP</selector>
						<selector>NPF_F_WMAX_BSCP_CS_MODE_IP_ROHC</selector>
						<selector>NPF_F_WMAX_BSCP_CS_MODE_IP_ECRTP</selector>
					</field>
				</selectunion>
			</struct>
			<struct type="NPF_F_wmaxBscpCsRuleCommand_t" brief="CS Rule Command">
				<descr>
				This structure includes a DSC action code, a Convergence Sublayer rule and/or a Convergence Sublayer rule handle.
				If action specified is ADD, a csRule must be provided but csRuleHandle will be ignored. NB: This is the only permitted action for NPF_F_wmaxBscpSvcFlowAdd().
				If action specified is CHG, csRule and csRuleHandle must be provided.
				If action specified is DEL, a csRuleHandle must be provided but csRule will be ignored.
				</descr>
				<field name="csRuleAction" type="NPF_F_wmaxBscpCsRuleAction_t" brief="Specifies CS rule action. NPF_F_wmaxBscpSvcFlowAdd: ADD, CHG or DEL CS rule, NPF_F_wmaxBscpSvcFlowAdd: ignored"></field>
				<field name="csRule" type="NPF_F_wmaxBscpCsRule_t" brief="CS Rule. Only required if csRuleAction is ADD or CHG"></field>
				<field name="csRuleHandle" type="NPF_F_wmaxBscpCsRuleHandle_t" brief="CS Rule Handle.  Only required if csRuleAction is CHG or DEL."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpCsRuleCommandList_t" brief="CS Rule Command List">
				<vector name="csRuleCommands" type="NPF_F_wmaxBscpCsRuleCommand_t" brief="List of CS Rule Commands">
					<descr>
						Contains one or more CS Rule Commands.
					</descr>
					<length name="csRuleCommandsNum" type="NPF_uint32_t" brief="Number of CS Rule Commands"></length>
				</vector>
			</struct>
			<struct type="NPF_F_wmaxBscpCsRuleHandleList_t" brief="CS Rule Handle List">
				<vector name="csRuleHandles" type="NPF_F_wmaxBscpCsRuleHandle_t" brief="List of CS Rule Handles">
					<descr>
						Contains a list of one or more Convergence Sublayer rule handles.
					</descr>
					<length name="csRuleHandlesNum" type="NPF_uint32_t" brief="Number of CS Rules Handles"></length>
				</vector>
			</struct>
			<struct type="NPF_F_wmaxBscpSvcFlowAddArgs_t" brief="Add Service Flow Arguments">
				<descr>
					This structure defines parameters required to add a new service flow.
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber handle"></field>
				<field name="sfId" type="NPF_uint32_t" brief="Specifies the SFID to be used with this service flow."></field>
				<field name="flowId" type="NPF_uint32_t" brief="Specifies the flow ID used to bind UL service flows with ASN tunnels; ignored for DL service flows"></field>
				<field name="caId" type="NPF_uint32_t" brief="Specifies a connection association ID used to bind service flows into UL/DL pairs.  This is an optional facility used to map an UL flow to a corresponding DL flow; can be used for routing DHCP replies to a particular connection"></field>
				<field name="serviceDirection" type="NPF_F_wmaxBscpServiceDirection_t" brief="Specifies the service flow direction (UL or DL)"></field>
				<field name="serviceType" type="NPF_F_wmaxBscpServiceType_t" brief="Specifies the service flow data delivery service."></field>
				<field name="serviceParms" type="NPF_F_wmaxBscpServiceParms_t" brief="Specifies data delivery service parameters"></field>
				<field name="qosProfileSpecList" type="NPF_F_wmaxBscpQosProfileSpecList_t" brief="Specifies a set of QOS profile specifications"></field>
				<field name="encryptionEnable" type="NPF_boolean_t" brief="Specifies whether to enable encryption for this service flow"></field>
				<field name="saHandle" type="NPF_F_wmaxBscpSaHandle_t" brief="The security association onto which the service flow being set up will be mapped. Value 0 implies no security association."></field>
				<field name="arqEnable" type="NPF_boolean_t" brief="false = no ARQ, true = ARQ"></field>
				<field name="arqParms" type="NPF_F_wmaxBscpArqParms_t" brief="(if arqEnable == true) --&gt; ARQ related parameters"></field>
				<field name="harqEnable" type="NPF_boolean_t" brief="Specifies whether to enable Hybrid ARQ for a service flow"></field>
				<field name="harqParms" type="NPF_F_wmaxBscpHarqParms_t" brief="HARQ-specific configuration; valid if HARQ state = ON only."></field>
				<field name="pagingEnable" type="NPF_boolean_t" brief="true = paging may be generated by this service flow, false = paging not generated"></field>
				<field name="csMode" type="NPF_F_wmaxBscpCsMode_t" brief="Specifies which convergence sublayer to use. NB: All convergence sublayer rules for a single service flow must use the same CS mode"></field>
				<field name="csRules" type="NPF_F_wmaxBscpCsRuleCommandList_t" brief="Specifies a list of CS rules; each with optional PHS rule"></field>
				<field name="delayHo" type="NPF_boolean_t">
					<descr>
						For DL service flows: true - delay handover when there are packets that belongs to this service flows queued for DL transmission; false - do not delay handover.
						Note, that decision about possible delayed handover is based on MAC instance configuration by NPF_F_wimaxBscpMacAdd() and handover request command 
						NPF_F_wmaxBscpMobSsHo().
						For UL service flows - always ignored. 
					</descr>
				</field>
			</struct>
			<struct type="NPF_F_wmaxBscpSvcFlowAddResponseArgs_t" brief="Add Service Flow Response Arguments">
				<descr>
					Asynchronous response for NPF_F_wmaxBscpSvcFlowAdd.
				</descr>
				<see>NPF_F_wmaxBscpSvcFlowAdd</see>
				<field name="svcFlowHandle" type="NPF_F_wmaxBscpSvcFlowHandle_t" brief="Service flow handle"></field>
				<field name="cid" type="NPF_uint16_t" brief="CID for the created transport connection (only for Service Flows in active state)."></field>
				<field name="dsaCc" type="NPF_F_wmaxBscpSvcFlowDsxCc_t" brief="Condition code from DSA-RSP"></field>
				<field name="csRuleHandleList" type="NPF_F_wmaxBscpCsRuleHandleList_t" brief="List of newly created CS rule handles"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpQosUpdateParms_t" brief="QoS Update Parameters">
				<descr>
					This structure defines new QoS parameters for existing service flow.
					All QoS parameters (changed and unchanged) should be specified
					For active service flows, when a set of active parameters is not specified it means that this service flow should
					be deactivated. 
					
				</descr>
				<field name="valid" type="NPF_boolean_t" brief="true - a new  set of QOS parameters is valid; false - QoS parameters unchanged"></field>
				<field name="qosUpdateProfileSpecList" type="NPF_F_wmaxBscpQosProfileSpecList_t" brief="Specifies a new set of QoS parameters"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSvcFlowChgArgs_t" brief="Change Service Flow Arguments">
				<descr>
					This structure defines parameters allowed to change for an active service flow.
				</descr>
				<field name="svcFlowHandle" type="NPF_F_wmaxBscpSvcFlowHandle_t" brief="Specifies which service flow to change"></field>
				<field name="arqUpdateParms" type="NPF_F_wmaxBscpArqUpdateParms_t" brief="(if NPF_F_wmaxBscpSvcFlowAddArgs_t.svcFlowParms.arqEnable == true) --&gt; ARQ related parameters that can be updated"></field>
				<field name="qosUpdateParms" type="NPF_F_wmaxBscpQosUpdateParms_t" brief="Specifies changes in QoS parameters"></field>
				<field name="csRules" type="NPF_F_wmaxBscpCsRuleCommandList_t" brief="Specifies a list of actions to take when operating on CS rules.  Rules may be added, replaced or deleted"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSvcFlowChgResponseArgs_t" brief="Change Service Flow Response Arguments">
				<descr>
					Asynchronous response for NPF_F_wmaxBscpSvcFlowChg.
				</descr>
				<see>NPF_F_wmaxBscpSvcFlowChg</see>
				<field name="csRuleHandles" type="NPF_F_wmaxBscpCsRuleHandleList_t" brief="List of newly added CS rule handles"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSvcFlowDelArgs_t" brief="Delete Service Flow Arguments">
				<descr>
					This structure defines parameters to delete a service flow.
				</descr>
				<field name="svcFlowHandle" type="NPF_F_wmaxBscpSvcFlowHandle_t" brief="Service Flow Handle"></field>
			</struct>
			<define brief="MAC-CS Managed Uplink Connection Statistics Mask">
				<descr>
					These bits can be used to enable and reset MAC-CS managed uplink connection statistics.
				</descr>
				<see>NPF_F_wmaxBscpConnCsUlStats_t</see>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CS_UL_ALL" brief="Number of received MAC PDUs dropped due to lack of resources.">
					<value>(-1ull)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CS_UL_SDU_DLVD" brief="Number of succesfully processed UL packets delivered to the network.">
					<value>(0x01ull &lt;&lt; 0)</value>
				</field>
			</define>
			<struct type="NPF_F_wmaxBscpConnCsUlStats_t" brief="MAC-CS Managed Uplink Connection Statistics">
				<descr>
					This structure contains MAC-CS managed uplink connection statistics.
				</descr>
				<field name="cCsUlSduDlvd" type="NPF_uint64_t" brief="Number of succesfully processed UL packets delivered to the network."></field>
			</struct>
			<define brief="MAC-CS Managed Downlink Connection Statistics Mask">
				<descr>
					These bits can be used to enable and reset MAC-CS managed downlink connection statistics.
				</descr>
				<see>NPF_F_wmaxBscpConnCsDlStats_t</see>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CS_DL_ALL" brief="Number of received MAC PDUs dropped due to lack of resources.">
					<value>(-1ull)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_STAT_C_CS_DL_SDU_DLVD" brief="Number of succesfully processed DL packets delivered to the MAC-CPS layer.">
					<value>(0x01ull &lt;&lt; 0)</value>
				</field>
			</define>
			<struct type="NPF_F_wmaxBscpConnCsDlStats_t" brief="MAC-CS Managed Downlink Connection Statistics">
				<descr>
					This structure contains MAC-CS managed downlink connection statistics.
				</descr>
				<field name="cCsDlSduDlvd" type="NPF_uint64_t" brief="Number of succesfully processed DL packets delivered to the network."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSvcFlowUlStats_t" brief="Service Flow Uplink Statistics">
				<descr>
					This structure contains service flow uplink statistics.
				</descr>
				<field name="cCpsUlStats" type="NPF_F_wmaxBscpConnCpsUlStats_t" brief="MAC-CPS managed uplink connection statistics."></field>
				<field name="cCsUlStats" type="NPF_F_wmaxBscpConnCsUlStats_t" brief="MAC-CS managed uplink connection statistics."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSvcFlowDlStats_t" brief="Service Flow Downlink Statistics">
				<descr>
					This structure contains service flow downlink statistics.
				</descr>
				<field name="cCpsDlStats" type="NPF_F_wmaxBscpConnCpsDlStats_t" brief="MAC-CPS managed downlink connection statistics."></field>
				<field name="cCsDlStats" type="NPF_F_wmaxBscpConnCsDlStats_t" brief="MAC-CS managed downlink connection statistics."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSvcFlowStats_t" brief="Service Flow Statistics">
				<descr>
					This structure contains Service Flow Statistics.
				</descr>
				<see>NPF_F_wmaxBscpSvcFlowStatsGetResponseArgs_t</see>
				<selectunion type="NPF_F_wmaxBscpSvcFlowStatsUnion_t" name="u">
					<selectfield name="direction" type="NPF_F_wmaxBscpServiceDirection_t" brief="Service Flow Direction."></selectfield>
					<field name="svcFlowUlStats" type="NPF_F_wmaxBscpSvcFlowUlStats_t" brief="Service Flow Uplink Statistics.">
						<selector>NPF_F_WMAX_BSCP_DIRECTION_UL</selector>
					</field>
					<field name="svcFlowDlStats" type="NPF_F_wmaxBscpSvcFlowDlStats_t" brief="Service Flow Downlink Statistics.">
						<selector>NPF_F_WMAX_BSCP_DIRECTION_DL</selector>
					</field>
				</selectunion>
			</struct>
			<struct type="NPF_F_wmaxBscpSvcFlowStatsConfigArgs_t" brief="Configure Service Flow Statistics Arguments">
				<descr>
					This structure defines parameters to retrieve and reset service flow statistics.
				</descr>
				<field name="svcFlowHandle" type="NPF_F_wmaxBscpSvcFlowHandle_t" brief="Service Flow Handle"></field>
				<selectunion type="NPF_F_wmaxBscpSvcFlowStatsConfigUnion_t" name="u">
					<selectfield name="direction" type="NPF_F_wmaxBscpServiceDirection_t" brief="Service Flow Direction."></selectfield>
					<field name="cCpsUlStatsConfigMask" type="NPF_F_statsConfig_t" brief="Mask specifies which statistics will be collected.  Also causes counters to be reset to zero.  See: MAC-CPS Managed Uplink Connection Statistics.">
						<selector>NPF_F_WMAX_BSCP_DIRECTION_UL</selector>
					</field>
					<field name="cCpsDlStatsConfigMask" type="NPF_F_statsConfig_t" brief="Mask specifies which statistics will be collected.  Also causes counters to be reset to zero.  See: MAC-CPS Managed Downlink Connection Statistics.">
						<selector>NPF_F_WMAX_BSCP_DIRECTION_DL</selector>
					</field>
				</selectunion>
			</struct>
			<struct type="NPF_F_wmaxBscpSvcFlowStatsGetArgs_t" brief="Get Service Flow Statistics Arguments">
				<descr>
					This structure defines parameters to retrieve and reset service flow statistics.
				</descr>
				<field name="svcFlowHandle" type="NPF_F_wmaxBscpSvcFlowHandle_t" brief="Service Flow Handle"></field>
				<selectunion type="NPF_F_wmaxBscpSvcFlowStatsGetUnion_t" name="u">
					<selectfield name="direction" type="NPF_F_wmaxBscpServiceDirection_t" brief="Service Flow Direction."></selectfield>
					<field name="cCpsUlStatsResetMask" type="NPF_uint64_t" brief="Mask specifies which statistics will be reset to zero.  See: MAC-CPS Managed Uplink Connection Statistics.">
						<selector>NPF_F_WMAX_BSCP_DIRECTION_UL</selector>
					</field>
					<field name="cCpsDlStatsResetMask" type="NPF_uint64_t" brief="Mask specifies which statistics will be reset to zero.  See: MAC-CPS Managed Downlink Connection Statistics.">
						<selector>NPF_F_WMAX_BSCP_DIRECTION_DL</selector>
					</field>
				</selectunion>
			</struct>
			<struct type="NPF_F_wmaxBscpSvcFlowStatsGetResponseArgs_t" brief="Service Flow Stats Get Response Arguments">
				<descr>
					Asynchronous response for NPF_F_wmaxBscpSvcFlowStatsGet.
				</descr>
				<see>NPF_F_wmaxBscpSvcFlowStatsGet</see>
				<field name="svcFlowStats" type="NPF_F_wmaxBscpSvcFlowStats_t" brief="Statistics for the requested service flow."></field>
			</struct>
		</section>
		<section name="Service Flow Functions">
			<descr>
				This section defines the interface to support base station initiated service flow operations.
			</descr>
			<func name="NPF_F_wmaxBscpSvcFlowAdd" type="NPF_error_t" brief="Add Service Flow" xdrid="RPC_WMAX_BSCP_SVC_FLOW_ADD">
				<descr>
					This function adds a service flow. Service flows are unidirectional.
					Service flows can be added for the subscriber that completed network entry/re-entry. 
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpSvcFlowAddArgs_t *" name="svcFlowAddArgs">
					<descr>
						Add Service Flow Arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
					</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SVC_FLOW_ADD.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_NOT_NEGOTIATED" brief="One of requested parameters was previously not negotiated with this SS"></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpSvcFlowChange" type="NPF_error_t" brief="Change Service Flow" xdrid="RPC_WMAX_BSCP_SVC_FLOW_CHG">
				<descr>
					This function changes service flow settings. The service flow must be already created using NPF_F_wmaxBscpSvcFlowAdd function.
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpSvcFlowChgArgs_t *" name="svcFlowChgArgs">
					<descr>
						Change Service Flow Arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
					</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SVC_FLOW_CHG.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_NOT_NEGOTIATED" brief="One of requested parameters was previously not negotiated with this SS"></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpSvcFlowDel" type="NPF_error_t" brief="Delete Service Flow" xdrid="RPC_WMAX_BSCP_SVC_FLOW_DEL">
				<descr>
					This function deletes a service flow. The service flow must be already created using NPF_F_wmaxBscpSvcFlowAdd function.
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpSvcFlowDelArgs_t *" name="svcFlowDelArgs">
					<descr>
						Delete Service Flow Arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
					</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SVC_FLOW_DEL.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpSvcFlowStatsConfig" type="NPF_error_t" brief="Configure Service Flow Statistics" xdrid="RPC_WMAX_BSCP_SVC_FLOW_STATS_CFG">
				<descr>
					This function configure statistics information collected for a specified service flow.
					The service flow must be already created using NPF_F_wmaxBscpSvcFlowAdd function.
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpSvcFlowStatsConfigArgs_t *" name="svcFlowStatsConfigArgs">
					<descr>
						Service Flow Statistics Get Arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_SVC_FLOW_HANDLE">
						<descr>
							The service flow handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_PHS_RULES_GLOBAL_ADD.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpSvcFlowStatsGet" type="NPF_error_t" brief="Get Service Flow Statistics" xdrid="RPC_WMAX_BSCP_SVC_FLOW_STATS_GET">
				<descr>
					This function gets statistics information for a specified service flow.
					The service flow must be already created using NPF_F_wmaxBscpSvcFlowAdd function.
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpSvcFlowStatsGetArgs_t *" name="svcFlowStatsGetArgs">
					<descr>
						Service Flow Statistics Get Arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_SVC_FLOW_HANDLE">
						<descr>
							The service flow handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_PHS_RULES_GLOBAL_ADD.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
		</section>
	</section>
	<section name="Radio Trace Mode">
		<section name="Radio Trace Mode Data Structures">
			<struct type="NPF_F_wmaxBscpRadioTraceModeParms_t" brief="Radio Trace Mode Parameters">
				<descr>
					This structure parameters for Radio Trace Mode.
				</descr>
				<field name="samplingPeriod" type="NPF_uint32_t" brief="Specifies how often the statistics are read (in ms, 10 ms granualarity).">
					<descr>Default value: 8 (80ms sampling period)
				    </descr>
				</field>
				<field name="noOfSamples" type="NPF_uint32_t" brief="Specifies maximum number of samples stored per SS.">
					<descr> This parameter specifies, how many samples are stored in memory between two NPF_F_wmaxBscpSsRadoTraceGet() 
                    calls. When statistics are read less frequently then samplingPeriod * noOfSamples, 
                    oldest samples are overwritten by the new one.
                    Default value: 8.
                    </descr>
				</field>
			</struct>
			<struct type="NPF_F_wmaxBscpMacRadioTraceConfigArgs_t" brief="Radio Trace Configuration Arguments">
				<descr>
					This data structure defines parameters of a Radio Trace Configuration call.
				</descr>
				<field name="macHandle" type="NPF_F_wmaxBscpMacHandle_t" brief="Identifier of the MAC instance."></field>
				<field name="radioTraceParams" type="NPF_F_wmaxBscpRadioTraceModeParms_t" brief="Radio Trace Mode parameters."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsRadioTraceSetArgs_t" brief="Subscriber Radio Trace Mode Statistics Configuration Arguments">
				<descr>
					This structure defines parameters to configure Radio Trace Mode Statistics per given subscriber.
    			</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle for the subscriber to enable Radio Trace Mode."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsRadioTraceSetResult_t" brief="Result of Subscriber Radio Trace Mode Statistics Configuration.">
				<descr>
					This structure contains the result of Radio Trace Mode Statistics configuration per given subscriber.
    			</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle for the subscriber to enable Radio Trace Mode."></field>
				<field name="errorType" type="NPF_F_wmaxBscpErrorType_t" brief="Result - error code."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsRadioTraceSetResponseArgs_t" brief="Configuration Radio Trace Mode Subscriber Statistics Response Arguments">
				<descr>
					Asynchronous response for NPF_F_wmaxBscpSsRadioTraceSet.
				</descr>
				<see>NPF_F_wmaxBscpSsRadioTraceConfig</see>
				<vector name="resultArray" type="NPF_F_wmaxBscpSsRadioTraceSetResult_t" brief="An array of results, separate result for each subscriber requested.">
					<length name="resultArrayNum" type="NPF_uint32_t" brief="Number of subscribers."></length>
				</vector>
			</struct>
			<struct type="NPF_F_wmaxBscpSsRadioTraceGetArgs_t" brief="Subscriber Radio Trace Mode Statistics Get Arguments">
				<descr>
					This structure defines parameters to get Radio Trace Mode Statistics per given subscriber.
    			</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle for the subscriber to get Radio Trace Mode statistics."></field>
				<field name="continue_flag" type="NPF_boolean_t" brief="true - continue collecting samples using Radio Trace Mode; false - stop collecting samples for this subscriber."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSvcFlowRadioTraceSample_t" brief="Service Flow Radio Trace Mode Sample">
				<descr>
                    A set of Service Flow statistics collected in a certain time.
				</descr>
				<field name="svcFlowHandle" type="NPF_F_wmaxBscpSvcFlowHandle_t" brief="A handle to the service flow."></field>
				<field name="svcFlowStats" type="NPF_F_wmaxBscpSvcFlowStats_t" brief="Statistics collected for this service flow."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsRadioTraceSample_t" brief="Radio Trace Mode Sample">
				<descr>
                   A single set of statistics (a sample) collected by the subscriber in a certain time.
				</descr>
				<field name="sampleNbr" type="NPF_uint32_t" brief="Sample number."></field>
				<field name="ssStatistics" type="NPF_F_wmaxBscpSsStats_t" brief="Statistics collected per SS."></field>
				<vector name="svcFlowSample" type="NPF_F_wmaxBscpSvcFlowRadioTraceSample_t" brief="A list of Service Flow statistics for Service Flows used by this SS.">
					<length name="svcFlowSampleNum" type="NPF_uint32_t" brief="Number of service flows."></length>
				</vector>
			</struct>
			<struct type="NPF_F_wmaxBscpSsRadioTraceSampleSet_t" brief="Set of Radio Trace Mode Samples">
				<descr>
                    A set of samples collected by the subscriber for a certain period.
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="A handle to the subscriber owning samples."></field>
				<field name="errorType" type="NPF_F_wmaxBscpErrorType_t" brief="Result - error code."></field>
				<vector name="sample" type="NPF_F_wmaxBscpSsRadioTraceSample_t" brief="A list of samples.">
					<length name="sampleNum" type="NPF_uint32_t" brief="Number of samples in a list."></length>
				</vector>
			</struct>
			<struct type="NPF_F_wmaxBscpSsRadioTraceGetResponseArgs_t" brief="Get Radio Trace Mode Subscriber Statistics Response Arguments">
				<descr>
					Asynchronous response for NPF_F_wmaxBscpSsRadioTraceGet.
				</descr>
				<see>NPF_F_wmaxBscpSsRadioTraceGet</see>
				<vector name="sampleSet" type="NPF_F_wmaxBscpSsRadioTraceSampleSet_t" brief="A set of statistic samples for a single subscriber.">
					<length name="sampleSetNum" type="NPF_uint32_t" brief="Number of sample sets."></length>
				</vector>
			</struct>
		</section>
		<section name="Radio Trace Mode Functions">
			<func name="NPF_F_wmaxBscpMacRadioTraceConfig" type="NPF_error_t" brief="Configure Radio Trace Mode" xdrid="RPC_WMAX_BSCP_MAC_RADIO_TRACE_CONFIG">
				<descr>
					This function configures collecting statistics in Radio Trace Mode for a given MAC instance. 
					If NPF_F_wmaxBscpMacRadioTraceConfig() is not executed - default values,
					described in NPF_F_wmaxBscpMacRadioTraceConfigArgs_t are used.
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpMacRadioTraceConfigArgs_t *" name="radioTraceArgs">
					<descr>
						Radio Trace Mode configuration arguments
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
					</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_RADIO_TRACE_CONFIG.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_OBJ_INVALID_STATE" brief="Radio Trace Mode parameters cannot be changed since at least one subscriber
					have this mode active."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpSsRadioTraceSet" type="NPF_error_t" brief="Initiate Radio Trace Subscriber Statistics" xdrid="RPC_WMAX_BSCP_SS_RADIO_TRACE_SET">
				<descr>
					This function configures radio trace mode of gathering suscriber statistics. 
					The list of collected statistics should be configured using 
					NPF_F_wmaxBscpSsStatsConfig() and NPF_F_wmaxBscpSvcFlowStatsConfig()
					functions.
					The structure NPF_F_wmaxBscpRadioTraceModeParms_t used by NPF_F_wmaxBscpMacRadioTraceConfig() 
					defines how often the statistics are collected and how many samples are stored.
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" class="vector" type="NPF_F_wmaxBscpSsRadioTraceSetArgs_t" name="radioTraceSetArgs" xdr="yes">
					<descr>
						Array of structures, containing argNum arguments. Each argument specifies arguments to configure Radio Trace Mode Statistics 
						for a single subscriber.
					</descr>
					<length type="NPF_uint32_t" name="argsNum" brief="Number of elements in radioTraceConfigArgs."></length>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_SVC_FLOW_HANDLE">
						<descr>
							The service flow handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_STATS_CFG.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpSsRadioTraceGet" type="NPF_error_t" brief="Get Radio Trace Subscriber Statistics" xdrid="RPC_WMAX_BSCP_SS_RADIO_TRACE_GET">
				<descr>
					This function gets a set of statistics samples collected in the specified period 
					for the subscriber(s) with enabled radio trace mode. Radio Trace Mode can be enabled using 
					NPF_F_wmaxBscpSsRadioTraceSet() function. The structure NPF_F_wmaxBscpRadioTraceModeParms_t used by NPF_F_wmaxBscpMacRadioTraceConfig() 
					defines how often the statistics are collected and how many samples are stored. - up to noOfSamples can be returned
					(see NPF_F_wmaxBscpMacRadioTraceConfig()).
					Read samples are deleted and cannot be read again. 
					When this function is called again after more then noOfSamples * frequency (where both are elements of radoTraceModeParms), oldest
                    samples are overwritten by the newer samples.                                        
                    
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" class="vector" type="NPF_F_wmaxBscpSsRadioTraceGetArgs_t" name="radioTraceGetArgs" xdr="yes">
					<descr>
						Array of structures, containing argNum arguments. Each argument specifies arguments to get a Radio Trace Mode Statistics 
						from a single subscriber
					</descr>
					<length type="NPF_uint32_t" name="argsNum" brief="Number of elements in radioTraceGetArgs."></length>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_SVC_FLOW_HANDLE">
						<descr>
							The service flow handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_STATS_CFG.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
		</section>
	</section>
	<section name="Sleep Mode Support">
		<descr>
				This section defines the interface to control sleep mode.
		</descr>
		<section name="Sleep Mode Data Structures">
			<enum type="NPF_F_wmaxBscpPscType_t" brief="Power Saving Class Type">
				<descr>
					Defines different types of power saving classes.
				</descr>
				<field name="NPF_F_WMAX_BSCP_SLEEP_PSC_TYPE_I" brief="Power Saving Class Type I."></field>
				<field name="NPF_F_WMAX_BSCP_SLEEP_PSC_TYPE_II" brief="Power Saving Class Type II."></field>
				<field name="NPF_F_WMAX_BSCP_SLEEP_PSC_TYPE_III" brief="Power Saving Class Type III."></field>
			</enum>
			<enum type="NPF_F_wmaxBscpPscDirection_t" brief="Power Saving Class Direction">
				<descr>
					Defines what direction of traffic is covered by the power saving class.
				</descr>
				<field name="NPF_F_WMAX_BSCP_SLEEP_PSC_DL_UL" brief="Unspecified (downlink and uplink traffic)."></field>
				<field name="NPF_F_WMAX_BSCP_SLEEP_PSC_DL" brief="Downlink traffic only."></field>
				<field name="NPF_F_WMAX_BSCP_SLEEP_PSC_UL" brief="Uplik traffic only."></field>
			</enum>
			<struct type="NPF_F_wmaxBscpMobPscParamsTypeI_t" brief="Power Saving Class Type I Parameters">
				<field type="NPF_F_wmaxBscpPscDirection_t" name="direction" brief="Power Saving Class Direction."></field>
				<field type="NPF_uint8_t" name="listeningWindow" brief="Listening Window - how long MS remain active (in frames)."></field>
				<field type="NPF_uint8_t" name="initWindow" brief="Initial sleep window lenght (in frames)."></field>
				<field type="NPF_uint16_t" name="finalWindowBase" brief="Final sleep window lenght base.">
					<descr>
					The final sleep window (in frames) is calculated as finalWindow = finalWindowBase * 2^finalWindowExp.
					</descr>
				</field>
				<field type="NPF_uint16_t" name="finalWindowExp" brief="Final sleep window exponent.">
					<descr>
					The final sleep window (in frames) is calculated as finalWindow = finalWindowBase * 2^finalWindowExp.
					</descr>
				</field>
				<field type="NPF_boolean_t" name="trafficWakening" brief="Traffic triggered wakening flag. ">
					<descr>
						When true, deactivate this Power Saving Class when trafic appearson on one of the connections belongs to this class.
						When false, data traffic never deactivate this class.
					</descr>
				</field>
				<field type="NPF_boolean_t" name="trafficInidcation" brief="Traffic indication flag.">
					<descr>
						When true, MOB_TRF-IND message with negative inidcation will be send in each activity window.
						When false, negative indications will never be send. 
						This field contains the negotiation result, based on the SS request and MAC instance settings from NPF_F_wmaxBscpSleepSigParms_t.
					</descr>
				</field>
				<vector name="cidList" type="NPF_uint16_t" brief="A list of CIDs belongs to this Power Saving Class.">
					<length name="cidListLength" type="NPF_uint32_t" 
						brief="Number of CIDs in the cidList. When set to 0 it means that all subscriber connections belong to this PSC."></length>
				</vector>
			</struct>
			<struct type="NPF_F_wmaxBscpMobPscDef_t" brief="Power Saving Class Definition">
				<field name="pscId" type="NPF_uint8_t" brief="Power Saving Class ID.">
					<descr> 
						Unique identifier of the Power Serving Class within a group of Power Serving Classes associated with the subscriber pointed by ssHandle.  								
					</descr>
				</field>
				<selectunion type="NPF_F_wmaxBscpPscParams_t" name="u">
					<selectfield name="type" type="NPF_F_wmaxBscpPscType_t" brief="Power Saving Class Type"></selectfield>
					<field type="NPF_F_wmaxBscpMobPscParamsTypeI_t" name="typeI" brief="Power Saving Class Type I Parameters">
						<selector>NPF_F_WMAX_BSCP_SLEEP_PSC_TYPE_I</selector>
					</field>
					<field type="NPF_uint32_t" name="unused" brief="Other types of Power Saving Class not supported">
						<selector>NPF_F_WMAX_BSCP_SLEEP_PSC_TYPE_II</selector>
						<selector>NPF_F_WMAX_BSCP_SLEEP_PSC_TYPE_III</selector>
					</field>
				</selectunion>
			</struct>
		</section>
		<section name="Sleep Mode Data Functions">
			<func name="NPF_F_wmaxBscpSsSleepDeactivate" type="NPF_error_t" brief="Deactivate Power Saving Class" xdrid="RPC_WMAX_BSCP_SS_SLEEP_DEACTIVE">
				<descr>
					This function stops sleep mode for a given subscriber by deactivation of the Power Saving Class provided as an argument                    
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" name="pscHandle" type="NPF_F_wmaxBscpPscHandle_t" xdr="yes">
					<descr>
						A handle to the Power Saving Class to be deactivated.
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_PSC_HANDLE">
						<descr>
							The service flow handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_SLEEP_DEACTIVATE.
						When the subscriber actualy terminate its sleep mode, an event NPF_F_WMAX_BSCP_EVENT_MOB_SS_SLEEP
						is returned.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
		</section>
	</section>
	<section name="Mobility Support">
		<descr>
				This section defines the interface to manage mobility.
		</descr>
		<section name="Neighbor Advertisement Data Structures">
			<enum type="NPF_F_wmaxBscpMobNbrSynchr_t" brief="Time/frequency synchronization type for neigbour BS.">
				<descr>
    			    Describes how time and frequency parameters of the target BS are synchronized with the 
    			    serving BS.	
    			</descr>
				<field name="NPF_F_WMAX_BSCP_MOB_NBR_UNSYNCHRONIZED" value="0" brief="Target BS time and frequency not synchronized with Serving BS"></field>
				<field name="NPF_F_WMAX_BSCP_MOB_NBR_TIME_SYNCHRONIZED" value="1" brief="Target BS time synchronized with Serving BS"></field>
				<field name="NPF_F_WMAX_BSCP_MOB_NBR_TIME_FREQ_SYNCHRONIZED" value="2" brief="Target BS time and frequency synchronized with Serving BS"></field>
			</enum>
			<struct type="NPF_F_wmaxBscpMobNbrPhyProfileId_t" name="" brief="PHY Profile ID used for advertsiment neigbour BS">
				<descr>
					This data structure defines parameters of a FAPI call 
					to add a new BS to advertised list of neighbor BSes.
				</descr>
				<field name="colocatedFa" type="NPF_boolean_t" brief="When true, neighbor BS is co-located with BS sending this advertisement."></field>
				<field name="configurationIndicator" type="NPF_boolean_t" brief="When true, neighbor BS has the same FA as BS sending this advertisement."></field>
				<field name="timeFreqSynch" type="NPF_F_wmaxBscpMobNbrSynchr_t" brief="Time/frequency synchronization type."></field>
				<field name="eirpSpecified" type="NPF_boolean_t" brief="When true, valid BS EIRP is specified."></field>
				<field name="faIndexIndicator" type="NPF_boolean_t" brief="When true, valid FA index is specified"></field>
			</struct>
			<define brief="Handover Optimizations supported by the neighbor BS">
				<descr>
    				These bitmasks can be used to describe HO optimizations supported by the neighbor BS.
    			</descr>
				<field name="NPF_F_WMAX_BSCP_MOB_HO_OPT_SBC" brief="Omit SBC-REQ/RSP management messages during re-entry processing">
					<value>(1 &lt;&lt; 0)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_HO_OPT_PKM_NO_TEK" brief="Omit PKM Authentication phase except TEK phase during current re-entry processing">
					<value>(1 &lt;&lt; 1)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_HO_OPT_TEK" brief="Omit PKM TEK creation phase during re-entry processing">
					<value>(1 &lt;&lt; 2)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_HO_OPT_REG" brief="Omit REG-REQ/RSP management messages during current re-entry processing.">
					<value>(1 &lt;&lt; 3)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_HO_OPT_ADDRESS" brief="Omit Network Address Acquisition management messages during current reentry processing">
					<value>(1 &lt;&lt; 4)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_HO_OPT_TOD" brief="Omit Time of Day Acquisition management messages during current reentry processing">
					<value>(1 &lt;&lt; 5)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_HO_OPT_TFTP" brief="Omit TFTP management messages during current re-entry processing">
					<value>(1 &lt;&lt; 6)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_HO_OPT_FULL" brief="Full service and operational state transfer or sharing between serving 
    			BS and target BS (ARQ, timers, counters, MAC state machines, etc.)">
					<value>(1 &lt;&lt; 7)</value>
				</field>
			</define>
			<define brief="Supported Scheduling Services">
				<descr>
				These bitmasks can be used to describe scheduling services supported by the neighbor BS.
			</descr>
				<field name="NPF_F_WMAX_BSCP_MOB_NBR_ADV_UGS_SUPPORTED" brief="UGS scheduling service supported.">
					<value>(1 &lt;&lt; 0)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_NBR_ADV_RTPS_SUPPORTED" brief="rtPS scheduling service supported.">
					<value>(1 &lt;&lt; 1)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_NBR_ADV_NRTPS_SUPPORTED" brief="nrtPS scheduling service supported.">
					<value>(1 &lt;&lt; 2)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_NBR_ADV_BE_SUPPORTED" brief="BE scheduling service supported.">
					<value>(1 &lt;&lt; 3)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_NBR_ADV_ERTPS_SUPPORTED" brief="Extended rtPS (ertPS) scheduling service supported.">
					<value>(1 &lt;&lt; 4)</value>
				</field>
			</define>
			<struct type="NPF_F_wmaxBscpMobNbrBsConfig_t" name="" brief="Neighbor BS Configuration">
				<descr>
				This data structure defines configuration of the neighbor BS that will be advertised
				using Neighbor Advertisement.
			</descr>
				<field name="phyProfileId" type="NPF_F_wmaxBscpMobNbrPhyProfileId_t" brief="PHY Profile ID definition."></field>
				<field name="faIndex" type="NPF_uint8_t" brief="Frequency Assignment Index.">
					<descr>
   			            FA index - network-defined frequency information. Valid only faIndexSpecified field
   			            in phyProfileId is set.
 			        </descr>
				</field>
				<field name="eirp" type="NPF_int8_t" brief="BS EIRP.">
					<descr>
   			            Signed Integer from -128 to +127 in unit of dBm. Valid only eirpSpecified field
   			            in phyProfileId is set. Otherwise, the BS has the same EIRP as the serving BS. 
   			       </descr>
				</field>
				<field name="subchanelIndex" type="NPF_uint8_t" brief="Active DL subchannel index."></field>
				<field name="hoProcessOptimisation" type="NPF_uint8_t" brief="handover process optimization bitmask.">
					<descr>
               	          Specified what HO optimization are supported by neigbor BS. Valid only when
               	           omitHoOptimization of Neignbour Advertisement configuration structure is set to false.
               	           See: HO Optimizations
               	     </descr>
				</field>
				<field name="schedulingServiceSupported" type="NPF_uint8_t" brief="Supported scheduling services bitmask. ">
					<descr>
               	            Specified what shedulling services are supported by neigbor BS. Valid only when
               	            omitQos field of Neignbour Advertisement configuration structure is set to false.
               	        </descr>
				</field>
				<field name="dcdConfChangeCount" type="NPF_uint8_t" brief="Current DCD Configuration Change Count."></field>
				<field name="ucdConfChangeCount" type="NPF_uint8_t" brief="Current UCD Configuration Change Count."></field>
				<field name="otherParams" type="NPF_F_wmaxBscpOctetString_t" brief="Other TLV encoded parameters.
               	         TLVs advertised via DCD/UCD messages by the neighbor BS can be specified here. 
               	         Different sets of TLVs might be specified for different neighbors"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobNbrBs_t" name="" brief="A Neighbor BS description">
				<descr>
				This data structure defines parameters of one 
				to be added to BS to advertised list of neighbor BSes.
			</descr>
				<field name="bsId" type="NPF_uint8_t" size="6" brief="Basestation Id.">
					<descr>
               	        48-bits BS address. Mandatory field, but send in MOB-NBR_ADV only when 
               	        omitBsId of the NPF_F_wmaxBscpMobNbrConf_t is set to false.
               	    </descr>
				</field>
				<field name="nbrBsConfig" type="NPF_F_wmaxBscpMobNbrBsConfig_t" brief="New neighbor BS configuration."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobNbrAddArgs_t" name="" brief="Add Neighbor BS Arguments">
				<descr>
				This data structure defines parameters of NPF_F_wmaxBscpMobNbrAdd() function
				to add a new BS to advertised list of neighbor BSes.
			</descr>
				<field name="macHandle" type="NPF_F_wmaxBscpMacHandle_t" brief="MAC Instance Handle"></field>
				<vector type="NPF_F_wmaxBscpMobNbrBs_t" name="bsList">
					<descr>
					Array of structures containing bsListNum entries. 
					Each entry contains a parameters of a single neighbor BS to be advertised.
				</descr>
					<length type="NPF_uint32_t" name="bsListNum" brief="Number of elements in the bsList table."></length>
				</vector>
			</struct>
			<struct type="NPF_F_wmaxBscpMobNbrAddResponseArgs_t" brief="Add Neighbor BS Response Arguments">
				<descr>
					Asynchronous response for NPF_F_wmaxBscpMobNbrAdd.
				</descr>
				<see>NPF_F_wmaxBscpMobNbrAdd</see>
				<field name="bsId" type="NPF_uint8_t" size="6" brief="Basestation Id.">
					<descr>
               	        48-bits address of neighbor BS. 
               	    </descr>
				</field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobNbrGetParamsResponseArgs_t" brief="Get Params Neighbor BS Response Arguments">
				<descr>
					Asynchronous response for NPF_F_wmaxBscpMobNbrGetParams.
				</descr>
				<see>NPF_F_wmaxBscpMobNbrGetParams</see>
				<field name="bsId" type="NPF_uint8_t" size="6" brief="Basestation Id.">
					<descr>
               	        48-bits address of this BS. 
               	    </descr>
				</field>
				<field name="eirp" type="NPF_int8_t" brief="BS EIRP.">
					<descr>
   			            Signed Integer from -128 to 127 in unit of dBm.
   			       </descr>
				</field>
				<field name="subchanelIndex" type="NPF_uint8_t" brief="Active DL subchannel index."></field>
				<field name="hoProcessOptimisation" type="NPF_uint8_t" brief="handover process optimization bitmask.">
					<descr>
               	          Specified what HO optimization are supported by this  BS. 
               	           See: HO Optimizations
               	     </descr>
				</field>
				<field name="schedulingServiceSupported" type="NPF_uint8_t" brief="Supported scheduling services bitmask. ">
					<descr>
               	            Specified what scheduling services are supported by this BS. 
               	        </descr>
				</field>
				<field name="dcdConfChangeCount" type="NPF_uint8_t" brief="Current DCD Configuration Change Count."></field>
				<field name="ucdConfChangeCount" type="NPF_uint8_t" brief="Current UCD Configuration Change Count."></field>
				<field name="otherParams" type="NPF_F_wmaxBscpOctetString_t" brief="Other TLV encoded parameters.
               	         TLVs advertised via DCD/UCD messages by the this BS are specified here."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobNbrChangeArgs_t" name="" brief="Change Neighbor BS Arguments">
				<descr>
    				This data structure defines parameters of NPF_F_wmaxBscpMobNbrChange() function
    				to change parameters of the BS advertised using Neighbor Advertisement.
    			</descr>
				<field name="id" type="NPF_F_wmaxBscpMobNbrHandle_t" brief="Identifier of neighbor BS to change."></field>
				<field name="nbrBsConfig" type="NPF_F_wmaxBscpMobNbrBsConfig_t" brief="New configuration of the advertised BS. All BS parameters to be advertised 
				      (changed and non-changed) must be specified."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobNbrDelArgs_t" name="" brief="Neighbor BS Delete Arguments">
				<descr>
        		This data structure defines parameters of a FAPI call to remove BS from advertised list of neighbor BSes.
        		</descr>
				<field type="NPF_F_wmaxBscpMobNbrHandle_t" name="id" brief="Identifier of neighbor BS to be deleted."></field>
			</struct>
		</section>
		<section name="Neighbor Advertisement Functions">
			<func name="NPF_F_wmaxBscpMobNbrAdd" type="NPF_error_t" brief="Add Neighbor BSes For Advertisement" xdrid="RPC_WMAX_BSCP_MOB_NBR_ADD">
				<descr>
					This function adds neignbour BSes to be advertised via MOB_NBR-ADV messages.
            	</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						Identifies the callback function to be called when the operation completes
					</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
						A unique application invocation context that will be supplied to the callback function
					</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
						Defines whether a callback will be called after completing the action requested by the function call.
					</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpMobNbrAddArgs_t *" name="nbrAddArgs" xdr="yes">
					<descr>NbrAdd arguments. Inside the structure, an array of structures containing parameters
						 of each added neigbor is located.
						</descr>
				</param>
				<return>
					<descr>
						Error code indicating whether function call was successful.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The operation is in progress.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							The callback handle is invalid.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							The operation cannot be completed successfully because
							of problems encountered when handling the input parameters.
						</descr>
					</retval>
				</return>
				<callback>
					<descr>
						If errorReporting is set to ALWAYS, a callback is invoked to
						indicate that the operation has been completed. The callback
						is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_NBR_ADD.
					</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARAMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpMobNbrChange" type="NPF_error_t" brief="Change Parametes of Neighbor BS(es)" xdrid="RPC_WMAX_BSCP_MOB_NBR_CHANGE">
				<descr>
    			Change configuration parameters of the advertised BS(es(.
        	</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
    				Identifies the callback function to be called when the operation completes
    			</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
    				A unique application invocation context that will be supplied to the callback function
    			</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
    				Defines whether a callback will be called after completing the action requested by the function call.
    			</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
    				Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
    			</descr>
				</param>
				<param io="in" class="vector" type="NPF_F_wmaxBscpMobNbrChangeArgs_t" name="nbrChangeArgs" xdr="yes">
					<descr>Array of structures containing argsNum entries. 
    			Each entry contains new parameters for the single neighbor BS to be changed.    			
    			</descr>
					<length type="NPF_uint32_t" name="argsNum" brief="Number of elements in the nbrChangeArgs table."></length>
				</param>
				<return>
					<descr>
    			Error code indicating whether function call was successful.
    			</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
    					The operation is in progress.
    				</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
    					The callback handle is invalid.
    				</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
    					The operation cannot be completed successfully because
    					of problems encountered when handling the input parameters.
    				</descr>
					</retval>
				</return>
				<callback>
					<descr>
    			If errorReporting is set to ALWAYS, a callback is invoked to
    	    	indicate that the operation has been completed. The callback
    			is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_NBR_CHANGE.
    		</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARAMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpMobNbrDel" type="NPF_error_t" brief="Stop Advertise Neighbor BS(es)" xdrid="RPC_WMAX_BSCP_MOB_NBR_DEL">
				<descr>
    			Remove BSes specified as arguments from a set advertised via MOB_NBR-ADV messages.
        	</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
    				Identifies the callback function to be called when the operation completes
    			</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
    				A unique application invocation context that will be supplied to the callback function
    			</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
    				Defines whether a callback will be called after completing the action requested by the function call.
    			</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
    				Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
    			</descr>
				</param>
				<param io="in" class="vector" type="NPF_F_wmaxBscpMobNbrDelArgs_t" name="nbrDelArgs" xdr="yes">
					<descr>Array of structures containing argsNum entries. 
    			Each entry contains a parameters of a single neighbor BS to be removed
    			from advertisement message.
    			</descr>
					<length type="NPF_uint32_t" name="argsNum" brief="Number of elements in the nbrDelrgs table."></length>
				</param>
				<return>
					<descr>
    			Error code indicating whether function call was successful.
    			</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
    					The operation is in progress.
    				</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
    					The callback handle is invalid.
    				</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
    					The operation cannot be completed successfully because
    					of problems encountered when handling the input parameters.
    				</descr>
					</retval>
				</return>
				<callback>
					<descr>
    			If errorReporting is set to ALWAYS, a callback is invoked to
    	    	indicate that the operation has been completed. The callback
    			is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_NBR_DEL.
    		</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARAMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpMobNbrGetParams" type="NPF_error_t" brief="Get BS parameters to be advertised by neighbor BSes" xdrid="RPC_WMAX_BSCP_MOB_NBR_GET_PARAM">
				<descr>
    			Get parameters of this BS in a form that can be provided to another BS to be send via MOB_NBR-ADV message.
    			Returned parameters can be used as arguments of NPF_F_wmaxBscpMobNbrAdd() function on the neighbor BS.
        	</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
    				Identifies the callback function to be called when the operation completes
    			</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
    				A unique application invocation context that will be supplied to the callback function
    			</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
    				Defines whether a callback will be called after completing the action requested by the function call.
    			</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
    				Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
    			</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpMacHandle_t" name="macHandle" xdr="yes">
					<descr>
    				MAC instance handle.
    			</descr>
				</param>
				<return>
					<descr>
    			Error code indicating whether function call was successful.
    			</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
    					The operation is in progress.
    				</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
    					The callback handle is invalid.
    				</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
    					The operation cannot be completed successfully because
    					of problems encountered when handling the input parameters.
    				</descr>
					</retval>
				</return>
				<callback>
					<descr>
                BS parameters are returned by the callback 
    			identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_NBR_GET_PARAMS.
    		</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARAMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
		</section>
		<section name="Scanning Data Structures">
			<enum type="NPF_F_wmaxBscpMobScanType_t" brief="Scan Report Type">
				<descr>
           			Defines report type used in scanning.			
       			</descr>
				<field name="NPF_F_WMAX_BSCP_MOB_SCAN_NO_REPORT" value="1" brief="Report not required"></field>
				<field name="NPF_F_WMAX_BSCP_MOB_SCAN_PERIODIC_REPORT" value="2" brief="Periodic report"></field>
				<field name="NPF_F_WMAX_BSCP_MOB_SCAN_EVENT_REPORT" value="3" brief="Event triggered report"></field>
			</enum>
			<define brief="Scanning Report Metrics">
				<descr>
  				These bitmasks can be used to set scanning report triggers in reportMetrics of 
   				NPF_F_wmaxBscpMobScanReportConf_t structure as well as to mark validity of 
   				metrics in NPF_F_wmaxBscpMobPrefBs_t structure.
   				<see>NPF_F_wmaxBscpMobScanReportConf_t</see>
					<see>NPF_F_wmaxBscpMobPrefBs_t</see>
				</descr>
				<field name="NPF_F_WMAX_BSCP_MOB_METRIC_CNRI_REPORT" brief="BS CNRI mean.">
					<value>(1 &lt;&lt; 0)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_METRIC_RSSI_REPORT" brief="BS RSSI mean.">
					<value>(1 &lt;&lt; 1)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_METRIC_DELAY_REPORT" brief="Relative delay.">
					<value>(1 &lt;&lt; 2)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_METRIC_RTD_REPORT" brief="BS Round-trip delay (RTD).">
					<value>(1 &lt;&lt; 3)</value>
				</field>
			</define>
			<struct type="NPF_F_wmaxBscpMobScanReportConf_t" brief="Scanning Report Parameters">
				<field type="NPF_F_wmaxBscpMobScanType_t" name="type" brief="Report type"></field>
				<field type="NPF_uint8_t" name="period" brief="Reporting period. Valid only when type==NPF_F_WMAX_BSCP_MOB_SCAN_PERIODIC_REPORT"></field>
				<field type="NPF_uint8_t" name="reportMetrics" brief="Bitmask to set report metrics. Valid when type != NPF_F_WMAX_BSCP_MOB_SCAN_NO_REPORT"></field>
			</struct>
			<enum type="NPF_F_wmaxBscpMobBsScanType_t" brief="BS Scanning and Association Type">
				<descr>
       			Requested type of association during scanning for a given Target BS.	
   			</descr>
				<field name="NPF_F_WMAX_BSCP_MOB_SCAN_BS_NO_ASSOCIATION" value="0" brief="No association requested"></field>
				<field name="NPF_F_WMAX_BSCP_MOB_SCAN_BS_ASSOCIATION_LEVEL_0" value="1" brief="Association level 0 requested"></field>
				<field name="NPF_F_WMAX_BSCP_MOB_SCAN_ASSOCIATION_LEVEL_1" value="2" brief="Association level 1 requested"></field>
				<field name="NPF_F_WMAX_BSCP_MOB_SCAN_ASSOCIATION_LEVEL_2" value="3" brief="Association level 2 requested"></field>
			</enum>
			<struct type="NPF_F_wmaxBscpMobBsAssocTime_t" brief="Association Timing Parameters">
				<descr> This function specifies association timing parameters offered by neighbor BS.</descr>
				<field type="NPF_F_wmaxBscpMobScanType_t" name="type" brief="Scanning (and association) type"></field>
				<field type="NPF_uint8_t" name="randezvousTime">
					<descr>
   			        Rendezvous time (in frame units) - the time when scanned BS is expected to provide
   			        ranging opportunity.  Valid only when type==NPF_F_WMAX_BSCP_MOB_SCAN_ASSOCIATION_LEVEL_1 or 
           			NPF_F_WMAX_BSCP_MOB_SCAN_ASSOCIATION_LEVEL_2
           		</descr>
				</field>
				<field type="NPF_uint8_t" name="cdmaCode">
					<descr>
 			        CDMA code that should be during initial ranging at rendezvous time.
   			        Valid only when type==NPF_F_WMAX_BSCP_MOB_SCAN_ASSOCIATION_LEVEL_1 or 
           			NPF_F_WMAX_BSCP_MOB_SCAN_ASSOCIATION_LEVEL_2
          	   </descr>
				</field>
				<field type="NPF_uint8_t" name="txOpportunityOffset">
					<descr>
    			     A unique transmission opportunity assigned to the SS, 
    			     to be used for association with the Target BS
    			     in units of symbol duration.
                     Valid only when type==NPF_F_WMAX_BSCP_MOB_SCAN_ASSOCIATION_LEVEL_1 or 
            	     NPF_F_WMAX_BSCP_MOB_SCAN_ASSOCIATION_LEVEL_2
             		</descr>
				</field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobBsScanParams_t" brief="Target BS Scanning Parameters">
				<descr>
       	    This structure describes parameters of a single neighbor BS to be scanned by a given SS. 
        	This data structure is used in a Scanning Set FAPI call or in a Scanning Request Event.    	 		    
        	</descr>
				<field name="bsId" type="NPF_uint8_t" size="6" brief="Base station Id (48-bit address of this neighbor base station]"></field>
				<field name="scanType" type="NPF_F_wmaxBscpMobBsScanType_t" brief="Scanning type."></field>
				<field name="associationTime" type="NPF_F_wmaxBscpMobBsAssocTime_t" brief="Requested association type and time parameters.">
					<descr>Valid only for Scanning Set FAPI call.
             	        </descr>
				</field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobSsScanSet_t" name="" brief="Scanning Arguments">
				<descr>
    	 		    This data structure defines parameters of a Scanning Set FAPI call or a Scanning Request Event.    	 		    
    			</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber handle"></field>
				<field name="duration" type="NPF_uint8_t" brief="Scanning duration (in frames)"></field>
				<field name="interleaving" type="NPF_uint8_t" brief="Interleaving interval (in frames)"></field>
				<field name="iteration" type="NPF_uint8_t" brief="Scan iteration"></field>
				<field name="report" type="NPF_F_wmaxBscpMobScanReportConf_t" brief="Report type and parameters">
					<descr>Valid only for Scanning Set FAPI call.
              	        </descr>
				</field>
				<vector type="NPF_F_wmaxBscpMobBsScanParams_t" name="bsList" xdr="yes">
					<descr>A list of BSes that should be scanned by the SS. Each entry contains scanning parameters for one BS.</descr>
					<length type="NPF_uint32_t" name="bsNum" brief="Number of elements in the bsList table."></length>
				</vector>
			</struct>
		</section>
		<section name="Scanning Functions">
			<func name="NPF_F_wmaxBscpMobSsScanSet" type="NPF_error_t" brief="Schedule Scanning" xdrid="RPC_WMAX_BSCP_MOB_SS_SCAN_SET">
				<descr>
        			This function initiates neighbor BS scanning performed by SS specified as arguments. When the scanning is completed, 
        			an event of type NPF_F_WMAX_BSCP_EVENT_MOB_SS_SCANNING_COMPLETE is generated.
        			For SS-initiated scanning, this function can be used only when scanning events are enabled in MAC signaling 
        			parameters configuration.
        		</descr>
				<see>NPF_F_wmaxBscpMobSigParms_t</see>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
        				Identifies the callback function to be called when the operation completes
        			</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
        				A unique application invocation context that will be supplied to the callback function
        			</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
        				Defines whether a callback will be called after completing the action requested by the function call.
        			</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
        				Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
        			</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpMobSsScanSet_t *" name="scanSetArgs" xdr="yes">
					<descr>
        			Scanning arguments for a given SS.
        			</descr>
				</param>
				<return>
					<descr>
            			Error code indicating whether function call was successful.
            		</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
            				The operation is in progress.
            			</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
            				The callback handle is invalid.
            			</descr>
					</retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_ANOTHER_OPERATION_PENDING">
						<descr>
            				The operation cannot be started because
            				SS is already performing scanning.
            			</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
            				The operation cannot be completed successfully because
            				of problems encountered when handling the input parameters.
            			</descr>
					</retval>
				</return>
				<callback>
					<descr>
        				If errorReporting is set to ALWAYS, a callback is invoked to
        				indicate that the operation has been completed. The callback
        				is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_SCAN_SET.
            		</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARAMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
		</section>
		<section name="Handover Support Data Structures">
			<define brief="SS State Parameters Mask">
				<descr>
    				These mask bits are used to indicate which parameters are valid within the SS state.
    			</descr>
				<field name="NPF_F_WMAX_BSCP_MOB_SS_STATE_CAPABILITIES" brief="SS Capabilities Specified">
					<value>(0x01ull &lt;&lt; 0)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_SS_STATE_AUTH" brief="SS Authorization State Specified">
					<value>(0x01ull &lt;&lt; 1)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_SS_STATE_SA" brief="SS Security Association State Specified">
					<value>(0x01ull &lt;&lt; 2)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_SS_STATE_SVC_FLOW" brief="SS Service Flows State Specified">
					<value>(0x01ull &lt;&lt; 3)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_SS_STATE_SECOND_CONN" brief="SS Secondary Management Connection Specified. When this flag is not set,  SS is unmanaged">
					<value>(0x01ull &lt;&lt; 4)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_SS_STATE_SLEEP" brief="SS status of the sleep mode avaliable.">
					<value>(0x01ull &lt;&lt; 5)</value>
				</field>
			</define>
			<struct type="NPF_F_wmaxBscpMobSsStateCapabilities_t" name="" brief="Subscriber Capabilities.">
				<descr>
        		This structure contains subscriber capabilities. 
    		</descr>
				<field name="ssSbcCapsTlv" type="NPF_F_wmaxBscpOctetString_t" brief="Subscriber basic capabilities in a form of TLVs">
					<descr>
            		A list of TLVs describing subscriber basic capabilities. Possible TLVs are those used in SBC-REQ messages.
           		</descr>
				</field>
				<field name="ssRegCapsTlv" type="NPF_F_wmaxBscpOctetString_t" brief="Other subscriber capabilities in a form of TLVs">
					<descr>
            		A list of TLVs describing other subscriber capabilities. Possible TLVs are those used in REG-REQ messages.
           		</descr>
				</field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsPkmv2RsaAuthKey_t" brief="PKMv2 RSA Authorization Key.">
				<descr>
					This structure defines the key used for PKMv2 RSA Authentication.
			</descr>
				<field name="prePak" type="NPF_uint8_t" size="32" brief="256-bit Pre-Primary Authorization Key generated during RSA authentication procedures; 
				    only used during initial network entry, handovers use MSK (see 7.2.2.2.3)"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSsPkmv2EapAuthKey_t" brief="PKMv2 EAP Authorization Key (for single EAP).">
				<descr>
				This structure defines the key required for PKMv2 EAP Authentication.
			</descr>
				<field name="ak" type="NPF_F_wmaxBscpSsPkmv2Ak_t" brief="Authorization Key (AK)"></field>
				<field name="dlPn" type="NPF_uint32_t" brief="DL PN (packet number)"></field>
				<field name="ulPn" type="NPF_uint32_t" brief="UL PN (packet number)"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobSsStateAuth_t" brief="Subscriber Authorization State.">
				<descr>
					This structure store parameters of current SS authorization.
			</descr>
				<selectunion type="NPF_F_wmaxBscpSsStateAuthUnion_t" name="u">
					<selectfield name="authMode" type="NPF_F_wmaxBscpPkmAuthMode_t" brief="Authorization Type Negotiated."></selectfield>
					<field name="pkmv2Rsa" type="NPF_F_wmaxBscpSsPkmv2RsaAuthKey_t" brief="PKMv2 RSA Authorization key">
						<selector>NPF_F_WMAX_BSCP_AUTH_MODE_PKMV2_RSA</selector>
					</field>
					<field name="pkmv2Eap" type="NPF_F_wmaxBscpSsPkmv2EapAuthKey_t" brief="PKMv2 EAP Authorization key (single EAP)">
						<selector>NPF_F_WMAX_BSCP_AUTH_MODE_PKMV2_EAP</selector>
						<selector>NPF_F_WMAX_BSCP_AUTH_MODE_PKMV2_EAP_AUTH_EAP</selector>
					</field>
					<field name="unused" type="NPF_uint32_t" brief="Unused.">
						<selector>NPF_F_WMAX_BSCP_AUTH_MODE_NONE</selector>
						<selector>NPF_F_WMAX_BSCP_AUTH_MODE_PKMV1_RSA</selector>
						<selector>NPF_F_WMAX_BSCP_AUTH_MODE_PKMV2_RSA_EAP</selector>
						<selector>NPF_F_WMAX_BSCP_AUTH_MODE_PKMV2_RSA_AUTH_EAP</selector>
					</field>
				</selectunion>
				<field name="macMode" type="NPF_F_wmaxBscpPkmMacMode_t" brief="Message Authentication Code (MAC) Mode Negotiated."></field>
			</struct>
			<enum type="NPF_F_wmaxBscpMobKeyValid_t" brief="Key Validity Indication">
				<descr>
         		This enum specifies possible combinations of valid and invalid keys.			
   			</descr>
				<field name="NPF_F_WMAX_BSCP_MOB_BOTH_KEYS_INVALID" brief="Old and new keys are invalid."></field>
				<field name="NPF_F_WMAX_BSCP_MOB_OLD_VALID_NEW_INVALID" brief="Old key is valid and the new key is invalid."></field>
				<field name="NPF_F_WMAX_BSCP_MOB_OLD_INVALID_NEW_VALID" brief="Old key is invalid and the new key is valid."></field>
				<field name="NPF_F_WMAX_BSCP_MOB_BOTH_KEYS_VALID" brief="Old and new keys are valid."></field>
			</enum>
			<struct type="NPF_F_wmaxBscpDesKey_t" name="" brief="DES Key">
				<descr>
				This data structure defines keying material for the DES algorithm.
			</descr>
				<field name="key" type="NPF_uint8_t" size="8" brief="64-bits key"></field>
				<field name="iv" type="NPF_uint8_t" size="8" brief="64-bits initialization vector"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpAesKey_t" name="" brief="AES Key">
				<descr>
				This data structure defines keying material for the AES algorithm.
			</descr>
				<field name="key" type="NPF_uint8_t" size="16" brief="128-bits key"></field>
				<field name="dlPn" type="NPF_uint32_t" brief="Downlink packet number for this key."></field>
				<field name="ulPn" type="NPF_uint32_t" brief="Uplink packet number for this key."></field>
			</struct>
			<enum type="NPF_F_wmaxBscpMobTekKeyType_t" brief="TEK Key Type">
				<descr>
           			This enum specifies possible keys used for a given TEK (Traffic Encryption Key).			
   			</descr>
				<field name="NPF_F_WMAX_BSCP_MOB_TEK_KEY_DES_64" brief="64-bits DES key."></field>
				<field name="NPF_F_WMAX_BSCP_MOB_TEK_KEY_AES_128" brief="128-bits AES key."></field>
			</enum>
			<struct type="NPF_F_wmaxBscpMobTek_t" name="" brief="TEK Key">
				<descr>
           			This structure describes a single TEK (Traffic Encryption Key).			
   			</descr>
				<field name="eks" type="NPF_uint8_t" brief="Key sequence number (EKS). Only the lowest bits (b1 and b0) are used. The other are reserved."></field>
				<field name="lifetime" type="NPF_uint32_t" brief="Remaining key lifetime (sec)."></field>
				<selectunion type="NPF_F_wmaxBscpMobTekKey_t" name="u">
					<selectfield name="keyType" type="NPF_F_wmaxBscpMobTekKeyType_t" brief="Encryption type: DES, AES"></selectfield>
					<field type="NPF_F_wmaxBscpDesKey_t" name="desKey">
						<descr>DES specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_MOB_TEK_KEY_DES_64</selector>
					</field>
					<field type="NPF_F_wmaxBscpAesKey_t" name="aesKey">
						<descr>AES specific parameters</descr>
						<selector>NPF_F_WMAX_BSCP_MOB_TEK_KEY_AES_128</selector>
					</field>
				</selectunion>
			</struct>
			<struct type="NPF_F_wmaxBscpMobPkmSaTekState_t" brief="TEKs for the Security Association">
				<descr>
					This structure define TEKs used for a single Security Association.
 			</descr>
				<field name="valid" type="NPF_F_wmaxBscpMobKeyValid_t" brief="Status of the old and new keys"></field>
				<field name="oldKey" type="NPF_F_wmaxBscpMobTek_t *" brief="Old TEK value. NULL when the old key is invalid."></field>
				<field name="newKey" type="NPF_F_wmaxBscpMobTek_t *" brief="New TEK value. NULL when the new key is invalid."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobSaParams_t" brief="Security Association Parameters">
				<descr>
				This structure defines all parameters of a single security association used by a given service flow.
    		</descr>
				<field name="said" type="NPF_uint16_t" brief="Security Association ID"></field>
				<field name="type" type="NPF_F_wmaxBscpPkmSaType_t" brief="Security Association Type"></field>
				<field name="cryptoSuite" type="NPF_F_wmaxBscpPkmCryptoSuite_t" brief="Crypto suite to be used with this security association"></field>
				<field name="teks" type="NPF_F_wmaxBscpMobPkmSaTekState_t" brief="TEKs for a given SS"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobSsStateSa_t" name="ssStateSa" brief="Subscriber Security Association State.">
				<descr>
     		    This structure defines all security associations that SS can currently use.
    		</descr>
				<vector name="saList" type="NPF_F_wmaxBscpMobSaParams_t" brief="A list of Security Associations the SS can use.">
					<length name="saListLength" type="NPF_uint32_t" brief="Number of the Security Associations."></length>
				</vector>
			</struct>



			<struct type="NPF_F_wmaxBscpMobSaAesCcmPns_t" brief="Last used PNs TEKs for the Security Association. ">
				<descr>
					 PNs used for an old and new keys for AES-CCM alghoritm are defined.
 			</descr>
				<field name="valid" type="NPF_F_wmaxBscpMobKeyValid_t" brief="Status of the old and new keys"></field>
				<field name="oldKeyDlPn" type="NPF_uint32_t" brief="DL PN used by the old key. Zero when the old key is invalid."></field>
				<field name="oldKeyUlPn" type="NPF_uint32_t" brief="UL PN used by the old key. Zero when the old key is invalid."></field>
				<field name="newKeyDlPn" type="NPF_uint32_t" brief="DL PN used by the new key. Zero when the new key is invalid."></field>
				<field name="newKeyUlPn" type="NPF_uint32_t" brief="UL PN used by the new key. Zero when the new key is invalid."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobSaDynParams_t" brief="Security Association Dynamic State">
				<descr>
				This structure provides dynamic parameters of a single security association.
    		</descr>
				<field name="said" type="NPF_uint16_t" brief="Security Association ID"></field>
				<field name="cryptoSuite" type="NPF_F_wmaxBscpPkmCryptoSuite_t" brief="Crypto suite to be used with this security association"></field>
				<field name="aesCcmPns" type="NPF_F_wmaxBscpMobSaAesCcmPns_t" brief="PNs used by AES-CCM TEKs.">
					<descr>Valid only when cryptoSuite is NPF_F_WMAX_BSCP_CRYPTO_SUITE_AESCCM_CCM_AESKEY</descr>
				</field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobSsStateSaDyn_t" name="ssStateSaDyn" brief="Subscriber Dynamic Security Association State.">
				<descr>
     		    This structure defines the dynamic states of all security associations that SS can currently use.
    		</descr>
				<vector name="saList" type="NPF_F_wmaxBscpMobSaDynParams_t" brief="A list of Security Associations the SS can use.">
					<length name="saListLength" type="NPF_uint32_t" brief="Number of the Security Associations."></length>
				</vector>
			</struct>

			<struct type="NPF_F_wmaxBscpMobSvcFlowParams_t" brief="Service Flow Parameters">
				<descr>
		    	This structure defines parameters of a single service flow. Used to set/get service flows during HO.
  	        </descr>
				<field name="cid" type="NPF_uint16_t" brief="Connection ID (CID) on the serving BS"></field>
				<field name="sfId" type="NPF_uint32_t" brief="Specifies the SFID to be used with this service flow."></field>
				<field name="flowId" type="NPF_uint32_t" brief="Specifies the flow ID used to bind UL service flows with ASN tunnels; ignored for DL service flows"></field>
				<field name="caId" type="NPF_uint32_t" brief="Specifies a connection association ID used to bind service flows into UL/DL pairs.  This is an optional facility used to map an UL flow to a corresponding DL flow; can be used for routing DHCP replies to a particular connection"></field>
				<field name="serviceDirection" type="NPF_F_wmaxBscpServiceDirection_t" brief="Specifies the service flow direction (UL or DL)"></field>
				<field name="serviceType" type="NPF_F_wmaxBscpServiceType_t" brief="Specifies the service flow data delivery service."></field>
				<field name="serviceParms" type="NPF_F_wmaxBscpServiceParms_t" brief="Specifies data delivery service parameters"></field>
				<field name="qosProfileSpecList" type="NPF_F_wmaxBscpQosProfileSpecList_t" brief="Specifies a set of QOS profile specifications"></field>
				<field name="encryptionEnable" type="NPF_boolean_t" brief="Specifies whether to enable encryption for this service flow"></field>
				<field name="said" type="NPF_uint16_t" brief="(if encryptionEnable == true) --&gt; The security association onto which the service flow is mapped."></field>
				<field name="sduPackEnable" type="NPF_boolean_t" brief="false = no packing, true = packing"></field>
				<field name="crcEnable" type="NPF_boolean_t" brief="false = no CRC, true = CRC"></field>
				<field name="arqEnable" type="NPF_boolean_t" brief="false = no ARQ, true = ARQ"></field>
				<field name="arqParms" type="NPF_F_wmaxBscpArqParms_t" brief="(if arqEnable == true) --&gt; ARQ related parameters"></field>
				<field name="harqEnable" type="NPF_boolean_t" brief="Specifies whether to enable Hybrid ARQ for a service flow"></field>
				<field name="harqParms" type="NPF_F_wmaxBscpHarqParms_t" brief="HARQ-specific configuration; valid if HARQ state = ON only."></field>
				<field name="pagingEnable" type="NPF_boolean_t" brief="true = paging may be generated by this service flow, false = paging not generated"></field>
				<field name="phsEnable" type="NPF_boolean_t" brief="Specifies whether to enable PHS mode (false = PHS disabled, true = PHS enabled)"></field>
				<field name="csMode" type="NPF_F_wmaxBscpCsMode_t" brief="Specifies which convergence sublayer to use. NB: All convergence sublayer rules for a single service flow must use the same CS mode"></field>
				<field name="csRules" type="NPF_F_wmaxBscpCsRuleCommandList_t" brief="Specifies a list of CS rules; each with optional PHS rule"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobSsStateSvcFlow_t" name="ssStateSvcFlow" brief="Subscriber Service Flow State.">
				<descr>
   				This structure describes all service flows currently owned by the SS. All provisioned, admitted and active service flows 
     			are stored in this stucture.
    		</descr>
				<vector name="svcFlowList" type="NPF_F_wmaxBscpMobSvcFlowParams_t" brief="A list of Service Flows owned by the SS.">
					<length name="svcFlowListLength" type="NPF_uint32_t" brief="Number of the Service Flows."></length>
				</vector>
			</struct>
			<struct type="NPF_F_wmaxBscpMobSsStateSecondConn_t" name="" brief="Secondary Management Connection Parameters.">
				<descr>
     			This structure contains parameters of the secondary management connection. 
    		</descr>
				<field name="secConn" type="NPF_F_wmaxBscpOctetString_t" brief="Parameters of the secondary management connection">
					<descr>
       				    Vendor-specific parameters of the secondary management connection, e.g.  IP address 
       				    of the SS.
      			</descr>
				</field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobPscState_t" brief="Power Saving Class State">
				<field name="pscDef" type="NPF_F_wmaxBscpMobPscDef_t" brief="Power Saving Class definition."></field>
				<field name="slpId" type="NPF_uint16_t" brief="SLPID used recently for this Power Saving Class"></field>
				<field name="active" type="NPF_boolean_t" brief="True when this Power Saving Class is currently active, false when this class is not active"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobSsStateSleep_t" brief="Subscriber Sleep Mode State">
				<descr>
			This structure describes the status of Power Saving Classes defined for given SS.
			</descr>
				<vector name="pscList" type="NPF_F_wmaxBscpMobPscState_t" brief="A list of the Power Saving Classes owned by the subscriber.">
					<length name="pscListLength" type="NPF_uint32_t" brief="Number of the Power Saving Classes."></length>
				</vector>
			</struct>
			<struct type="NPF_F_wmaxBscpMobSsStateGetArgs_t" name="" brief="SS Get State Arguments">
				<descr>
    	 		 This data structure defines parameters of NPF_F_wmaxBscpMobSsStateGet() function.
    		</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber handle"></field>
				<field name="reqMask" type="NPF_uint8_t" brief="Defines which state parameters are requested. See: SS State Parameters Mask."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobSsStateGetResponseArgs_t" name="" brief="SS Set State Response Arguments.">
				<descr>
     		   Asynchronous response for NPF_F_wmaxBscpMobSsStateGet(). This data structure contains the complete status of a given SS.
        	</descr>
				<field name="ssMacAddress" type="NPF_uint8_t" size="6" brief="Subscriber station 48-bits address."></field>
				<field name="parmMask" type="NPF_uint8_t" brief="Defines which state parameters are valid. See: SS State Parameters Mask."></field>
				<field name="ssStateCapabilities" type="NPF_F_wmaxBscpMobSsStateCapabilities_t *" brief="Subscriber capabilities."></field>
				<field name="ssStateAuth" type="NPF_F_wmaxBscpMobSsStateAuth_t *" brief="Subscriber authorization state."></field>
				<field name="ssStateSa" type="NPF_F_wmaxBscpMobSsStateSa_t *" brief="Subscriber Security Association state."></field>
				<field name="ssStateSvcFlow" type="NPF_F_wmaxBscpMobSsStateSvcFlow_t *" brief="Subscriber Service Flow state."></field>
				<field name="ssStateSecondConn" type="NPF_F_wmaxBscpMobSsStateSecondConn_t *" brief="Secondary connection state. Not valid for unmanaged SS."></field>
				<field name="ssStateSleep" type="NPF_F_wmaxBscpMobSsStateSleep_t *" brief="Sleep mode state."></field>
			</struct>
			
			<struct type="NPF_F_wmaxBscpMobHoProcessOpt_t" name="" brief="HO Process Optimizations">
				<descr>
   	 		    This data structure defines desider level of the HO Process Optimization.    	 		    
   	 		    Send to SS in RNG-RSP using TLV 21. This structure is used only in case of optimized HO, so only selected 
   	 		    bits of TLV 21 are configurable - other are set by implementation automaticaly.
     		</descr>
				<field name="omitTekCreation" type="NPF_boolean_t" brief="Omit TEK creation.">
					<descr>
						True means that TEKs from the source BS should be used. False means that new TEKs must be recreated and transfered to SS
						using SA TEK Update TLV.
					</descr> 
				</field>				
				<field name="refreshIp" type="NPF_boolean_t" brief="Status of the IP address assigned to the subscriber after re-entry.">
					<descr>True means that the subscriber must start a procedure of refreshing its IP address. False means that IP address remain valid.
					</descr> 
				</field>				
			</struct>
			<struct type="NPF_F_wmaxBscpMobSsStateSetArgs_t" name="" brief="SS Set State Arguments">
				<descr>
   	 		    This data structure defines parameters of a SS State Set FAPI call.
     		</descr>
				<field name="macHandle" type="NPF_F_wmaxBscpMacHandle_t" brief="MAC Instance Handle"></field>
				<field name="ssMacAddress" type="NPF_uint8_t" size="6" brief="Subscriber station 48-bits address."></field>
				<field name="parmMask" type="NPF_uint8_t" brief="Defines which state parameters are valid. See: SS State Parameters Mask."></field>
				<field name="ssStateCapabilities" type="NPF_F_wmaxBscpMobSsStateCapabilities_t *" brief="Subscriber capabilities."></field>
				<field name="ssStateAuth" type="NPF_F_wmaxBscpMobSsStateAuth_t *" brief="Subscriber authorization state."></field>
				<field name="ssStateSa" type="NPF_F_wmaxBscpMobSsStateSa_t *" brief="Subscriber Security Association state."></field>
				<field name="ssStateSvcFlow" type="NPF_F_wmaxBscpMobSsStateSvcFlow_t *" brief="Subscriber Service Flow state."></field>
				<field name="ssStateSecondConn" type="NPF_F_wmaxBscpMobSsStateSecondConn_t *" brief="Secondary connection state. Not valid for unmanaged SS."></field>
				<field name="ssStateSleep" type="NPF_F_wmaxBscpMobSsStateSleep_t *" brief="Sleep mode state."></field>
				<field name="processOpt" type="NPF_F_wmaxBscpMobHoProcessOpt_t" brief="HO process optimization level.">					
				</field>				
			</struct>

			<struct type="NPF_F_wmaxBscpMobSvcFlowDesc_t" name="NPF_F_wmaxBscpMobSvcFlowDesc_n" brief="Service Flow status and handle">
				<descr>
   				This structure holds the handle to the created service flow, its SF ID and a list of related CS rules. It is used by the callback 
   				of NPF_F_wmaxBscpMobSsStateSet() function to return a status and a handle of the service flow prepared 
   				on target BS before the HO. 	
    		</descr>
				<field name="errorType" type="NPF_F_wmaxBscpErrorType_t" brief="Operation result, indicating whether a service flow was really created"></field>
				<field name="svcFlowHandle" type="NPF_F_wmaxBscpSvcFlowHandle_t" brief="A handle to the newly created service flow."></field>
				<field name="sfId" type="NPF_uint32_t" brief="Service Flow ID."></field>
				<vector name="csRulesList" type="NPF_F_wmaxBscpCsRuleHandle_t" brief="A list of CS Rule handles for this SS.">
					<descr>
					The order of CS rule handlers is identical to the order of CS rules specified as arguments to NPF_F_wmaxBscpMobSsStateSet() function.
				</descr>
					<length name="csRulesListLength" type="NPF_uint32_t" brief="Number of the CS Rules."></length>
				</vector>
			</struct>
			<struct type="NPF_F_wmaxBscpMobSaDesc_t" name="NPF_F_wmaxBscpMobSaDesc_n" brief="Security Association status and handle">
				<descr>
   				This structure holds the handle to the created security association and its SAID. It is used by the callback 
   				of NPF_F_wmaxBscpMobSsStateSet() function to return a status and a handle of the security association prepared 
   				on target BS before the HO. 
    		</descr>
				<field name="errorType" type="NPF_F_wmaxBscpErrorType_t" brief="Operation result, indicating whether a service flow was really created"></field>
				<field name="saHandle" type="NPF_F_wmaxBscpSaHandle_t" brief="A handle to the newly created security association."></field>
				<field name="oldSaid" type="NPF_uint16_t" brief="Original Security Association Id from the source BS"></field>
				<field name="newSaid" type="NPF_uint16_t" brief="New Security Association Id used on the target BS"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobSsStateSetResponseArgs_t" name="" brief="SS Set State Response Arguments">
				<descr>
   	 		    Asynchronous response for NPF_F_wmaxBscpMobSsStateSet(). This data structure contains the result of adding a new SS object.
   			</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="A handle to the newly created SS."></field>
				<field name="ssBasCID" type="NPF_uint16_t" brief="BASIC management channel CID."></field>
				<field name="ssPriCID" type="NPF_uint16_t" brief="PRIMARY management channel CID."></field>
				<field name="ssSecCID" type="NPF_uint16_t" brief="SECONDARY management channel CID (Zero if not used)"></field>
				<field name="hoID" type="NPF_uint8_t" brief="HO ID - idnetifier that may be used by SS indtead of its MAC address during HO"></field>
				<vector name="svcFlowHandleList" type="NPF_F_wmaxBscpMobSvcFlowDesc_t" brief="A list of Service Flows created for this SS.">
					<length name="svcFlowHandleListLength" type="NPF_uint32_t" brief="Number of the Service Flows."></length>
				</vector>
				<vector name="saHandleList" type="NPF_F_wmaxBscpMobSaDesc_t" brief="A list of Security Associations created for this SS.">
					<descr>The primary SA have the same SAID as basic connection ID returned in ssBasCID</descr>
					<length name="saHandleListLength" type="NPF_uint32_t" brief="Number of the SAs."></length>
				</vector>
			</struct>
			<enum type="NPF_F_wmaxBscpMobSvcLevelPred_t" brief="Sevice Level Prediction">
				<descr>
    			This structure describes the expected level of services available for a subscriber on the target BS.
    			</descr>
				<field name="NPF_F_WMAX_BSCP_MOB_NO_SERVICE_POSSIBLE" value="0" brief="No service possible for a given subscriber."></field>
				<field name="NPF_F_WMAX_BSCP_MOB_SOME_SERVICE_POSSIBLE" brief="Some service possible for a given subscriber."></field>
				<field name="NPF_F_WMAX_BSCP_MOB_ALL_SERVICE_POSSIBLE" brief="All services possible a for a given subscriber."></field>
				<field name="NPF_F_WMAX_BSCP_MOB_SERVICE_NO_INFO" brief="No service possible for a given subscriber."></field>
			</enum>
			<struct type="NPF_F_wmaxBscpMobHoBs_t" name="" brief="Preferred Target BS Parameters">
				<descr>
   			    Parameters of the BS preferred as a Target BS for handover.
     		</descr>
				<field name="bsId" type="NPF_uint8_t" size="6" brief="Basestation Id.">
					<descr>
              	        48-bits BS address. Mandatory field, but send in MOB-NBR_ADV only when 
               	        omitBsId of the NPF_F_wmaxBscpMobNbrConf_t is set to false.
             	 </descr>
				</field>
				<field type="NPF_uint8_t" name="subchannelIndex" brief="For OFDMA - DL subchannel index"></field>
				<field name="hoProcessOptimisation" type="NPF_uint8_t" brief="handover process optimization bitmask.">
					<descr>
            	     Specified what HO optimization are supported by neigbor BS. See: HO Optimizations               	          
               	</descr>
				</field>
				<field type="NPF_F_wmaxBscpMobSvcLevelPred_t" name="svcLevelPred" brief="Service level prediction"></field>
				<field name="networkAssistance" type="NPF_boolean_t" brief="true - network assisted handover, false - handover without network assistance"></field>
				<field name="useHoId" type="NPF_boolean_t" brief="true - use specified HO_ID during initial ranging, false - use SS address during initial ranging"></field>
				<field name="hoId" type="NPF_uint8_t" brief="HO_ID to be used during initial ranging to target BS. Valid only when useHoId is set to true."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobSsHoArgs_t" name="" brief="Perform Handover Arguments">
				<descr>
     	 		 This data structure defines parameters of NPF_F_wmaxBscpMobSsHo().
   			</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber handle"></field>
				<field name="hoAllowed" type="NPF_boolean_t" brief="true - handover allowed, false - not recommended. When false, the rest of arguments is invalid"></field>
				<field name="delayHoConfirmation" type="NPF_boolean_t">
					<descr>
    				True - delay handover confirmation till DL packets are transmited 
    				(as configured in NPF_F_wimaxBscpMacAdd() function). Ignored, 
    				when delaying handover is already disabled in NPF_F_wimaxBscpMacAdd().
    				False - do not delay handover confirmation."&gt;
    			</descr>
				</field>
				<field name="mandatoryHoResp" type="NPF_boolean_t" brief="true - HO response is mandatory, false - recommended only. TBD - do we really need it here?"></field>
				<field name="resourceRetention" type="NPF_boolean_t" brief="true - connection info should retain, false - all connection info will be released immediately"></field>
				<field name="resourceRetentionTime" type="NPF_uint16_t" brief="Resource retention time.">
					<descr>
 				       If this value is non-zero, it specifies (in 100ms units) how long the SS resources will be kept on the serving BS. When set to zero, 
 				       retention time negotiated during network entry will be used. Valid only when resourceRetension is set to true.
 				</descr>
				</field>
				<vector name="hoBsList" type="NPF_F_wmaxBscpMobHoBs_t" brief="A list of BSes the subscriber may switch to. 
	         	             The order of elements indicates the preference (first - most preferred one).">
					<length name="hoBsListLength" type="NPF_uint32_t" brief="Number of BSes specified in hoBsList."></length>
				</vector>
			</struct>
		</section>
		<section name="Handover Support Functions">
			<func name="NPF_F_wmaxBscpMobSsStateGet" type="NPF_error_t" brief="SS Get State" xdrid="RPC_WMAX_BSCP_MOB_SS_STATE_GET">
				<descr>
        			This function initiate reading of the complete state of a given SS, including its capabilities, authorization state and keys, security associations and
        			service flows. The SS state is returned by the callback function.
       		</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
       				Identifies the callback function to be called when the operation completes
        		</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
          				A unique application invocation context that will be supplied to the callback function
       			</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
         				Defines whether a callback will be called after completing the action requested by the function call.
      			</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
        				Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
       			</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpMobSsStateGetArgs_t *" name="stateGetArgs" xdr="yes">
					<descr>
        			 Arguments for getting SS state.
       			</descr>
				</param>
				<return>
					<descr>
            			Error code indicating whether function call was successful.
           		</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
            				The operation is in progress.
           			</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
              				The callback handle is invalid.
           			</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
            				The operation cannot be completed successfully because
            				of problems encountered when handling the input parameters.
          			</descr>
					</retval>
				</return>
				<callback>
					<descr>
        				If errorReporting is set to ALWAYS, a callback is invoked to
        				indicate that the operation has been completed. The callback
        				is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_STATE_GET.
            		</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARAMS" brief="Invalid parameter."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_OBJ_NONEXISTANT" brief="Specified subscriber does not exist."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpMobSsStateSet" type="NPF_error_t" brief="SS Set State" xdrid="RPC_WMAX_BSCP_MOB_SS_STATE_SET">
				<descr>
               			During handover, this function create a new SS object on this BS (target BS) and sets its state 
               			(like capabilities, authorization state, security associations and service flows), 
               			based on the information from the BS currently serving this SS. 
               			The newly created SS object is ready to serve a subscriber performing handover to this BS.
            			 </descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
               				Identifies the callback function to be called when the operation completes
               			</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
               				A unique application invocation context that will be supplied to the callback function
               			</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
               				Defines whether a callback will be called after completing the action requested by the function call.
               			</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
               				Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
               			</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpMobSsStateSetArgs_t *" name="stateSetArgs" xdr="yes">
					<descr>
               			 Arguments for adding a new SS object and its state.
               			</descr>
				</param>
				<return>
					<descr>
                   			Error code indicating whether function call was successful.
                   		</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
                   				The operation is in progress.
                   			</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
                   				The callback handle is invalid.
                   			</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
                   				The operation cannot be completed successfully because
                   				of problems encountered when handling the input parameters.
                   			</descr>
					</retval>
				</return>
				<callback>
					<descr>
               				If errorReporting is set to ALWAYS, a callback is invoked to
               				indicate that the operation has been completed. The callback
               				is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_HO.
                   		</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARAMS" brief="Invalid parameter."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_OBJ_EXISTS" brief="SS object already exists."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpMobSsHo" type="NPF_error_t" brief="Confirm Handover to Another BS" xdrid="RPC_WMAX_BSCP_MOB_SS_HO">
				<descr>
               			This function confirms the subscriber handover request. 
               			It should be called after recieving HO request from the subscriber 
               			(event NPF_F_WMAX_BSCP_EVENT_MOB_SS_HO_REQUEST). 
               			After that call, subscriber resources are not removed automatically. Controlling application must call 
               			NPF_F_wmaxBscpSsDelete() function separately. Subscriber resource deleting must be consistent 
               			with the resource retention parameters specified in hoArgs argument.
            			 </descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
               				Identifies the callback function to be called when the operation completes
               			</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
               				A unique application invocation context that will be supplied to the callback function
               			</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
               				Defines whether a callback will be called after completing the action requested by the function call.
               			</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
               				Identifies the forwarding element where the action will be executed. 
               				This handle is obtained during RPC connection establishment.
               			</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpMobSsHoArgs_t *" name="hoArgs" xdr="yes">
					<descr>
               			 Arguments for performing HO.
               			</descr>
				</param>
				<return>
					<descr>
                   			Error code indicating whether function call was successful.
                   		</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
                   				The operation is in progress.
                   			</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
                   				The callback handle is invalid.
                   			</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
                   				The operation cannot be completed successfully because
                   				of problems encountered when handling the input parameters.
                   			</descr>
					</retval>
				</return>
				<callback>
					<descr>
               				If errorReporting is set to ALWAYS, a callback is invoked to
               				indicate that the operation has been completed. The callback
               				is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_STATE_SET.
                   		</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARAMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpMobSsHoReq" type="NPF_error_t" brief="BS Requests Handover to Another BS" xdrid="RPC_WMAX_BSCP_MOB_SS_HO_REQ">
				<descr>
               			This function tells the subscriber to perform handover to another BS. 
               			It should be used in case of BS-initiated HO procedure. 
               			After this call, subscriber resources are not removed automatically. Controlling application must call 
               			NPF_F_wmaxBscpSsDelete() function separately. Subscriber resource deleting must be consistent 
               			with the resource retention parameters specified in hoArgs argument.
            			 </descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
               				Identifies the callback function to be called when the operation completes
               			</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
               				A unique application invocation context that will be supplied to the callback function
               			</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
               				Defines whether a callback will be called after completing the action requested by the function call.
               			</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
               				Identifies the forwarding element where the action will be executed. 
               				This handle is obtained during RPC connection establishment.
               			</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpMobSsHoArgs_t *" name="hoArgs" xdr="yes">
					<descr>
               			 Arguments for performing HO.
               			</descr>
				</param>
				<return>
					<descr>
                   			Error code indicating whether function call was successful.
                   		</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
                   				The operation is in progress.
                   			</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
                   				The callback handle is invalid.
                   			</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
                   				The operation cannot be completed successfully because
                   				of problems encountered when handling the input parameters.
                   			</descr>
					</retval>
				</return>
				<callback>
					<descr>
               				If errorReporting is set to ALWAYS, a callback is invoked to
               				indicate that the operation has been completed. The callback
               				is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_HO_REQ.
                   		</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARAMS" brief="Invalid parameter."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_OBJ_INVALID_STATE" brief="Invalid state (e.g. MS-initiated HO already started)."></retval>
				</callback>
			</func>
		</section>
		<section name="Idle Mode Data Types">
			<typedef name="NPF_F_wmaxBscpMobIdleTransId_t" type="NPF_uint32_t">
				<descr>
    				Location Update transaction id. Used to match location update requests and responses.
    			</descr>
			</typedef>
			<define brief="Idle Mode Resource Retention Mask">
				<descr>
    				These mask bits are used to indicate which information are retain and managed when SS is in Idle mode.
    		    </descr>
				<field name="NPF_F_WMAX_BSCP_MOB_IDLE_RETAIN_SBC" brief="Retain SS service and operational information associated with SBC-REQ/RSP messages">
					<value>(0x01ull &lt;&lt; 0)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_IDLE_RETAIN_PKM" brief="Retain SS service and operational information associated with PKM-REQ/RSP messages">
					<value>(0x01ull &lt;&lt; 1)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_IDLE_RETAIN_REG" brief="Retain SS service and operational information associated with REG-REQ/RSP messages">
					<value>(0x01ull &lt;&lt; 2)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_IDLE_ADDRESS" brief="Retain SS service and operational information associated with Network Address">
					<value>(0x01ull &lt;&lt; 3)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_IDLE_RETAIN_TIME" brief="Retain SS service and operational information associated with Time of Day">
					<value>(0x01ull &lt;&lt; 4)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_IDLE_RETAIN_TFTP" brief="Retain SS service and operational information associated with TFTP messages">
					<value>(0x01ull &lt;&lt; 5)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_IDLE_RETAIN_FULL" brief="Retain SS service and operational information associated
                                with Full service (MAC state machines, CS classifier
                                information, etc.). The information retained by setting this value 
                                does not include those information associated with SBC-REQ/RSP
                                messages, PKM-REQ/RSP messages, REG-REQ/RSP messages, 
                                Network Address, Time of Day, and TFTP messages
                                unless otherwise specified by setting other values">
					<value>(0x01ull &lt;&lt; 6)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_IDLE_PAGING_PREFERENCE" brief="Consider Paging Preference of each Service Flow in resource retention.">
					<value>(0x01ull &lt;&lt; 7)</value>
				</field>
			</define>
			<struct type="NPF_F_wmaxBscpMobSsPagingInfo_t" brief="Paging Information">
				<descr>
					This structure defines paging information used for SS in the idle mode.					
				</descr>
				<field name="pagingCycle" type="NPF_uint16_t" brief="PAGING CYCLE."></field>
				<field name="pagingOffset" type="NPF_uint8_t" brief="PAGING OFFSET."></field>
				<field name="pagingGroupId" type="NPF_uint16_t" brief="Paging group ID."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobSsIdleArgs_t" brief="Arguments of idle mode request.">
				<descr>
					This structure defines arguments of NPF_F_wimaxBscpMobSsIdle()and NPF_F_wimaxBscpMobSsIdleReq()functions
					Idle mode parameters defined here are send in DREG-CMD to SS.					
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber handle."></field>
				<field name="pagingInfo" type="NPF_F_wmaxBscpMobSsPagingInfo_t" brief="Paging Information"></field>
				<field name="pagingControllerId" type="NPF_uint8_t" size="6" brief="Paging Controller ID."></field>
				<field name="retainInfo" type="NPF_uint8_t" brief="Resource retention info bitmask. See: Idle Mode Resource Retention Mask"></field>
				<field name="hashSkipThresholdValid" type="NPF_boolean_t" brief="TRUE - MAC Hash Skip Threshold parameter is valid and should be send. FALSE - skip threshold should not be send"></field>
				<field name="hashSkipThreshold" type="NPF_uint16_t" brief="MAC Hash Skip Threshold. Maximum number of successive MOB_PAG-ADV messages that may be sent from a BS without individual notification for this MS"></field>
			</struct>
			<enum type="NPF_F_wmaxBscpMobSsLocUpdateRes_t" brief="Location Update result">
				<descr>
					Defines possible results of the location update.
				</descr>
				<field name="NPF_F_WMAX_BSCP_MOB_LOC_UPDATE_SUCCESS" brief="Secure Location Update success indicated by the Paging Controler. However, 
				            when the original message is not correctly authenticated, the whole secure
				             location update is not succesful and 
				            SS must re-entry the network anyway."></field>
				<field name="NPF_F_WMAX_BSCP_MOB_LOC_UPDATE_FAILURE" brief="Secure Location Update failure - network re-entry must be performed by SS"></field>	
			</enum>
			<struct type="NPF_F_wmaxBscpMobSsLocUpdateArgs_t" name="" brief="SS Locaton Update  Arguments">
				<descr>
      	 		    Arguments of NPF_F_wmaxBscpMobSsLocUpdate() function used to perform secure/unsecure location update for SS in Idle Mode.
      			</descr>
				<field name="ssLocUpdateHandle" type="NPF_F_wmaxBscpSsLocUpdateHandle_t" brief="A handle to the object created during Location Update Procedure.">
					<descr>The handle returned by the Location Update event in NPF_F_wmaxBscpEventMobSsLocUpdateIndArgs_t should be used here.</descr>
				</field>
				<field name="transactionId" type="NPF_F_wmaxBscpMobIdleTransId_t" brief="Location Update Transaction Id. 
                           Value received in the corresponding location update event must be specified here."></field>
				<field name="pagingInfoValid" type="NPF_boolean_t" brief="Paging Information valid.">
					<descr>True when paging information has been changed and should be send to the subscriber, false otherwise.</descr>
				</field>
				<field name="pagingInfo" type="NPF_F_wmaxBscpMobSsPagingInfo_t" brief="Paging Information. Valid only when pagingInfoValid is true."></field>
				<field name="pagingControllerIdValid" type="NPF_boolean_t" brief="Paging Information valid.">
					<descr>True when paging controller ID  has been changed and should be send to the subscriber, false otherwise.</descr>
				</field>
				<field name="pagingControllerId" type="NPF_uint8_t" size="6" brief="Paging Controller ID. Valid only when pagingControllerIdValid is true."></field>
				<field name="result" type="NPF_F_wmaxBscpMobSsLocUpdateRes_t" brief="Location Update result. Note, that actual procedure result 
                            is returned in the callback after original message authentication."></field>
				<field name="authState" type="NPF_F_wmaxBscpMobSsStateAuth_t *" brief="Authorization context state when result is NPF_F_WMAX_BSCP_MOB_LOC_UPDATE_SUCCESS
				           or NULL when context unavailable (result is NPF_F_WMAX_BSCP_MOB_LOC_UPDATE_FAILURE)"></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobSsLocUpdateResponseArgs_t" name="" brief="SS Locaton Update Response Arguments">
				<descr>
      	 		    Asynchronous response to NPF_F_wmaxBscpMobSsLocUpdate(). The actual result of possible secure location update is known here - 
      	 		    since message authentication of previously received RNG-REQ message is performed by NPF_F_wmaxBscpMobSsLocUpdate() function.
      			</descr>
				<field name="ssLocUpdateHandle" type="NPF_F_wmaxBscpSsLocUpdateHandle_t" brief="A handle to the object resposnable for the Location Update Procedure."></field>
				<field name="transactionId" type="NPF_F_wmaxBscpMobIdleTransId_t" brief="Location Update Transaction Id. 
                           Value received in the corresponding location update event must be specified here."></field>
				<field name="result" type="NPF_F_wmaxBscpMobSsLocUpdateRes_t" brief="Actual Location Update result."></field>
			</struct>
			<enum type="NPF_F_wmaxBscpMobSsPageActionCode_t" brief="Mandatory Action After Paging">
				<descr>
					Defines possible actions SS must take after receiving paging request.					
				</descr>
				<field name="NPF_F_WMAX_BSCP_MOB_PAGE_NO_ACTION" brief="Do not perform any actions."></field>
				<field name="NPF_F_WMAX_BSCP_MOB_PAGE_LOCATION_UPDATE" brief="Perform location update."></field>
				<field name="NPF_F_WMAX_BSCP_MOB_PAGE_NETWORK_ENTRY" brief="Perform network re-entry."></field>
			</enum>
			<struct type="NPF_F_wmaxBscpMobSsPageParams_t" name="" brief="SS Paging  Parameters">
				<descr>
      	 		    Parameters to page a single SS in the Idle Mode.
      			</descr>
				<field name="ssMacAddress" type="NPF_uint8_t" size="6" brief="Subscriber station 48-bits address."></field>
				<field name="pagingInfo" type="NPF_F_wmaxBscpMobSsPagingInfo_t" brief="Paging Information (cycle, offset, paging group)"></field>
				<field name="actionCode" type="NPF_F_wmaxBscpMobSsPageActionCode_t" brief="Action code."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobSsPageArgs_t" name="" brief="SS Paging  Arguments">
				<descr>
      	 		    Arguments of NPF_F_wmaxBscpMobSsPage() function used to page a given SS in the Idle Mode.
      			</descr>
				<field name="macHandle" type="NPF_F_wmaxBscpMacHandle_t" brief="MAC Instance Handle"></field>
				<vector name="ssList" type="NPF_F_wmaxBscpMobSsPageParams_t" brief="A list of SSes to page.">
					<length name="ssListLength" type="NPF_uint32_t" brief="Number of SSes specified in ssList."></length>
				</vector>
			</struct>
			<struct type="NPF_F_wmaxBscpMobSsIdleAuthSetArgs_t" name="" brief="SS Authorization Set Arguments">
				<descr>
   	 				This data structure defines parameters of NPF_F_wmaxBscpMobSsIdleSet().
     			</descr>
				<field name="macHandle" type="NPF_F_wmaxBscpMacHandle_t" brief="MAC Instance Handle"></field>
				<field name="ssMacAddress" type="NPF_uint8_t" size="6" brief="Subscriber station 48-bits address."></field>
				<field name="parmMask" type="NPF_uint8_t" brief="Defines which state parameters are valid. See: SS State Parameters Mask."></field>
				<field name="ssStateCapabilities" type="NPF_F_wmaxBscpMobSsStateCapabilities_t *" brief="Subscriber capabilities."></field>
				<field name="ssStateAuth" type="NPF_F_wmaxBscpMobSsStateAuth_t *" brief="Subscriber authorization state."></field>
				<field name="ssStateSa" type="NPF_F_wmaxBscpMobSsStateSa_t *" brief="Subscriber Security Association state."></field>
				<field name="refreshIp" type="NPF_boolean_t" brief="Status of the IP address assigned to the subscriber after re-entry.">
					<descr>True means that the subscriber must start a procedure of refreshing its IP address. False means that IP address remain valid.
					</descr> 
				</field>								
			</struct>
			<struct type="NPF_F_wmaxBscpMobSsIdleAuthSetResponseArgs_t" name="" brief="SS Idle Authorization State Response Arguments">
				<descr>
   	 				Asynchronous response for NPF_F_wmaxBscpMobSsIdleAuthSet(). This data structure contains the result of adding a new SS object.
   				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="A handle to the newly created SS."></field>
				<field name="ssBasCID" type="NPF_uint16_t" brief="BASIC management channel CID."></field>
				<field name="ssPriCID" type="NPF_uint16_t" brief="PRIMARY management channel CID."></field>
				<field name="ssSecCID" type="NPF_uint16_t" brief="SECONDARY management channel CID (Zero if not used)"></field>
				<vector name="saHandleList" type="NPF_F_wmaxBscpMobSaDesc_t" brief="A list of Security Associations created for this SS.">
					<descr>The primary SA have the same SAID as basic connection ID returned in ssBasCID</descr>
					<length name="saHandleListLength" type="NPF_uint32_t" brief="Number of the SAs."></length>
				</vector>
			</struct>
		</section>
		<section name="Idle Mode Functions">
			<func name="NPF_F_wmaxBscpMobSsIdle" type="NPF_error_t" brief="MS-initiated switch SS to Idle Mode" xdrid="RPC_WMAX_BSCP_MOB_SS_IDLE">
				<descr>
               			This function tells the subscriber to switch to Idle state. It is used after subscriber 
               			request to switch to the idle mode (event NPF_F_WMAX_BSCP_EVENT_MOB_SS_IDLE was generated).
               			Subscriber resources are not removed automatically. Controlling application must call 
               			NPF_F_wmaxBscpSsDelete() function separately. Subscriber resource deleting must be consistent 
               			with the resource retention parameters specified in idleArgs argument.
            			 </descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
               				Identifies the callback function to be called when the operation completes
               			</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
               				A unique application invocation context that will be supplied to the callback function
               			</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
               				Defines whether a callback will be called after completing the action requested by the function call.
               			</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
               				Identifies the forwarding element where the action will be executed. 
               				This handle is obtained during RPC connection establishment.
               			</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpMobSsIdleArgs_t *" name="idleArgs" xdr="yes">
					<descr>
               			 Arguments for switching to idle mode.
               			</descr>
				</param>
				<return>
					<descr>
                   			Error code indicating whether function call was successful.
                   		</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
                   				The operation is in progress.
                   			</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
                   				The callback handle is invalid.
                   			</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
                   				The operation cannot be completed successfully because
                   				of problems encountered when handling the input parameters.
                   			</descr>
					</retval>
				</return>
				<callback>
					<descr>
               				If errorReporting is set to ALWAYS, a callback is invoked to
               				indicate that the operation has been completed. The callback
               				is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_IDLE.
                   		</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARAMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpMobSsIdleReq" type="NPF_error_t" brief="BS-initiated switch SS to Idle Mode" xdrid="RPC_WMAX_BSCP_MOB_SS_IDLE_REQ">
				<descr>
               			This function tells the subscriber to switch to Idle state, by sending DREG-CMD message.
               			Callback is returned when DREG-REQ message confirming this request is recieved from the subscriber.
               			Subscriber resources are not removed automatically. Controlling application must call 
               			NPF_F_wmaxBscpSsDelete() function separately. Subscriber resource deleting must be consistent 
               			with the resource retention parameters specified in idleArgs argument.
            	</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
               				Identifies the callback function to be called when the operation completes
               		</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
               				A unique application invocation context that will be supplied to the callback function
               		</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
               				Defines whether a callback will be called after completing the action requested by the function call.
               			</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
               				Identifies the forwarding element where the action will be executed. 
               				This handle is obtained during RPC connection establishment.
               			</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpMobSsIdleArgs_t *" name="idleArgs" xdr="yes">
					<descr>
               			 Arguments for switching to idle mode.
               		</descr>
				</param>
				<return>
					<descr>
                   			Error code indicating whether function call was successful.
                   		</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
                   				The operation is in progress.
                   			</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
                   				The callback handle is invalid.
                   			</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
                   				The operation cannot be completed successfully because
                   				of problems encountered when handling the input parameters.
                   			</descr>
					</retval>
				</return>
				<callback>
					<descr>
               				If errorReporting is set to ALWAYS, a callback is invoked to
               				indicate that the operation has been completed. The callback
               				is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_IDLE_REQ.               				
                   	</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARAMS" brief="Invalid parameter."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_TIME_OUT" brief="DREG-REQ message confirming idle mode request not recievd from the subscriber."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpMobSsLocUpdate" type="NPF_error_t" brief="Perform SS Location Update " xdrid="RPC_WMAX_BSCP_MOB_SS_LOC_UPDATE">
				<descr>
               			This function generate a response on the subscriber's request of Location Update.
               			It should be called after receiving NPF_F_WMAX_BSCP_EVENT_MOB_SS_LOC_UPDATE event.               			               			
               </descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
               				Identifies the callback function to be called when the operation completes
               			</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
               				A unique application invocation context that will be supplied to the callback function
               			</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
               				Defines whether a callback will be called after completing the action requested by the function call.
               			</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
               				Identifies the forwarding element where the action will be executed. 
               				This handle is obtained during RPC connection establishment.
               			</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpMobSsLocUpdateArgs_t *" name="locUpdateArgs" xdr="yes">
					<descr>
               			 Location Update Arguments.
               			</descr>
				</param>
				<return>
					<descr>
                   			Error code indicating whether function call was successful.
                   		</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
                   				The operation is in progress.
                   			</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
                   				The callback handle is invalid.
                   			</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
                   				The operation cannot be completed successfully because
                   				of problems encountered when handling the input parameters.
                   			</descr>
					</retval>
				</return>
				<callback>
					<descr>
               				If errorReporting is set to ALWAYS, a callback is invoked to
               				indicate that the operation has been completed. The callback
               				is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_LOC_UPDATE.
                   		</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARAMS" brief="Invalid parameter."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_AUTH" brief="Message authentication failed - unsecure location update is performed."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpMobSsPage" type="NPF_error_t" brief="Page SS" xdrid="RPC_WMAX_BSCP_MOB_SS_PAGE">
				<descr>
               			This function initiate paging of a given SS.               			               			
               </descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
               				Identifies the callback function to be called when the operation completes
               			</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
               				A unique application invocation context that will be supplied to the callback function
               			</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
               				Defines whether a callback will be called after completing the action requested by the function call.
               			</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
               				Identifies the forwarding element where the action will be executed. 
               				This handle is obtained during RPC connection establishment.
               			</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpMobSsPageArgs_t *" name="pageArgs" xdr="yes">
					<descr>
               			 Paging Arguments.
               		</descr>
				</param>
				<return>
					<descr>
                   			Error code indicating whether function call was successful.
                   		</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
                   				The operation is in progress.
                   			</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
                   				The callback handle is invalid.
                   			</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
                   				The operation cannot be completed successfully because
                   				of problems encountered when handling the input parameters.
                   			</descr>
					</retval>
				</return>
				<callback>
					<descr>
               				If errorReporting is set to ALWAYS, a callback is invoked to
               				indicate that the operation has been completed. The callback
               				is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_PAGE.
                   		</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARAMS" brief="Invalid parameter."></retval>
				</callback>
			</func>
			<func name="NPF_F_wmaxBscpMobSsIdleAuthSet" type="NPF_error_t" brief="Set Authorization Context for SS Re-entering After Idle" xdrid="RPC_WMAX_BSCP_MOB_SS_IDLE_AUTH_SET">
				<descr>
               			This function is used to provide authorization context for the SS 
               			re-entering the network after beeing in the Idle mode.
               			It should be called in response to NPF_F_WMAX_BSCP_EVENT_MOB_SS_REENTRY_IDLE event.
               			During network re-entry, this function create a new SS object on this BS (target BS) and sets its state 
               			(like capabilities and  authorization state), 
               			based on the information from the Paging Controler. 
               			After this function, the subscriber object will send NPF_F_WMAX_BSCP_EVENT_SS_STATE
               			events LINK_ACTIVE and OPERATIONAL and will be ready to establish service flows.               			
            	</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
               				Identifies the callback function to be called when the operation completes
               		</descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator" xdr="no">
					<descr>
               				A unique application invocation context that will be supplied to the callback function
               		</descr>
				</param>
				<param io="in" type="NPF_errorReporting_t" name="errorReporting" xdr="no">
					<descr>
               				Defines whether a callback will be called after completing the action requested by the function call.
               			</descr>
				</param>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
               				Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
               			</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpMobSsIdleAuthSetArgs_t *" name="authSetArgs" xdr="yes">
					<descr>
               			 Arguments for SS authorization context.
               		</descr>
				</param>
				<return>
					<descr>
                   			Error code indicating whether function call was successful.
                   	</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
                   				The operation is in progress.
                   			</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
                   				The callback handle is invalid.
                   			</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
                   				The operation cannot be completed successfully because
                   				of problems encountered when handling the input parameters.
                   			</descr>
					</retval>
				</return>
				<callback>
					<descr>
               				If errorReporting is set to ALWAYS, a callback is invoked to
               				indicate that the operation has been completed. The callback
               				is identified by NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_IDLE_AUTH_SET.
                   		</descr>
					<retval name="NPF_NO_ERROR" brief="Operation completed successfully."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_INVALID_PARAMS" brief="Invalid parameter."></retval>
					<retval name="NPF_F_WMAX_BSCP_ERROR_OBJ_EXISTS" brief="SS object already exists."></retval>
				</callback>
			</func>
		</section>
	</section>
	<section name="Events">
		<descr>
			This section defines the interface for managing unsolicited events.
		</descr>
		<section name="Event Data Types">
			<enum type="NPF_F_wmaxBscpEventType_t" brief="Event Type">
				<descr>
					Defines unsolicited event types.
				</descr>
				<field name="NPF_F_WMAX_BSCP_EVENT_PHY_DOWN" brief="PHY State changed to DOWN for a given MAC instance."></field>
				<field name="NPF_F_WMAX_BSCP_EVENT_PHY_UP" brief="PHY State changed to UP for a given MAC instance."></field>
				<field name="NPF_F_WMAX_BSCP_EVENT_PHY_MAC_UP" brief="PHY and MAC-CPS state changed to UP for a particular MAC instance."></field>
				<field name="NPF_F_WMAX_BSCP_EVENT_SS_STATE" brief="Subscriber State Change."></field>
				<field name="NPF_F_WMAX_BSCP_EVENT_BP_CHG" brief="Burst Profile Change"></field>
				<field name="NPF_F_WMAX_BSCP_EVENT_PKM_AUTH_INFO" brief="PKM Authorization Information"></field>
				<field name="NPF_F_WMAX_BSCP_EVENT_PKMV1_AUTH_REQUEST" brief="PKMv1 Authorization Request"></field>
				<field name="NPF_F_WMAX_BSCP_EVENT_PKMV2_RSA_REQUEST" brief="PKMv2 RSA Request"></field>
				<field name="NPF_F_WMAX_BSCP_EVENT_PKMV2_EAP_START" brief="PKMv2 EAP Start"></field>
				<field name="NPF_F_WMAX_BSCP_EVENT_PKMV2_EAP_TRANSFER" brief="PKMv2 EAP Transfer"></field>
				<field name="NPF_F_WMAX_BSCP_EVENT_MOB_SS_SCANNING_REQUEST" brief="Scanning requested. 
							This event is only generated when scanning events are enabled - see NPF_F_wmaxBscpMobSigParms_t."></field>
				<field name="NPF_F_WMAX_BSCP_EVENT_MOB_SS_SCANNING_COMPLETE" brief="Scanning completed.
							This event is only generated when scanning events are enabled - see NPF_F_wmaxBscpMobSigParms_t."></field>
				<field name="NPF_F_WMAX_BSCP_EVENT_MOB_SS_SCANNING_REPORT" brief="Scanning report recieved.	"></field>
				<field name="NPF_F_WMAX_BSCP_EVENT_MOB_SS_HO_NEEDED" brief="Handover needed for the subscriber (based on the channel measurements)."></field>
				<field name="NPF_F_WMAX_BSCP_EVENT_MOB_SS_HO_REQUEST" brief="Handover requested by the subscriber"></field>
				<field name="NPF_F_WMAX_BSCP_EVENT_MOB_SS_HO_INDICATION" brief="Actual handover to another BS indicated by the subscriber"></field>
				<field name="NPF_F_WMAX_BSCP_EVENT_MOB_SS_LOC_UPDATE" brief="Location Update attempt by the subscriber"></field>
				<field name="NPF_F_WMAX_BSCP_EVENT_MOB_SS_IDLE" brief="Subscriber wants to switch to Idle Mode."></field>
				<field name="NPF_F_WMAX_BSCP_EVENT_MOB_SS_REENTRY_IDLE" brief="Network re-entry request after Idle Mode."></field>
				<field name="NPF_F_WMAX_BSCP_EVENT_SS_LINK_POOR" brief="Poor link quality."></field>
				<field name="NPF_F_WMAX_BSCP_EVENT_OVERCOMMITED" brief="A permanent queue overflow."></field>
				<field name="NPF_F_WMAX_BSCP_EVENT_SS_INACTIVE" brief="Inactivity of the SS was detected - SS connectivity lost assumed"></field>
				<field name="NPF_F_WMAX_BSCP_EVENT_MOB_SS_SLEEP" brief="Sleep mode event."></field>
				<field name="NPF_F_WMAX_BSCP_EVENT_MOB_SS_DL_QUEUE_EMPTY" brief="DL Queue Empty event (before HO)."></field>
			</enum>
			<enum type="NPF_F_wmaxBscpSsState_t" brief="Subscriber State">
				<descr>
					This enum defines the subscriber states reported to the application
				</descr>
				<field name="NPF_F_WMAX_BSCP_SS_STATE_ADDED" brief="New subscriber added to active list"></field>
				<field name="NPF_F_WMAX_BSCP_SS_STATE_LINK_ACTIVE" brief="Subscriber successfully completed capabilities negotiation and the link is now active"></field>
				<field name="NPF_F_WMAX_BSCP_SS_STATE_OPERATIONAL" brief="Subscriber successfully completed authentication and remaining network entry procedures"></field>
				<field name="NPF_F_WMAX_BSCP_SS_NEW_IP_ADDRESS" brief="Subscriber received new IP address.">
					<descr> To indicate, that a new IP address was assigned to the subscriber via the transport connection.
                    </descr>
				</field>
				<field name="NPF_F_WMAX_BSCP_SS_STATE_DELETED" brief="Subscriber has been released and the ssHandle is no longer valid.  
				This can occur in several ways: the reason for disconnect is provided."></field>
			</enum>
			<enum type="NPF_F_wmaxBscpSsStateDeletedReason_t" brief="Reason for Subscriber Deletion">
				<descr>
					Reason for subscriber deletion.
				</descr>
				<field name="NPF_F_WMAX_BSCP_STATE_DELETED_CORRECTION_RETRIES" brief="Ranging correction retries exhausted."></field>
				<field name="NPF_F_WMAX_BSCP_STATE_DELETED_TIMEOUT_T9" brief="T9 timeout waiting for SBC-REQ."></field>
				<field name="NPF_F_WMAX_BSCP_STATE_DELETED_AUTH_REJECT" brief="Application Rejected Authorization Request."></field>
				<field name="NPF_F_WMAX_BSCP_STATE_DELETED_APP_RELEASED" brief="Application called NPF_F_wmaxBscpSsDelete() or subscriber sent DREG-REQ message."></field>
				<field name="NPF_F_WMAX_BSCP_STATE_DELETED_INVALID_MESSAGE" brief="Invalid management message detected.  This could include missing mandatory field or other TLV decoding error."></field>
				<field name="NPF_F_WMAX_BSCP_STATE_DELETED_AUTH_LOST" brief="Authorization lost (e.g. AK lifetime expired and no re-authentication performed)."></field>
			</enum>
			<struct type="NPF_F_wmaxBscpSsCryptoCaps_t" brief="Subscriber Security Capabilities">
				<descr>
					This structure contains the subscriber security capabilities reported in PKM-AUTH.REQ
				</descr>
				<vector name="ssCryptoSuite" type="NPF_F_wmaxBscpPkmCryptoSuite_t" brief="Subscriber Crypto Suite">
					<descr>
						List of subscriber crypto suite capabilities
					</descr>
					<length name="ssCryptoSuitesNum" type="NPF_uint32_t" brief="Number of Subscriber Crypto Suites."></length>
				</vector>
			</struct>
			<struct type="NPF_F_wmaxBscpSsStateAddedData_t" brief="Subscriber State ADDED data">
				<descr>
					This structure contains data associated with the subscriber ADDED state event.
				</descr>
				<field name="macHandle" type="NPF_F_wmaxBscpMacHandle_t" brief="MAC instance handle where the subscriber was created."></field>
				<field name="ssMacAddress" type="NPF_uint8_t" size="6" brief="Subscriber station MAC address."></field>
				<field name="ssBasCID" type="NPF_uint16_t" brief="BASIC management channel CID."></field>
				<field name="ssPriCID" type="NPF_uint16_t" brief="PRIMARY management channel CID."></field>
			</struct>
			<define brief="HARQ Modes Supported By SS Mask">
				<descr>
					These mask bits are used to notify application which HARQ modes are supported by a given SS.
				</descr>
				<field name="NPF_F_WMAX_BSCP_HARQ_DL_CHASE" brief="HARQ chase supported on DL">
					<value>(0x01ull &lt;&lt; 0)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_HARQ_DL_CTC_IR" brief="HARQ CTC Incremental Redundancy supported on DL">
					<value>(0x01ull &lt;&lt; 1)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_HARQ_DL_CCC_IR" brief="HARQ CC Incremental Redundancy supported on DL">
					<value>(0x01ull &lt;&lt; 2)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_HARQ_UL_CHASE" brief="HARQ chase supported on UL">
					<value>(0x01ull &lt;&lt; 3)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_HARQ_UL_CTC_IR" brief="HARQ CTC Incremental Redundancy supported on UL">
					<value>(0x01ull &lt;&lt; 4)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_HARQ_UL_CCC_IR" brief="HARQ CC Incremental Redundancy supported on UL">
					<value>(0x01ull &lt;&lt; 5)</value>
				</field>
			</define>
			<define brief="PHY Options Supported By SS Mask">
				<descr>
          These mask bits are used to notify application which PHY modes are supported by a given SS.
        </descr>
				<field name="NPF_F_WMAX_BSCP_PHY_OPTION_64QAM" brief="64QAM">
					<value>(0x01ull &lt;&lt; 0)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_PHY_OPTION_BTC" brief="BTC">
					<value>(0x01ull &lt;&lt; 1)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_PHY_OPTION_CTC" brief="CTC">
					<value>(0x01ull &lt;&lt; 2)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_PHY_OPTION_LDPC" brief="LDPC">
					<value>(0x01ull &lt;&lt; 7)</value>
				</field>
			</define>
			<struct type="NPF_F_wmaxBscpSsStateLinkActiveData_t" brief="Subscriber State ACTIVE data">
				<descr>
					This structure contains data associated with the subscriber ACTIVE state event.
					It also includes other values negotiated during SBC-REQ/RSP exchange
				</descr>
				<field name="harqSupport" type="NPF_uint8_t" brief="HARQ support. Use HARQ Modes Supported by SS Mask to interpret value. 0 means that HARQ is not supported."></field>
				<field name="harqUlChannelNum" type="NPF_uint8_t" brief="The number of UL H-ARQ channels."></field>
				<field name="harqDlChannelNum" type="NPF_uint8_t" brief="The number of DL H-ARQ channels."></field>
				<field name="pkmAuthMode" type="NPF_F_wmaxBscpPkmAuthMode_t" brief="Authorization Mode Negotiated."></field>
				<field name="pkmMacMode" type="NPF_F_wmaxBscpPkmMacMode_t" brief="Message Authentication Code (MAC) Mode Negotiated."></field>
				<field name="maxNrOfSupportedSa" type="NPF_uint32_t" brief="Maximum number of supported security associations."></field>
				<field name="phyOptionsSupport" type="NPF_uint8_t" brief="Supported options related to PHY. Use PHY Options Supported by the SS Mask to interpret the value."></field>
			</struct>
			<define brief="Convergence Sublayers Supported By SS Mask">
				<descr>
					These mask bits are used to notify application which CSes are supported by a given SS.
				</descr>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_MASK_ATM" brief="ATM">
					<value>(0x01ull &lt;&lt; 0)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_MASK_IPV4" brief="Packet, IPv4">
					<value>(0x01ull &lt;&lt; 1)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_MASK_IPV6" brief="Packet, IPv6">
					<value>(0x01ull &lt;&lt; 2)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_MASK_8023" brief="Packet, 802.3/Ethernet">
					<value>(0x01ull &lt;&lt; 3)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_MASK_8021Q" brief="Packet, 802.1Q VLAN">
					<value>(0x01ull &lt;&lt; 4)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_MASK_IPV4_8023" brief="Packet, IPv4 over 802.3/Ethernet">
					<value>(0x01ull &lt;&lt; 5)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_MASK_IPV6_8023" brief="Packet, IPv6 over 802.3/Ethernet">
					<value>(0x01ull &lt;&lt; 6)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_MASK_IPV4_8021Q" brief="Packet, IPv4 over 802.1Q VLAN">
					<value>(0x01ull &lt;&lt; 7)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_MASK_IPV6_8021Q" brief="Packet, IPv6 over 802.1Q VLAN">
					<value>(0x01ull &lt;&lt; 8)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_MASK_8023_ROHC" brief="Packet, 802.3/Ethernet with header compression (ROHC)">
					<value>(0x01ull &lt;&lt; 9)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_MASK_8023_ECRTP" brief="Packet, 802.3/Ethernet with header compression (ECRTP)">
					<value>(0x01ull &lt;&lt; 10)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_MASK_IP_ROHC" brief="Packet, IP with header compression (ROHC).">
					<value>(0x01ull &lt;&lt; 11)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_CS_MODE_MASK_IP_ECRTP" brief="Packet, IP with header compression (ECRTP)">
					<value>(0x01ull &lt;&lt; 12)</value>
				</field>
			</define>
			<define brief="Handover Modes Supported by SS Mask">
				<descr>
					These mask bits are used to notify application which handover modes are supported by a given SS.
				</descr>
				<field name="NPF_F_WMAX_BSCP_MOB_HO_FBSS_MDHO_SUPPORT" brief="FBSS/MDHO DL RF Combining supported with monitoring MAPs from active BSs when this bit is set to 1">
					<value>(0x01ull &lt;&lt; 1)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_HO_MDHO_ANCHOR_SUPPORT" brief="MDHO DL soft Combining supported with monitoring single MAP from anchor BS when this bit is set to 1">
					<value>(0x01ull &lt;&lt; 2)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_HO_MDHO_ACTIVE_SUPPORT" brief="MDHO DL soft Combining supported with monitoring MAPs from active BSes when this bit is set to 1">
					<value>(0x01ull &lt;&lt; 3)</value>
				</field>
				<field name="NPF_F_WMAX_BSCP_MOB_HO_MDHO_UL_MULTIPLE_TRANS_SUPPORT" brief="MDHO UL Multiple transmission is supported when this bit is set to 1">
					<value>(0x01ull &lt;&lt; 4)</value>
				</field>
			</define>
			<struct type="NPF_F_wmaxBscpSsStateOperationalData_t" brief="Subscriber State OPERATIONAL data">
				<descr>
					This structure contains data associated with the subscriber OPERATIONAL state event.
					It also includes values negotiated during REG-REQ/RSP exchange
				</descr>
				<field name="arqSupport" type="NPF_boolean_t" brief="TRUE when this SS supportsARQ, FALSE otherwise"></field>
				<field name="secMgmtChannelSupport" type="NPF_boolean_t" brief="TRUE when this SS supportssecondary management channel, FALSE otherwise"></field>
				<field name="csSupport" type="NPF_uint16_t" brief="Bitmask indication types of CS supported by this SS - see Convergence Sublayers Supported By SS Mask"></field>
				<field name="phsSupport" type="NPF_boolean_t" brief="TRUE when this SS supportsPHS, FALSE otherwise"></field>
				<field name="crcSupport" type="NPF_boolean_t" brief="TRUE when this SS supportsMAC PDU CRC, false otherwise"></field>
				<field name="hoSupport" type="NPF_boolean_t" brief="TRUE when this SS supports handovers, false otherwise"></field>
				<field name="hoMode" type="NPF_uint8_t" brief="Bitmask indicating supported HO modes.">
					<descr>Use HO Modes Supported by SS Mask to interpret this field.
				      Valid only when hoSupport is set to TRUE</descr>
				</field>
				<field name="ssSecCID" type="NPF_uint16_t" brief="SECONDARY management channel CID (Zero if not used)">
					<descr>Valid only when secMgmtChannelSupport is set to TRUE</descr>
				</field>
				<field name="priSaHandle" type="NPF_F_wmaxBscpSaHandle_t" brief="A handle to the primary Security Association.">
					<descr>
				    Primary security association is created automatically for subscribers that use authorization mode different then 
				    AUTH_MODE_NONE. It is removed automatically when the subscriber is deleted. Primary Security Association cannot 
				    be removed using NPF_F_wmaxBscpMacSaDelete() function.
				    </descr>
				</field>
				<field name="pduSnExtShShort" type="NPF_boolean_t" brief="TRUE when this SS supports PDU SN (short) extended subheader."></field>
				<field name="pduSnExtShLong" type="NPF_boolean_t" brief="TRUE when this SS supports PDU SN (long) extended subheader."></field>
				<field name="maxDlCids" type="NPF_uint16_t" brief="Maxumum number of DL transport connections supported by SS.">
					<descr>Indicated as TLV 15 in REG-REQ/RSP</descr>
				</field>
				<field name="maxUlCids" type="NPF_uint16_t" brief="Maxumum number of UL transport connections supported by SS.">
					<descr>Indicated as TLV 6 in REG-REQ/RSP</descr>
				</field>
                                <field name="dlManagementConnectionHarqSupport" type="NPF_boolean_t" brief="TRUE when this SS supports HARQ for downlink management connections.">
                                </field>
                                <field name="ulManagementConnectionHarqSupport" type="NPF_boolean_t" brief="TRUE when this SS supports HARQ for uplink management connections.">
                                </field>
			</struct>
			<enum type="NPF_F_wmaxBscpSsIpAddressType_t" brief="Subscriber IP Address Type">
				<descr>
					This enum defines a type of subscriber IP address. Currently only IPv4 address is supported.
				</descr>
				<field name="NPF_F_WMAX_BSCP_SS_ADDRESS_IPV4" brief="IPv4 address type"></field>
			</enum>
			<struct type="NPF_F_wmaxBscpSsNewIpAddressData_t" brief="Subscriber New IP Address data">
				<descr>
					This structure contains new IP address assigned for the subscriber by DHCP protocol over transport connection.				
				</descr>
				<selectunion type="NPF_F_wmaxSsIpAddress" name="u">
					<selectfield name="addresType" type="NPF_F_wmaxBscpSsIpAddressType_t" brief="IP Address Type."></selectfield>
					<field name="ipv4Address" type="NPF_IPv4Address_t" brief="New IP Address (v4)">
						<selector>NPF_F_WMAX_BSCP_SS_ADDRESS_IPV4</selector>
					</field>
				</selectunion>
			</struct>
			<struct type="NPF_F_wmaxBscpSsStateDeletedData_t" brief="Subscriber State DELETED data">
				<descr>
					This structure contains data associated with the subscriber DELETED state.
				</descr>
				<field name="reason" type="NPF_F_wmaxBscpSsStateDeletedReason_t" brief="Reason for subscriber being deleted."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpEventPhyDownArgs_t" brief="PHY Down Event">
				<descr>
					This event is generated when the MAC-CPS loses communication with the PHY.
				</descr>
				<field name="macHandle" type="NPF_F_wmaxBscpMacHandle_t" brief="MAC instance handle."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpEventPhyUpArgs_t" brief="PHY Up Event">
				<descr>
					This event is generated when the MAC-CPS detects the PHY.
				</descr>
				<field name="macHandle" type="NPF_F_wmaxBscpMacHandle_t" brief="MAC instance handle."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpEventPhyMacUpArgs_t" brief="PHY and MAC-CPS Up Event">
				<descr>
					This event is generated when the MAC-CPS and PHY have both completed initialization after initialization or a PHY down event.
				</descr>
				<field name="macHandle" type="NPF_F_wmaxBscpMacHandle_t" brief="MAC instance handle."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpEventSsStateArgs_t" brief="Subscriber Status Change Event">
				<descr>
					Indication of subscriber state change.
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle."></field>
				<selectunion type="NPF_F_wmaxBscpSsStateUnion_t" name="u">
					<selectfield name="ssState" type="NPF_F_wmaxBscpSsState_t" brief="Subscriber State."></selectfield>
					<field name="ssStateAdded" type="NPF_F_wmaxBscpSsStateAddedData_t" brief="Additional information provided with SS_STATE(ADDED) event">
						<descr>New subscriber added to active list.</descr>
						<selector>NPF_F_WMAX_BSCP_SS_STATE_ADDED</selector>
					</field>
					<field name="ssStateLinkActive" type="NPF_F_wmaxBscpSsStateLinkActiveData_t" brief="Additional information provided with SS_STATE(ACTIVE) event">
						<descr>Subscriber successfully completed capabilities negotiation, air link is now active.</descr>
						<selector>NPF_F_WMAX_BSCP_SS_STATE_LINK_ACTIVE</selector>
					</field>
					<field name="ssStateOperational" type="NPF_F_wmaxBscpSsStateOperationalData_t" brief="Additional information provided with SS_STATE(OPERATIONAL) event">
						<descr>Subscriber successfully completed network entry procedures.</descr>
						<selector>NPF_F_WMAX_BSCP_SS_STATE_OPERATIONAL</selector>
					</field>
					<field name="ssNewIpAddress" type="NPF_F_wmaxBscpSsNewIpAddressData_t" brief="New IP address assigned for the subscriber.">
						<descr>This is IP address assigned by DHCP over transport connection and detected by DHCP proxy on BS.</descr>
						<selector>NPF_F_WMAX_BSCP_SS_NEW_IP_ADDRESS</selector>
					</field>
					<field name="ssStateDeleted" type="NPF_F_wmaxBscpSsStateDeletedData_t" brief="Additional information provided with SS_STATE(DELETED) event">
						<descr>Subscriber has been deleted and the ssHandle is no longer valid.</descr>
						<selector>NPF_F_WMAX_BSCP_SS_STATE_DELETED</selector>
					</field>
				</selectunion>
			</struct>
			<enum type="NPF_F_wmaxBscpBpChangeStatust_t" brief="Status of the last BP change">
				<field name="NPF_F_WMAX_BSCP_BP_CHANGED_CORRECTLY" brief="BP changed according to the CAP settings."></field>
				<field name="NPF_F_WMAX_BSCP_BP_CHANGED_ERROR" brief="Error during BP change."></field>
			</enum>
			<struct type="NPF_F_wmaxBscpEventBpChangeArgs_t" brief="Burst Profile Change Event Data">
				<descr>
					Indication of subscriber burst profile change.
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle."></field>
				<field name="serviceDirection" type="NPF_F_wmaxBscpServiceDirection_t" brief="Specifies the air-link direction (UL or DL)."></field>
				<field name="iuc" type="NPF_uint8_t" brief="Specifies either DIUC or UIUC value depending on direction"></field>
				<field name="bp" type="NPF_F_wmaxBscpOfdmaBurstProfileEncodings_t" brief="Burst Profile."></field>
				<field name="status" type="NPF_F_wmaxBscpBpChangeStatust_t" brief="Status of the operation."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpEventPkmAuthInfoArgs_t" brief="PKM Authorization Information Data.">
				<descr>
					This structure contains the contents of the PKM-INFO.REQ message
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle."></field>
				<field name="ssCaCert" type="NPF_F_wmaxBscpOctetString_t" brief="Manufacturer's X.509 CA certificate."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpEventPkmv1AuthRequestArgs_t" brief="PKMv1 Authorization Request Data.">
				<descr>
					This structure contains the PKM-REQ: PKMv1 Auth-Request message attributes.
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle."></field>
				<field name="ssCert" type="NPF_F_wmaxBscpOctetString_t" brief="Subscriber X.509 certificate."></field>
				<field name="ssCryptoCaps" type="NPF_F_wmaxBscpSsCryptoCaps_t" brief="Subscriber Security Capabilities."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpEventPkmv2RsaRequestArgs_t" brief="PKMv2 RSA Authorization Request Indication Data">
				<descr>
					This structure contains the PKM-REQ: PKMv2 RSA-Request message attributes.
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle."></field>
				<field name="ssCert" type="NPF_F_wmaxBscpOctetString_t" brief="Subscriber X.509 certificate."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpEventPkmv2EapStartArgs_t" brief="PKMv2 EAP Start Data">
				<descr>
					This structure contains an EAP response received in a PKM-REQ message.
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpEventPkmv2EapTransferArgs_t" brief="PKMv2 EAP Transfer Indication Data">
				<descr>
					This structure contains an EAP response received in a PKM-REQ message.
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle."></field>
				<field name="eapMsg" type="NPF_F_wmaxBscpOctetString_t" brief="EAP encoded message."></field>
			</struct>
			<typedef name="NPF_F_wmaxBscpEventMobSsScanningRequestArgs_t" type="NPF_F_wmaxBscpMobSsScanSet_t">
				<descr>
				Scanning Request Data. This structure contains the scanning request parameters.
			</descr>
			</typedef>
			<struct type="NPF_F_wmaxBscpEventMobSsScanningCompletedArgs_t" brief="Scanning Completed Data">
				<descr>
					This structure contains the handle to the subscriber that completed its scanning procedure.
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpSignalReport_t" brief="Signal report.">
				<descr>
					This structure contains the current parameters of the recieved signal, as measured by the subscriber.
					Used to report results of scanning neighbor BS or serving BS signal.
			</descr>
				<field type="NPF_uint8_t" name="metricValid" brief="Bitmask to indicate which metrics are valid. See: Scanning Report Metrics"></field>
				<field type="NPF_int8_t" name="cinrMean" brief="BS CINR mean value">
					<descr>
    		According to IEEE 802.16-2005: The BS CINR mean parameter indicates the CINR in dB measured at the SS on the downlink          	
            signal of a particular BS. The value shall be interpreted as a signed byte with the resolution of
            0.5 dB. 
    		</descr>
				</field>
				<field type="NPF_uint8_t" name="rssiMean" brief="BS RSSI mean value">
					<descr>
    		According to IEEE 802.16-2005: The BS RSSI mean parameter indicates the Received Signal Strength measured by the SS
            from the particular BS. The value shall be interpreted as an unsigned byte with units of 0.25 dB,
           such that 0x00 is interpreted as -103.75 dBm, an SS shall be able to report values in the range
           -103.75 dBm to -40 dBm.
    		</descr>
				</field>
				<field type="NPF_uint8_t" name="relativeDelay" brief="Relative delay difference (neighbor to serving BS)">
					<descr>
    		According to IEEE 802.16-2005: This parameter indicates the delay of neighbor DL signals relative to the serving BS, 
    		as measured by the SS for the particular BS. 
    		The value shall be interpreted as a signed integer in units of samples.
    		</descr>
				</field>
				<field type="NPF_uint8_t" name="bsRoundtripDelay" brief="BS Round-trip delay (RTD).">
					<descr>
				 According to IEEE 802.16-2005: This field will include the RTD of the serving BS/anchor BS.
				 RTD can be given by the latest time advance taken by MS. 
				 The value shall be interpreted as an unsigned byte with units of 1/Fs.
				</descr>
				</field>
			</struct>
			<struct type="NPF_F_wmaxBscpMobBsSignalReport_t" brief="Signal report from a given neighbor BS.">
				<descr>
					This structure contains the scanning report of the recieved signal parameters as measured by the subscriber for a given BS.					 
			</descr>
				<field name="bsId" type="NPF_uint8_t" size="6" brief="Basestation Id.">
					<descr>
              	        48-bits Base Station address.
               	 </descr>
				</field>
				<field type="NPF_F_wmaxBscpSignalReport_t" name="servingBsMetrics" brief="Serving BS metrics."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpEventMobSsScanningReportArgs_t" brief="Scanning Report Data">
				<descr>
					This structure contains results of scanning as raported by the subscriber. Recieved periodic or event-triggered reports
					are communicated by this event.
			</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle."></field>
				<field type="NPF_F_wmaxBscpSignalReport_t" name="servingBsMetrics" brief="Serving BS metrics. Only filds indicated by reportMetrics field are valid."></field>
				<vector type="NPF_F_wmaxBscpMobBsSignalReport_t" name="bsRepList" xdr="yes">
					<descr>
    				A list of reports from scanning different BSes. Each entry contains results from one BS.
    			</descr>
					<length type="NPF_uint32_t" name="bsNum" brief="Number of elements in the bsRepList table."></length>
				</vector>
			</struct>
			<struct type="NPF_F_wmaxBscpMobPrefBs_t" brief="Preferred BS Parameters">
				<descr>
					This structure contaions parameters of the BS the subscriber wants to switch to (preferred BS).
			</descr>
				<field name="bsId" type="NPF_uint8_t" size="6" brief="Base Station Id. ">
					<descr>
               	        48-bits base station address.
               	    </descr>
				</field>
				<field type="NPF_uint8_t" name="subchannelIndex" brief="For OFDMA - DL subchannel index"></field>
				<field type="NPF_F_wmaxBscpMobSvcLevelPred_t" name="svcLevelPred" brief="Service level prediction"></field>
				<field type="NPF_F_wmaxBscpSignalReport_t" name="bsMetrics" brief="Prefered  BS metrics."></field>
			</struct>
			<enum type="NPF_F_wmaxBscpEventMobSsHoNeededReason_t" brief="Reason for scanning/HO preparation">
				<field name="NPF_F_WMAX_BSCP_SS_DL_LINK_POOR" brief="Radio link conditions on DL are bellow treshold defined in CAP."></field>
				<field name="NPF_F_WMAX_BSCP_SS_UL_LINK_POOR" brief="Radio link conditions on UL are bellow treshold defined in CAP."></field>
				<field name="NPF_F_WMAX_BSCP_SS_DL_UL_LINK_POOR" brief="Radio link conditions on both directions are bellow tresholds defined in CAP."></field>
			</enum>
			<struct type="NPF_F_wmaxBscpEventMobSsHoNeededArgs_t" brief="Handover Needed Event Data">
				<descr>
					This structure contains the information about HO that should start scanning for a new BS.
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle."></field>
				<field name="reason" type="NPF_F_wmaxBscpSsHandle_t" brief="Reason for scanning and possible handover."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpEventMobSsHoRequestedArgs_t" brief="Handover Requested Event Data">
				<descr>
					This structure contains the information about HO requested by the SS.
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle."></field>
				<field name="servingBsMetrics" type="NPF_F_wmaxBscpSignalReport_t" brief="Serving BS metrics."></field>
				<vector name="prefBsList" type="NPF_F_wmaxBscpMobPrefBs_t" brief="A list of preferred BS the subscriber wants to switch to.">
					<length name="prefBsListLength" type="NPF_uint32_t" brief="Number of the preferred BSes."></length>
				</vector>
			</struct>
			<enum type="NPF_F_wmaxBscpSsHoIndType_t" brief="Handover Indication type">
				<descr>
                 Defines the handover indication type, requested by the subscriber.
			</descr>
				<field name="NPF_F_WMAX_BSCP_MOB_HO_RELEASE_BS" value="1" brief="Proceed - release current BS."></field>
				<field name="NPF_F_WMAX_BSCP_MOB_HO_CANCEL" brief="HO procedure canceled by the subscriber."></field>
				<field name="NPF_F_WMAX_BSCP_MOB_HO_REJECT" brief="HO parameters rejected by the subscriber - HO process canceled."></field>
			</enum>
			<struct type="NPF_F_wmaxBscpEventMobSsHoIndArgs_t" brief="Handover Indication Event Data">
				<descr>
					This structure contains the information about actual HO performed by the subscriber.
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle."></field>
				<field name="type" type="NPF_F_wmaxBscpSsHoIndType_t" brief="HO indication type - proceed, cancel or reject."></field>
				<field name="bsId" type="NPF_uint8_t" size="6" brief="Basestation Id. ">
					<descr>
               	        48-bits BS address of the target BS. Valid only when type is NPF_F_WMAX_BSCP_MOB_HO_RELEASE_BS
               	    </descr>
				</field>
				<field name="subchanelIndex" type="NPF_uint8_t" brief="Active DL subchannel index, used at target BS sector.">
					<descr>
               	        Valid only when type is NPF_F_WMAX_BSCP_MOB_HO_RELEASE_BS
               	  </descr>
				</field>
			</struct>
			<struct type="NPF_F_wmaxBscpEventMobSsIdleIndArgs_t" brief="Idle Mode Request Event Data">
				<descr>
					This structure contains the requested Idle Mode parameters.
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle."></field>
				<field name="pagingCycle" type="NPF_uint16_t" brief="PAGING CYCLE."></field>
				<field name="retainInfo" type="NPF_uint8_t" brief="Resource retention info bitmask. See: Idle Mode Resource Retention Mask"></field>
				<field name="idleModeTimeout" type="NPF_uint16_t" brief="Max time interval between MS Idle Mode Location (in seconds), supported by this subscriber. 
						Negotiated during registration (TLV=37). 0 means that such limit was not negotiated."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpEventMobSsReentryIdleIndArgs_t" brief="Reentry after Idle Indication Event Data">
				<descr>
					This structure contains the requested re-entry parameters.
				</descr>
				<field name="macHandle" type="NPF_F_wmaxBscpMacHandle_t" brief="MAC instance handle where the subscriber is created."></field>				
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber handle for newly created subscriber."></field>
				<field name="ssMacAddress" type="NPF_uint8_t" size="6" brief="Subscriber station MAC address."></field>
				<field name="pagingControllerId" type="NPF_uint8_t" size="6" brief="Paging Controller ID."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpEventSsLinkPoorArgs_t" brief="Link Poor Event Data">
				<descr>
				The structure contains the information about a subscriber with poor radio link connectivity.
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber handle."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpEventOvercommitedArgs_t" brief="Radio Link Overcommited Event Data">
				<descr>
            The structure contains the information about an overloaded MAC instance.
			</descr>
				<field name="macHandle" type="NPF_F_wmaxBscpMacHandle_t" brief="MAC Instance Handle."></field>
				<field name="dir" type="NPF_F_wmaxBscpServiceDirection_t" brief="Direction: uplink or downlink."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpEventSsInactiveArgs_t" brief="Subscriber Inactive Event Data">
				<descr>
				The structure contains the information about a subscriber that is suspected to be disconected. 
			</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber handle."></field>
			</struct>
			<enum type="NPF_F_wmaxBscpEventMobSsLocUpdateOper_t" brief="Location Update Start/Termination Indication">
				<field name="NPF_F_BSCP_LOC_UPDATE_STARTED" value="1" brief="Location Update Procedure started. Issued when Location Update recieved from the subscriber"></field>
				<field name="NPF_F_BSCP_LOC_UPDATE_TERMINATED" brief="Location Update Procedure terminated.">
					<descr>
					Issued when network entry request recieved from the subscriber before Location Update procedure is completed.
					</descr>
				</field>
			</enum>
			<struct type="NPF_F_wmaxBscpEventMobSsLocUpdateIndArgs_t" brief="Location Update Indication Event Data">
				<descr>
    					This structure contains the information from secure Location Update request sent by the subscriber.
				</descr>
				<field name="operation" type="NPF_F_wmaxBscpEventMobSsLocUpdateOper_t" brief="Indicates start or termination of the Locaton Update procedure."></field>
				<field name="macHandle" type="NPF_F_wmaxBscpMacHandle_t" brief="MAC instance handle."></field>
				<field name="ssLocUpdateHandle" type="NPF_F_wmaxBscpSsLocUpdateHandle_t" brief="A handle to the object resposnable for the Location Update Procedure.">
					<descr>
						For started Location Update (operation set to NPF_F_BSCP_LOC_UPDATE_STARTED) a handle to newly created object.
						For terminated Location Update (operation set to NPF_F_BSCP_LOC_UPDATE_TERMINATED) a handle to object previously 
						created during Location Update start.
						</descr>
				</field>
				<field name="ssMacAddress" type="NPF_uint8_t" size="6" brief="Subscriber station MAC address."></field>
				<field name="digestPresent" type="NPF_boolean_t" brief="True - authentication field present (secure Location Update attempt), 
     			           false - authentication field not present (unsecure Location Update attempt).
     			           Valid only for  started Location Update (operation set to NPF_F_BSCP_LOC_UPDATE_STARTED)."></field>
				<field name="pagingControllerIdPresent" type="NPF_boolean_t" brief="True - pagingControllerId is valid and contains Paging Controller ID recieved from the subscriber.     			    
     			           False - pagingControllerId is invalid since Paging Controller ID  was not present in the message from the subscriber."></field>
				<field name="pagingControllerId" type="NPF_uint8_t" size="6" brief="Paging Controller ID."></field>
				<field name="powerDownIndication" type="NPF_boolean_t" brief="True - the subscriber atempts to perform permanent power down.     			    
     			           False - power down indication  was not present in the message from the subscriber."></field>
				<field name="transactionId" type="NPF_F_wmaxBscpMobIdleTransId_t" brief="Transaction Id for this Location Update. 
             			Must be specified in corresponding Location Update request (NPF_F_wimaxBscpMobSsLocUpdate())
             			Valid only for  started Location Update (operation set to NPF_F_BSCP_LOC_UPDATE_STARTED)."></field>
			</struct>
			<!-- Sleep Mode  event definitions -->
			<enum type="NPF_F_wmaxBscpEventMobSleepType_t" brief="Sleep Event Type">
				<descr>
				Defines different types of sleep-related events.
			</descr>
				<field name="NPF_F_WMAX_BSCP_SLEEP_PSC_DEF" brief="The definition of the Power Saving Class. The Power Saving Class not activated."></field>
				<field name="NPF_F_WMAX_BSCP_SLEEP_PSC_DEF_ACT" brief="The definition and activation of the Power Saving Class."></field>
				<field name="NPF_F_WMAX_BSCP_SLEEP_PSC_ACT" brief="Activation of already defined Power Saving Class."></field>
				<field name="NPF_F_WMAX_BSCP_SLEEP_PSC_DEACT" brief="Deactivation of already defined Power Saving Class."></field>
			</enum>
			<enum type="NPF_F_wmaxBscpMobSleepDeactReason_t" brief="Power Saving Class deactivation reason">
				<descr>
				Defines different sleep deactivation reasons.
			</descr>
				<field name="NPF_F_WMAX_BSCP_SLEEP_DEACT_DL_TRAFFIC" brief="The Power Saving Class deativated by DL traffic."></field>
				<field name="NPF_F_WMAX_BSCP_SLEEP_DEACT_UL_TRAFFIC" brief="The Power Saving Class deativated by UL traffic or BW request."></field>
				<field name="NPF_F_WMAX_BSCP_SLEEP_DEACT_MS_REQUEST" brief="The Power Saving Class deativated by MOB_SLP-REQ or BW request and UL sleep control header."></field>
				<field name="NPF_F_WMAX_BSCP_SLEEP_DEACT_BS_REQUEST" brief="The Power Saving Class deativated by BS request."></field>
				<field name="NPF_F_WMAX_BSCP_SLEEP_DEACT_SCAN_REQUEST" brief="The Power Saving Class deativated by MS scanning request."></field>
			</enum>
			
			<struct type="NPF_F_wmaxBscpEventMobSsSleepIndArgs_t" brief="Sleep-related Event Data">
				<descr>
				This structure contains informations related to various sleep-related revents.
			</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber handle."></field>
				<field name="pscHandle" type="NPF_F_wmaxBscpPscHandle_t" brief="Power Saving Class handle.">
					<descr>
					New handle is returned when a new Power Saving Class is created 
					(NPF_F_WMAX_BSCP_SLEEP_PSC_DEF and NPF_F_WMAX_BSCP_SLEEP_PSC_DEF_ACT events). Existing handle returned 
					when the Power Saving Class is ctivated (NPF_F_WMAX_BSCP_SLEEP_PSC_ACT) or deactivated (NPF_F_WMAX_BSCP_SLEEP_PSC_DEACT).
					Existing handle is also returned when the existing Power Saving Class is redefined 
					(NPF_F_WMAX_BSCP_SLEEP_PSC_DEF and NPF_F_WMAX_BSCP_SLEEP_PSC_DEF_ACT).
				</descr>
				</field>
				<field name="slpId" type="NPF_uint16_t" brief="SLPID (Sleep ID). This is a number assigned by the BS to the Power Saving Class whenever an MS is instructed to enter sleep mode.">
					<descr>
					SLPID migth be changed each time a given Power Saving Class is activated 
					(NPF_F_WMAX_BSCP_SLEEP_PSC_DEF_ACT or NPF_F_WMAX_BSCP_SLEEP_PSC_ACT events).
					In case of Power Saving Class deativation (NPF_F_WMAX_BSCP_SLEEP_PSC_DEACT), recently used SLPID is returned.
					Invalid in case of NPF_F_WMAX_BSCP_SLEEP_PSC_DEF. Only lower 10 bits are used.
				</descr>
				</field>
				<selectunion type="NPF_F_wmaxBscpEventMobSsSleepIndUnion_t" name="u">
					<selectfield name="eventType" type="NPF_F_wmaxBscpEventMobSleepType_t" brief="Event Type"></selectfield>
					<field type="NPF_F_wmaxBscpMobPscDef_t" name="pscDef" brief="Power Saving Class Definition">
						<selector>NPF_F_WMAX_BSCP_SLEEP_PSC_DEF</selector>
						<selector>NPF_F_WMAX_BSCP_SLEEP_PSC_DEF_ACT</selector>
					</field>
					<field type="NPF_F_wmaxBscpMobSleepDeactReason_t" name="reason" brief="Power Saving Class deactivation reason">						
						<selector>NPF_F_WMAX_BSCP_SLEEP_PSC_DEACT</selector>
					</field>
					<field type="NPF_uint32_t" name="unused" brief="Unused,">
						<selector>NPF_F_WMAX_BSCP_SLEEP_PSC_ACT</selector>						
					</field>
				</selectunion>
			</struct>
			<struct type="NPF_F_wmaxBscpEventMobSsDlQueueEmptyArgs_t" brief="DL Queue Empoty Data">
				<descr>
					This structure contains the information about last PNs used for UL and DL by the subscriber.
				</descr>
				<field name="ssHandle" type="NPF_F_wmaxBscpSsHandle_t" brief="Subscriber Handle."></field>
				<field name="dynamicSaState" type="NPF_F_wmaxBscpMobSsStateSaDyn_t" brief="Latest dynamic state of SAs.">
					<descr>
               	        Last used DL and UL PNs.
               	  </descr>
				</field>
			</struct>
			<struct type="NPF_F_wmaxBscpEventData_t" brief="Event Callback Data">
				<descr>
					This structure is used to pass arguments associated with an asynchronous event.
				</descr>
				<selectunion type="NPF_F_wmaxBscpEventArgsUnion_t" name="u">
					<selectfield type="NPF_F_wmaxBscpEventType_t" name="eventType" brief="Event Type."></selectfield>
					<field type="NPF_F_wmaxBscpEventPhyDownArgs_t" name="phyDownArgs">
						<descr>PHY Down event.</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_PHY_DOWN</selector>
					</field>
					<field type="NPF_F_wmaxBscpEventPhyUpArgs_t" name="phyUpArgs">
						<descr>PHY State Up event.</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_PHY_UP</selector>
					</field>
					<field type="NPF_F_wmaxBscpEventPhyMacUpArgs_t" name="phyMacUpArgs">
						<descr>PHY and MAC-CPS State Up event.</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_PHY_MAC_UP</selector>
					</field>
					<field type="NPF_F_wmaxBscpEventSsStateArgs_t" name="ssStateArgs">
						<descr>Subscriber state change.</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_SS_STATE</selector>
					</field>
					<field type="NPF_F_wmaxBscpEventBpChangeArgs_t" name="bpChgArgs">
						<descr>Burst profile change.</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_BP_CHG</selector>
					</field>
					<field type="NPF_F_wmaxBscpEventPkmAuthInfoArgs_t" name="pkmAuthInfoArgs">
						<descr>PKMv1 Authorization Info</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_PKM_AUTH_INFO</selector>
					</field>
					<field type="NPF_F_wmaxBscpEventPkmv1AuthRequestArgs_t" name="pkmv1AuthRequestArgs">
						<descr>PKMv1 Authorization Request</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_PKMV1_AUTH_REQUEST</selector>
					</field>
					<field type="NPF_F_wmaxBscpEventPkmv2RsaRequestArgs_t" name="pkmv2RsaRequestArgs">
						<descr>PKMv2 RSA Request</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_PKMV2_RSA_REQUEST</selector>
					</field>
					<field type="NPF_F_wmaxBscpEventPkmv2EapStartArgs_t" name="pkmv2EapStartArgs">
						<descr>PKMv2 EAP Start.</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_PKMV2_EAP_START</selector>
					</field>
					<field type="NPF_F_wmaxBscpEventPkmv2EapTransferArgs_t" name="pkmv2EapTransferArgs">
						<descr>PKMv2 EAP Transfer.</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_PKMV2_EAP_TRANSFER</selector>
					</field>
					<field type="NPF_F_wmaxBscpEventMobSsScanningRequestArgs_t" name="mobSsScanningRequestArgs">
						<descr>Scanning requested.</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_MOB_SS_SCANNING_REQUEST</selector>
					</field>
					<field type="NPF_F_wmaxBscpEventMobSsScanningCompletedArgs_t" name="mobSsScanningCompleteArgs">
						<descr>Scanning completed.</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_MOB_SS_SCANNING_COMPLETE</selector>
					</field>
					<field type="NPF_F_wmaxBscpEventMobSsScanningReportArgs_t" name="mobSsScanningReportArgs">
						<descr>Scanning report contents.</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_MOB_SS_SCANNING_REPORT</selector>
					</field>
					<field type="NPF_F_wmaxBscpEventMobSsHoNeededArgs_t" name="mobSsHoNeededArgs">
						<descr>HO needed for the subscriber (based on the channel measurements).</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_MOB_SS_HO_NEEDED</selector>
					</field>
					<field type="NPF_F_wmaxBscpEventMobSsHoRequestedArgs_t" name="mobSsHoRequestedArgs">
						<descr>HO requested by the subscriber.</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_MOB_SS_HO_REQUEST</selector>
					</field>
					<field type="NPF_F_wmaxBscpEventMobSsHoIndArgs_t" name="mobSsHoIndArgs">
						<descr>Actual HO to another BS indicated by the subscriber.</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_MOB_SS_HO_INDICATION</selector>
					</field>
					<field type="NPF_F_wmaxBscpEventMobSsLocUpdateIndArgs_t" name="mobSsLocUpdateIndArgs">
						<descr>Location Update indicated by the subscriber.</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_MOB_SS_LOC_UPDATE</selector>
					</field>
					<field type="NPF_F_wmaxBscpEventMobSsIdleIndArgs_t" name="mobSsIdleIndArgs">
						<descr>Request for transition into Idle Mode indicated by the subscriber.</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_MOB_SS_IDLE</selector>
					</field>
					<field type="NPF_F_wmaxBscpEventMobSsReentryIdleIndArgs_t" name="mobSsReentryIdleIndArgs">
						<descr>Request for network re-entry after Idle Mode indicated by the subscriber.</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_MOB_SS_REENTRY_IDLE</selector>
					</field>
					<field type="NPF_F_wmaxBscpEventSsLinkPoorArgs_t" name="linkPoorArgs">
						<descr>Poor BS - subscriber link quality event.</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_SS_LINK_POOR</selector>
					</field>
					<field type="NPF_F_wmaxBscpEventOvercommitedArgs_t" name="overcommitedArgs">
						<descr>Overcommited event.</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_OVERCOMMITED</selector>
					</field>
					<field type="NPF_F_wmaxBscpEventSsInactiveArgs_t" name="inactiveArgs">
						<descr>SS Subscribe inactive - handover or power off suspected.</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_SS_INACTIVE</selector>
					</field>
					<field type="NPF_F_wmaxBscpEventMobSsSleepIndArgs_t" name="mobSsSleepIndArgs">
						<descr>Event informing about changes in sleep mode definition/status.</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_MOB_SS_SLEEP</selector>
					</field>
					<field type="NPF_F_wmaxBscpEventMobSsDlQueueEmptyArgs_t" name="mobSsDlQueueEmptyArgs">
						<descr>
							Event informing that all required DL queues are empty and MOB_BSHO-* message was send.
						</descr>
						<selector>NPF_F_WMAX_BSCP_EVENT_MOB_SS_DL_QUEUE_EMPTY</selector>
					</field>
				</selectunion>
			</struct>
			<struct type="NPF_F_wmaxBscpEventArray_t" brief="Event Callback Array">
				<descr>
					This structure contains an array of events.
				</descr>
				<vector name="events" type="NPF_F_wmaxBscpEventData_t" brief="List of Asynchronous Events">
					<descr>
						Array of structures containing eventsNum entries.
					</descr>
					<length name="eventsNum" type="NPF_uint32_t" brief="Number of Asynchronous Events."></length>
				</vector>
			</struct>
			<functype name="NPF_F_wmaxBscpEventCallback_t" type="void" class="event" brief="Event Callback Function Prototype">
				<descr>
					A function with this signature must be registered by the application (using NPF_F_wmaxBscpEventCallbackRegister) to process unsolicited events.
				 </descr>
				<param io="in" type="NPF_userContext_t" name="context">
					<descr>
						The context item that was supplied by the application when the event callback routine was registered.
					 </descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpEventArray_t" name="events">
					<descr>
						 A structure containing the event data. 
					</descr>
				</param>
			</functype>
		</section>
		<section name="Event Functions">
			<func name="NPF_F_wmaxBscpEventCallbackRegister" type="NPF_error_t" class="event_register" brief="Register Event Callback" xdrid="RPC_WMAX_BSCP_EVENT_CB_REGISTER">
				<descr>
					This function is used to register an event callback function to receive notifications of unsolicited events from the BSCP object.
					This function operates synchronously.
				</descr>
				<param io="in" type="NPF_FEHandle_t" name="feHandle" xdr="no">
					<descr>
						Identifies the forwarding element where the action will be executed.  This handle is obtained during RPC connection establishment.
					</descr>
				</param>
				<param io="in" type="NPF_userContext_t" name="userContext" xdr="no">
					<descr>
						The context item provided to the event callback routine when it is invoked.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpEventCallback_t" name="eventCallFunc" xdr="no">
					<descr>
						The function pointer to the event callback function to be called for events.
					</descr>
				</param>
				<param io="out" type="NPF_callbackHandle_t *" name="callbackHandle" xdr="no">
					<descr>
						A unique identifier related to this registration.
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating function success.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>
							The registration completed successfully.
						</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_FUNCTION">
						<descr>
							The registration was invoked with a function pointer parameter that was invalid.
						</descr>
					</retval>
					<retval name="NPF_E_CALLBACK_ALREADY_REGISTERED">
						<descr>
							The registration was invoked with a pair composed of a function pointer and a user context which was previously used for an identical registration.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>Used to indicate other errors not listed above.</descr>
					</retval>
				</return>
			</func>
			<func name="NPF_F_wmaxBscpEventCallbackDeregister" type="NPF_error_t" class="event_deregister" brief="Deregister Event Callback" xdrid="RPC_WMAX_BSCP_EVENT_CB_DEREGISTER">
				<descr>
					This function is used to deregister an event callback function, which was previously
					registered to receive notifications of BSCP asynchronous events.
					It may be invoked by any application no longer interested in receiving status events.
					Note: This function operates in a synchronous manner. There may be a timing window where
					outstanding events continue to be delivered to the event routine after the de-registration
					function has been invoked. 
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle" xdr="no">
					<descr>
						The unique identifier returned to the application when the
						event callback routine was registered.
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating function success.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>The operation completed successfully.</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							A function was invoked with a callback handle that did not
							correspond to a valid NPF callback handle as returned by a registration function.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							Indicates other errors.
						</descr>
					</retval>
				</return>
			</func>
		</section>
	</section>
	<section name="Responses">
		<descr>
			This section defines the asynchronous responses for all FAPI functions.
		</descr>
		<section name="Response Data Types">
			<enum type="NPF_F_wmaxBscpAsyncResponseType_t" brief="Asynchronous Response Type">
				<descr>
					Identifies which BSCP function triggered the asynchronous response callback.
				</descr>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_OPEN" brief="Asynchronous response for NPF_F_wmaxBscpOpen."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SET_PHY_SAP_ADDR" brief="Asynchronous response for NPF_F_wmaxBscpSetPhySapAddr."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_CLOSE" brief="Asynchronous response for NPF_F_wmaxBscpClose."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SET_TIME" brief="Asynchronous response for NPF_F_wmaxBscpSetTime."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_GLB_STATS_CFG" brief="Asynchronous response for NPF_F_wmaxBscpGblStatsConfig."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_GLB_STATS_GET" brief="Asynchronous response for NPF_F_wmaxBscpGblStatsGet."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_ADD" brief="Asynchronous response for NPF_F_wmaxBscpMacAdd."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_START" brief="Asynchronous response for NPF_F_wmaxBscpMacStart."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_STOP" brief="Asynchronous response for NPF_F_wmaxBscpMacStop."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_DCD_UCD_CHG" brief="Asynchronous response for NPF_F_wmaxBscpMacDcdUcdChange."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_DEL" brief="Asynchronous response for NPF_F_wmaxBscpMacDelete."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_STATS_CFG" brief="Asynchronous response for NPF_F_wmaxBscpMacStatsConfig."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_STATS_GET" brief="Asynchronous response for NPF_F_wmaxBscpMacStatsGet."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_CAP_ADD" brief="Asynchronous response for NPF_F_wmaxBscpMacCapAdd."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_CAP_CHG" brief="Asynchronous response for NPF_F_wmaxBscpMacCapChange."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_CAP_DEL" brief="Asynchronous response for NPF_F_wmaxBscpMacCapDelete."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_SA_ADD" brief="Asynchronous response for NPF_F_wmaxBscpMacSaAdd."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_SA_DEL" brief="Asynchronous response for NPF_F_wmaxBscpMacSaDel."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_EAP_XFER" brief="Asynchronous response for NPF_F_wmaxBscpSsEapTransfer."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_AUTHORIZE" brief="Asynchronous response for NPF_F_wmaxBscpSsAuthorize."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_REAUTHORIZE" brief="Asynchronous response for NPF_F_wmaxBscpSsReAuthorize."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_DREG" brief="Asynchronous response for NPF_F_wmaxBscpSsDreg."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_DEL" brief="Asynchronous response for NPF_F_wmaxBscpSsDelete."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_STATS_CFG" brief="Asynchronous response for NPF_F_wmaxBscpSsStatsConfig."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_STATS_GET" brief="Asynchronous response for NPF_F_wmaxBscpSsStatsGet."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_CAP_CHG" brief="Asynchronous response for NPF_F_wmaxBscpSsCapChange."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SVC_FLOW_ADD" brief="Asynchronous response for NPF_F_wmaxBscpSvcFlowAdd."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SVC_FLOW_CHG" brief="Asynchronous response for NPF_F_wmaxBscpSvcFlowChg."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SVC_FLOW_DEL" brief="Asynchronous response for NPF_F_wmaxBscpSvcFlowDel."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SVC_FLOW_STATS_CFG" brief="Asynchronous response for NPF_F_wmaxBscpSvcFlowStatsConfig."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SVC_FLOW_STATS_GET" brief="Asynchronous response for NPF_F_wmaxBscpSvcFlowStatsGet."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_RADIO_TRACE_SET" brief="Asynchronous response for NPF_F_wmaxBscpSsRadioTraceSet."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_RADIO_TRACE_GET" brief="Asynchronous response for NPF_F_wmaxBscpSsRadioTraceGet."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_NBR_ADD" brief="Asynchronous response for NPF_F_wmaxBscpMobNbrAdd."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_NBR_DEL" brief="Asynchronous response for NPF_F_wmaxBscpMobNbrDel."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_NBR_CHANGE" brief="Asynchronous response for NPF_F_wmaxBscpMobNbrChange."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_NBR_GET_PARAMS" brief="Asynchronous response for NPF_F_wmaxBscpMobNbrGetParams."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_SCAN_SET" brief="Asynchronous response for NPF_F_wmaxBscpMobSsScanSet."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_STATE_GET" brief="Asynchronous response for NPF_F_wmaxBscpMobSsStateGet."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_STATE_SET" brief="Asynchronous response for NPF_F_wmaxBscpMobSsStateSet."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_HO" brief="Asynchronous response for NPF_F_wmaxBscpMobSsHo."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_HO_REQ" brief="Asynchronous response for NPF_F_wmaxBscpMobSsHoReq."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_IDLE" brief="Asynchronous response for NPF_F_wmaxBscpMobSsIdle."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_IDLE_REQ" brief="Asynchronous response for NPF_F_wmaxBscpMobSsIdleReq."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_LOC_UPDATE" brief="Asynchronous response for NPF_F_wmaxBscpMobSsLocUpdate."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_PAGE" brief="Asynchronous response for NPF_F_wmaxBscpMobSsPage."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_RADIO_TRACE_CONFIG" brief="Asynchronous response for NPF_F_wmaxBscpMacRadioTraceConfig."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_IDLE_AUTH_SET" brief="Asynchronous response for NPF_F_wmaxBscpMobSsIdleAuthSet."></field>
				<field name="NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_SLEEP_DEACTIVATE" brief="Asynchronous response for NPF_F_wmaxBscpMobSsSleepDeactivate"></field>
			</enum>
			<struct type="NPF_F_wmaxBscpAsyncResponseData_t" brief="BSCP Function Response Arguments Data">
				<selectunion type="NPF_F_wmaxBscpAsyncResponseDataUnion_t" name="u">
					<selectfield type="NPF_F_wmaxBscpAsyncResponseType_t" name="asyncResponseType" brief="Asynchronous Response Callback Type."></selectfield>
					<field type="NPF_F_wmaxBscpOpenResponseArgs_t" name="openAsyncResponseArgs">
						<descr>Asynchronous response arguments for NPF_F_wmaxBscpOpen function.</descr>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_OPEN</selector>
					</field>
					<field type="NPF_F_wmaxBscpMacAddResponseArgs_t" name="macAddRspAsyncResponseArgs">
						<descr>Asynchronous response arguments for NPF_F_wmaxBscpMacAdd function.</descr>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_ADD</selector>
					</field>
					<field type="NPF_F_wmaxBscpGblStatsGetResponseArgs_t" name="globalStatsGetAsyncResponseArgs">
						<descr>Asynchronous response arguments for NPF_F_wmaxBscpGblStatsGet function.</descr>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_GLB_STATS_GET</selector>
					</field>
					<field type="NPF_F_wmaxBscpMacStatsGetResponseArgs_t" name="macStatsGetAsyncResponseArgs">
						<descr>Asynchronous response arguments for NPF_F_wmaxBscpMacStatsGet function.</descr>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_STATS_GET</selector>
					</field>
					<field type="NPF_F_wmaxBscpMacDcdUcdChangeResponseArgs_t" name="macDcdUcdChangeAsyncResponseArgs">
						<descr>Asynchronous response arguments for NPF_F_wmaxBscpMacDcdUcdChange function.</descr>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_DCD_UCD_CHG</selector>
					</field>
					<field type="NPF_F_wmaxBscpMacSaAddResponseArgs_t" name="saAddResponseArgs">
						<descr>Asynchronous response arguments for NPF_F_wmaxBscpMacSaAddResponse function.</descr>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_SA_ADD</selector>
					</field>
					<field type="NPF_F_wmaxBscpMacSaDeleteResponseArgs_t" name="saDeleteResponseArgs">
						<descr>Asynchronous response arguments for NPF_F_wmaxBscpMacSaDeleteResponse function.</descr>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_SA_DEL</selector>
					</field>
					<field type="NPF_F_wmaxBscpSsStatsGetResponseArgs_t" name="ssStatsGetAsyncResponseArgs">
						<descr>Asynchronous response arguments for NPF_F_wmaxBscpSsStatsGet function.</descr>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_STATS_GET</selector>
					</field>
					<field type="NPF_F_wmaxBscpSvcFlowAddResponseArgs_t" name="svcFlowAddRspAsyncResponseArgs">
						<descr>Asynchronous response arguments for NPF_F_wmaxBscpSvcFlowAdd function.</descr>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SVC_FLOW_ADD</selector>
					</field>
					<field type="NPF_F_wmaxBscpSvcFlowChgResponseArgs_t" name="svcFlowChgRspAsyncResponseArgs">
						<descr>Asynchronous response arguments for NPF_F_wmaxBscpSvcFlowChg function.</descr>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SVC_FLOW_CHG</selector>
					</field>
					<field type="NPF_F_wmaxBscpSvcFlowStatsGetResponseArgs_t" name="svcFlowStatsGetAsyncResponseArgs">
						<descr>Asynchronous response arguments for NPF_F_wmaxBscpSvcFlowStatsGet function.</descr>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SVC_FLOW_STATS_GET</selector>
					</field>
					<field type="NPF_F_wmaxBscpSsRadioTraceSetResponseArgs_t" name="radioTraceSetAsyncResponseArgs">
						<descr>Asynchronous response arguments for NPF_F_wmaxBscpSsRadioTraceSet function.</descr>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_RADIO_TRACE_SET</selector>
					</field>
					<field type="NPF_F_wmaxBscpSsRadioTraceGetResponseArgs_t" name="radioTraceGetAsyncResponseArgs">
						<descr>Asynchronous response arguments for NPF_F_wmaxBscpSetRadioTraceGet function.</descr>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_RADIO_TRACE_GET</selector>
					</field>
					<field type="NPF_F_wmaxBscpMobNbrAddResponseArgs_t" name="mobNbrAddAsyncResponseArgs">
						<descr>Asynchronous response arguments for NPF_F_wmaxBscpMobNbrAdd function.</descr>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_NBR_ADD</selector>
					</field>
					<field type="NPF_F_wmaxBscpMobNbrGetParamsResponseArgs_t" name="mobNbrGetParamsAsyncResponseArgs">
						<descr>Asynchronous response arguments for NPF_F_wmaxBscpMobNbrGetParams function.</descr>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_NBR_GET_PARAMS</selector>
					</field>
					<field type="NPF_F_wmaxBscpMobSsStateGetResponseArgs_t" name="mobSsStateGetResponseArgs">
						<descr>Asynchronous response arguments for NPF_F_wmaxBscpMobSsStateGet function.</descr>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_STATE_GET</selector>
					</field>
					<field type="NPF_F_wmaxBscpMobSsStateSetResponseArgs_t" name="mobSsStateSetResponseArgs">
						<descr>Asynchronous response arguments for NPF_F_wmaxBscpMobSsStateSet function.</descr>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_STATE_SET</selector>
					</field>
					<field type="NPF_F_wmaxBscpMobSsLocUpdateResponseArgs_t" name="mobSsLocUpdateResponseArgs">
						<descr>Asynchronous response arguments for NPF_F_wmaxBscpMobSsLocUpdate function.</descr>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_LOC_UPDATE</selector>
					</field>
					<field type="NPF_F_wmaxBscpMobSsIdleAuthSetResponseArgs_t" name="mobSsIdleAuthSetResponseArgs">
						<descr>Asynchronous response arguments for NPF_F_wmaxBscpMobSsIdleAuthSet function.</descr>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_IDLE_AUTH_SET</selector>
					</field>
					<field name="unused" type="NPF_uint32_t" brief="Asynchronous responses not returning additional arguments.">
						<descr></descr>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SET_PHY_SAP_ADDR</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_CLOSE</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SET_TIME</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_GLB_STATS_CFG</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_START</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_STOP</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_DEL</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_STATS_CFG</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_CAP_ADD</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_CAP_CHG</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_CAP_DEL</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_EAP_XFER</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_AUTHORIZE</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_REAUTHORIZE</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_DREG</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_DEL</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_STATS_CFG</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_CAP_CHG</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SVC_FLOW_DEL</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SVC_FLOW_STATS_CFG</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MAC_RADIO_TRACE_CONFIG</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_NBR_DEL</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_NBR_CHANGE</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_SCAN_SET</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_HO</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_HO_REQ</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_IDLE</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_IDLE_REQ</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_MOB_SS_PAGE</selector>
						<selector>NPF_F_WMAX_BSCP_ASYNC_RESPONSE_SS_SLEEP_DEACTIVATE</selector>
					</field>
				</selectunion>
			</struct>
			<struct type="NPF_F_wmaxBscpAsyncResponse_t" brief="Asynchronous Function Response">
				<descr>
					This structure contains a BSCP function completion event record.
					Each completion event record contains the object identifier associated with the BSCP FAPI function, the return code and an optional structure containing additional information.
				</descr>
				<field name="errorType" type="NPF_F_wmaxBscpErrorType_t" brief="Error code."></field>
				<field name="objHandle" type="NPF_F_wmaxBscpObjectId_t" brief="The object that the function call was associated with"></field>
				<field name="asyncResponseData" type="NPF_F_wmaxBscpAsyncResponseData_t" brief="Optional information returned along with certain asynchronous responses."></field>
			</struct>
			<struct type="NPF_F_wmaxBscpAsyncResponseCallbackData_t" brief="Asynchronous Response Callback Data">
				<descr>
					The structure contains the asynchronous response data passed back to FAPI clients using callbacks.
					The callback function receives this structure containing one or more asynchronous responses from a single function call.
					There is one element for each completed request, regardless of whether they were successful: 
					the asynchResponses contains asynchResponsesNum pointers to structures of the type NPF_F_wmaxBscpAsyncResponseCallback_t.
					Callback function invocations are repeated until all requests are complete.
					Responses are not repeated for request elements already indicated as complete in earlier callback function invocations.
				</descr>
				<field name="type" type="NPF_F_wmaxBscpAsyncResponseType_t" brief="Asynchronous Response Type"></field>
				<field name="allOK" type="NPF_boolean_t" brief="TRUE if all FAPI requests completed OK."></field>
				<vector name="asynchResponses" type="NPF_F_wmaxBscpAsyncResponse_t" brief="List of Asynchronous Responses">
					<descr>
						Array of response structures containing responseNum entries.
					</descr>
					<length name="asynchResponsesNum" type="NPF_uint32_t" brief="Number of Asynchronous Responses."></length>
				</vector>
			</struct>
			<functype name="NPF_F_wmaxBscpAsyncResponseCallback_t" type="void" class="callback" brief="Asynchronous Response Callback Prototype">
				<descr>
					A function with this signature must be registered by the application (using NPF_F_wmaxBscpCallbackRegister) to process solicited responses.
				</descr>
				<param io="in" type="NPF_userContext_t" name="context">
					<descr>
							The context item that was supplied by the application when the BSCP FAPI function call was invoked.
					 </descr>
				</param>
				<param io="in" type="NPF_correlator_t" name="correlator">
					<descr>
						A unique application invocation context that was supplied during calling a function call.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpAsyncResponseCallbackData_t" name="asyncResponseCallbackData">
					<descr>
						   Asynchronous response callback data. 
					 </descr>
				</param>
			</functype>
		</section>
		<section name="Response Functions">
			<func name="NPF_F_wmaxBscpAsyncResponseCallbackRegister" type="NPF_error_t" class="cback_register" brief="Register Asynchronous Response Callback">
				<descr>
					This function is used to register a callback function to receive notifications of BSCP asynchronous responses.
					The function allows the application to register a asynchronous response callback function for the related callback category and to associate a unique callback handle and application context.
					Multiple callback functions can be registered using this function.
					The callback function is identified by a userContext and asyncResponseFunc pair.
					For each pair, a unique callbackHandle is assigned for future
					reference. Because the callback function is identified by both userContext and
					asyncResponseFunc, duplicate registration of the same callback function with a different
					userContext is allowed. Also, the same userContext can be shared among different
					callback functions. Duplicate registration of the same pair of userContext and asyncResponseFunc
					has no effect; it will output a handle that is already assigned to the pair
					and return NPF_E_ALREADY_REGISTERED.
				</descr>
				<param io="in" type="NPF_userContext_t" name="userContext">
					<descr>
						The context item provided to the request callback routine when it is invoked.
					</descr>
				</param>
				<param io="in" type="NPF_F_wmaxBscpAsyncResponseCallback_t" name="asyncResponseFunc">
					<descr>
						The pointer to the notification callback function to be called.
					</descr>
				</param>
				<param io="out" type="NPF_callbackHandle_t *" name="callbackHandle">
					<descr>
						A unique identifier related to this registration.
					</descr>
				</param>
				<return>
					<descr>Error code indicating function success.</descr>
					<retval name="NPF_NO_ERROR">
						<descr>The registration completed successfully.</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_FUNCTION">
						<descr>
						The registration was invoked with a function pointer parameter that was invalid.
						</descr>
					</retval>
					<retval name="NPF_E_CALLBACK_ALREADY_REGISTERED">
						<descr>
							The registration was invoked with 
							a pair composed of a function pointer and a user context which was previously 
							used for an identical registration.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>Used to indicate other errors not listed above.</descr>
					</retval>
				</return>
			</func>
			<func name="NPF_F_wmaxBscpAsyncResponseCallbackDeregister" type="NPF_error_t" class="cback_deregister" brief="Deregister Asynchronous Response Callback" xdrid="RPC_WMAX_BSCP_ASYNC_RESPONSE_CB_REGISTER">
				<descr>
					This function is used to deregister a request callback handler, which was previously
					registered to receive callback notifications of BSCP protocol request statuses.
					It may be invoked by any application no longer interested in receiving status notifications.
					Note: This function operates in a synchronous manner. There may be a timing window where
					outstanding callback continue to be delivered to the callback routine after the de-registration
					function has been invoked. It is the responsibility of implementation to guarantee that the request callback
					function is not called after the deregister function has returned.
				</descr>
				<param io="in" type="NPF_callbackHandle_t" name="callbackHandle">
					<descr>
						The unique identifier returned to the application when the
						request callback routine was registered.
					</descr>
				</param>
				<return>
					<descr>
						Error code indicating function success.
					</descr>
					<retval name="NPF_NO_ERROR">
						<descr>The operation completed successfully.</descr>
					</retval>
					<retval name="NPF_E_BAD_CALLBACK_HANDLE">
						<descr>
							A function was invoked with a callback handle that did not
							correspond to a valid NPF callback handle as returned by a registration function.
						</descr>
					</retval>
					<retval name="NPF_E_UNKNOWN">
						<descr>
							Indicates other errors.
						</descr>
					</retval>
				</return>
			</func>
		</section>
	</section>
</api>
