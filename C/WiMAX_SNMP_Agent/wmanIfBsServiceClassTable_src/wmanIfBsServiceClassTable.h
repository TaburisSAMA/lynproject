/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 14170 $ of $
 *
 * $Id:$
 */
#ifndef WMANIFBSSERVICECLASSTABLE_H
#define WMANIFBSSERVICECLASSTABLE_H

#ifdef __cplusplus
extern          "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

    /*
     * other required module components 
     */
    /* *INDENT-OFF*  */
config_add_mib(WMAN-IF-MIB)
config_require(WMAN-IF-MIB/wmanIfBsServiceClassTable/wmanIfBsServiceClassTable_interface)
config_require(WMAN-IF-MIB/wmanIfBsServiceClassTable/wmanIfBsServiceClassTable_data_access)
config_require(WMAN-IF-MIB/wmanIfBsServiceClassTable/wmanIfBsServiceClassTable_data_get)
config_require(WMAN-IF-MIB/wmanIfBsServiceClassTable/wmanIfBsServiceClassTable_data_set)
    /* *INDENT-ON*  */

    /*
     * OID and column number definitions for wmanIfBsServiceClassTable 
     */
#include "wmanIfBsServiceClassTable_oids.h"

    /*
     * enum definions 
     */
#include "wmanIfBsServiceClassTable_enums.h"

    /*
     *********************************************************************
     * function declarations
     */
    void            init_wmanIfBsServiceClassTable(void);
    void            shutdown_wmanIfBsServiceClassTable(void);

    /*
     *********************************************************************
     * Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table wmanIfBsServiceClassTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * WMAN-IF-MIB::wmanIfBsServiceClassTable is subid 3 of wmanIfBsPacketCs.
     * Its status is Current.
     * OID: .1.3.6.1.2.1.10.184.1.1.1.3, length: 12
     */
    /*
     *********************************************************************
     * When you register your mib, you get to provide a generic
     * pointer that will be passed back to you for most of the
     * functions calls.
     *
     * TODO:100:r: Review all context structures
     */
    /*
     * TODO:101:o: |-> Review wmanIfBsServiceClassTable registration context.
     */
    typedef netsnmp_data_list wmanIfBsServiceClassTable_registration;

/**********************************************************************/
    /*
     * TODO:110:r: |-> Review wmanIfBsServiceClassTable data context structure.
     * This structure is used to represent the data for wmanIfBsServiceClassTable.
     */
    /*
     * This structure contains storage for all the columns defined in the
     * wmanIfBsServiceClassTable.
     */
    typedef struct wmanIfBsServiceClassTable_data_s {

        /*
         * wmanIfBsQosServiceClassName(2)/WmanIfServClassName/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/h
         */
        char            wmanIfBsQosServiceClassName[128];
        size_t          wmanIfBsQosServiceClassName_len;        /* # of char elements, not bytes */

        /*
         * wmanIfBsQoSTrafficPriority(3)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
        long            wmanIfBsQoSTrafficPriority;

        /*
         * wmanIfBsQoSMaxSustainedRate(4)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/W/e/r/d/h
         */
        u_long          wmanIfBsQoSMaxSustainedRate;

        /*
         * wmanIfBsQoSMaxTrafficBurst(5)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/W/e/r/d/h
         */
        u_long          wmanIfBsQoSMaxTrafficBurst;

        /*
         * wmanIfBsQoSMinReservedRate(6)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/W/e/r/d/h
         */
        u_long          wmanIfBsQoSMinReservedRate;

        /*
         * wmanIfBsQoSToleratedJitter(7)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/W/e/r/d/h
         */
        u_long          wmanIfBsQoSToleratedJitter;

        /*
         * wmanIfBsQoSMaxLatency(8)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/W/e/r/d/h
         */
        u_long          wmanIfBsQoSMaxLatency;

        /*
         * wmanIfBsQoSFixedVsVariableSduInd(9)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/D/h
         */
        u_long          wmanIfBsQoSFixedVsVariableSduInd;

        /*
         * wmanIfBsQoSSduSize(10)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/W/e/r/D/h
         */
        u_long          wmanIfBsQoSSduSize;

        /*
         * wmanIfBsQosScSchedulingType(11)/WmanIfSfSchedulingType/ASN_INTEGER/long(u_long)//l/A/W/E/r/D/h
         */
        u_long          wmanIfBsQosScSchedulingType;

        /*
         * wmanIfBsQosScArqEnable(12)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
        u_long          wmanIfBsQosScArqEnable;

        /*
         * wmanIfBsQosScArqWindowSize(13)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
        long            wmanIfBsQosScArqWindowSize;

        /*
         * wmanIfBsQosScArqBlockLifetime(14)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/D/h
         */
        long            wmanIfBsQosScArqBlockLifetime;

        /*
         * wmanIfBsQosScArqSyncLossTimeout(15)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/D/h
         */
        long            wmanIfBsQosScArqSyncLossTimeout;

        /*
         * wmanIfBsQosScArqDeliverInOrder(16)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
        u_long          wmanIfBsQosScArqDeliverInOrder;

        /*
         * wmanIfBsQosScArqRxPurgeTimeout(17)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/D/h
         */
        long            wmanIfBsQosScArqRxPurgeTimeout;

        /*
         * wmanIfBsQosScArqBlockSize(18)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
        long            wmanIfBsQosScArqBlockSize;

        /*
         * wmanIfBsQosSCMinRsvdTolerableRate(19)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/W/e/r/d/h
         */
        u_long          wmanIfBsQosSCMinRsvdTolerableRate;

        /*
         * wmanIfBsQoSReqTxPolicy(20)/BITS/ASN_OCTET_STR/char(u_long)//L/A/W/E/r/d/h
         */
        u_long          wmanIfBsQoSReqTxPolicy;

        /*
         * wmanIfBsQoSServiceClassRowStatus(21)/RowStatus/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
        u_long          wmanIfBsQoSServiceClassRowStatus;

    } wmanIfBsServiceClassTable_data;


    /*
     *********************************************************************
     * TODO:115:o: |-> Review wmanIfBsServiceClassTable undo context.
     * We're just going to use the same data structure for our
     * undo_context. If you want to do something more efficent,
     * define your typedef here.
     */
    typedef wmanIfBsServiceClassTable_data
        wmanIfBsServiceClassTable_undo_data;

    /*
     * TODO:120:r: |-> Review wmanIfBsServiceClassTable mib index.
     * This structure is used to represent the index for wmanIfBsServiceClassTable.
     */
    typedef struct wmanIfBsServiceClassTable_mib_index_s {

        /*
         * ifIndex(1)/InterfaceIndex/ASN_INTEGER/long(long)//l/A/w/e/R/d/H
         */
        long            ifIndex;

        /*
         * wmanIfBsQoSProfileIndex(1)/INTEGER/ASN_INTEGER/long(long)//l/a/w/e/R/d/h
         */
        long            wmanIfBsQoSProfileIndex;


    } wmanIfBsServiceClassTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review wmanIfBsServiceClassTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
     */
#define MAX_wmanIfBsServiceClassTable_IDX_LEN     2


    /*
     *********************************************************************
     * TODO:130:o: |-> Review wmanIfBsServiceClassTable Row request (rowreq) context.
     * When your functions are called, you will be passed a
     * wmanIfBsServiceClassTable_rowreq_ctx pointer.
     */
    typedef struct wmanIfBsServiceClassTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
        netsnmp_index   oid_idx;
        oid             oid_tmp[MAX_wmanIfBsServiceClassTable_IDX_LEN];

        wmanIfBsServiceClassTable_mib_index tbl_idx;

        wmanIfBsServiceClassTable_data data;
        wmanIfBsServiceClassTable_undo_data *undo;
        unsigned int    column_set_flags;       /* flags for set columns */


        /*
         * flags per row. Currently, the first (lower) 8 bits are reserved
         * for the user. See mfd.h for other flags.
         */
        u_int           rowreq_flags;

        /*
         * TODO:131:o: |   |-> Add useful data to wmanIfBsServiceClassTable rowreq context.
         */

        /*
         * storage for future expansion
         */
        netsnmp_data_list *wmanIfBsServiceClassTable_data_list;

    } wmanIfBsServiceClassTable_rowreq_ctx;

    typedef struct wmanIfBsServiceClassTable_ref_rowreq_ctx_s {
        wmanIfBsServiceClassTable_rowreq_ctx *rowreq_ctx;
    } wmanIfBsServiceClassTable_ref_rowreq_ctx;

    /*
     *********************************************************************
     * function prototypes
     */
    int            
        wmanIfBsServiceClassTable_pre_request
        (wmanIfBsServiceClassTable_registration * user_context);
    int            
        wmanIfBsServiceClassTable_post_request
        (wmanIfBsServiceClassTable_registration * user_context, int rc);

    int            
        wmanIfBsServiceClassTable_rowreq_ctx_init
        (wmanIfBsServiceClassTable_rowreq_ctx * rowreq_ctx,
         void *user_init_ctx);
    void           
        wmanIfBsServiceClassTable_rowreq_ctx_cleanup
        (wmanIfBsServiceClassTable_rowreq_ctx * rowreq_ctx);

    int            
        wmanIfBsServiceClassTable_commit
        (wmanIfBsServiceClassTable_rowreq_ctx * rowreq_ctx);

    wmanIfBsServiceClassTable_rowreq_ctx
        *wmanIfBsServiceClassTable_row_find_by_mib_index
        (wmanIfBsServiceClassTable_mib_index * mib_idx);

    extern oid      wmanIfBsServiceClassTable_oid[];
    extern int      wmanIfBsServiceClassTable_oid_size;


#include "wmanIfBsServiceClassTable_interface.h"
#include "wmanIfBsServiceClassTable_data_access.h"
#include "wmanIfBsServiceClassTable_data_get.h"
#include "wmanIfBsServiceClassTable_data_set.h"

    /*
     * DUMMY markers, ignore
     *
     * TODO:099:x: *************************************************************
     * TODO:199:x: *************************************************************
     * TODO:299:x: *************************************************************
     * TODO:399:x: *************************************************************
     * TODO:499:x: *************************************************************
     */

#ifdef __cplusplus
}
#endif
#endif                          /* WMANIFBSSERVICECLASSTABLE_H */
/** @} */
