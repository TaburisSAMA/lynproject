************************************************************************
wmanIfBsServiceClassTable README
------------------------------------------------------------------------
  This readme file describes the code generated by mib2c (using the MIBs
  for Dummies (MFD) configuration file). The code generated was
  generated specifically for the following SNMP table:

     wmanIfBsServiceClassTable

  Your code will be called when the snmp agent receives requests for
  the wmanIfBsServiceClassTable table.  The agent will start by looking for the right
  row in your existing data to operate on, if one exists.


  Configuration Variables
  ------------------------------------------------------------
  Some variables used for code generation may be set to affect the code
  generation. You may override these variables by setting them in the
  file defaults/table-wmanIfBsServiceClassTable.m2d, and then re-running mib2c.

    m2c_table_settable (currently '1')
    --------------------------------------------------------
    This variable determines whether or not code is generated to support
    MIB object which have an access of read-write or read-create. The
    default is set based on whether or not the table contains writable
    objects, but can be over-ridden.

    Syntax: @eval $m2c_table_settable = 0@


    m2c_table_dependencies (currently '0')
    --------------------------------------------------------
    This variable determines whether or not code is generated to support
    checking dependencies between columns, rows or tables. The default
    is set based on whether or not the table contains writable objects,
    but can be over-ridden.

    Syntax: @eval $m2c_table_dependencies = 0@


    m2c_table_row_creation (currently '1')
    --------------------------------------------------------
    This variable determines whether or not code is generated to support
    checking creation of new rows via SNMP. The default is set based on
    whether or not the table contains read-create objects, but can be
    over-ridden.

    Syntax: @eval $m2c_table_row_creation = 0@


    m2c_context_reg (currently 'netsnmp_data_list')
    --------------------------------------------------------
    This variable contains the structure name to typedef for the
    wmanIfBsServiceClassTable_registration.

    During initilization, you will provide a pointer to a structure of
    this type. This pointer is used as a parameter to many functions so
    that you have access to your registration data. The default is a
    netsnmp_data_list pointer, which will allow you to keep multiple
    pointers tagged by a text name. If you have a new or existing structure
    you would rather use, you can redefine this variable.
    

    To avoid regenerating code, you may also change this typedef directly
    in the wmanIfBsServiceClassTable.h header.

    Syntax: @eval $m2c_context_reg = "struct my_registration_context@


    m2c_data_context (currently 'generated')
    --------------------------------------------------------
    This variable contains the structure name to typedef for the
    wmanIfBsServiceClassTable_data.

    This typedef is used in the row request context structure for the table,
    wmanIfBsServiceClassTable_rowreq_ctx.

    The typedef in the primary table context will be used for the data and
    undo structure types. This structure should contain all the data
    needed for all the columns in the table. The default is 'generated',
    which will cuase a new data strcuture to be generated with data members
    for each column.

    To avoid regenerating code, you may also change this typedef directly
    in the wmanIfBsServiceClassTable.h header.

    Syntax: @eval $m2c_data_context = "struct my_data_context"@


    m2c_data_allocate (currently '0')
    --------------------------------------------------------
    This variable determines whether or not the data context (see above)
    requires memory to be allocated. The default generated data structure
    does not. If you are using a custom data context which needs to
    allocate memory, override this value and two additional functions
    will be generated:

      wmanIfBsServiceClassTable_allocate_data
      wmanIfBsServiceClassTable_release_data

    Syntax: @eval $m2c_data_allocate = 1@


    m2c_data_init (currently '1')
    --------------------------------------------------------
    This variable determines whether or not the data context (see above)
    or any other items you have added to the table context requires
    initialization. The default generated data structure does not. If you
    are using a custom data context or have added items needing initialization
    to the table context, override this value and two additional functions
    will be generated:

      wmanIfBsServiceClassTable_rowreq_ctx_init
      wmanIfBsServiceClassTable_rowreq_ctx_cleanup

    Syntax: @eval 1 = 1@


    m2c_table_access (currently 'container-cached')
    ------------------------------------------------------------------
    This variable determines which data interface will be use to generate
    code for looking up data for a given index. The default is the
    'container-cached' access code, which caches the data in a netsnmp-
    container (usually a sorted array).

    Available options can be determined by checking for mib2c configuration
    files that begin with 'mfd-access-*'.

    Syntax: @eval $m2c_table_access = 'container-cached'@

 
    m2c_include_examples (currently '1')
    ------------------------------------------------------------------
    This variable determines whether or not to generate example code. The
    default is to generate example code.

    Syntax: @eval $m2c_include_examples = 0@


    m2c_data_transient (currently '2')
    ------------------------------------------------------------------
    This variable determines how the generated example code deals with the
    data during data lookup. See the table readme file for details on how
    the current table access method interprets this value. In general,
    a value of 0 indicates persistent data, 1 indicates semi-transient and
    2 indicates transient data.

    Syntax: @eval $m2c_data_transient = 0@


 Index(es) for the wmanIfBsServiceClassTable table
  ------------------------------------------------------------
  The index(es) for the wmanIfBsServiceClassTable table are:

     ifIndex:
        Syntax:      InterfaceIndex
        DataType:    INTEGER32
        ASN type:    ASN_INTEGER
        C-code type: long
     wmanIfBsQoSProfileIndex:
        Syntax:      INTEGER
        DataType:    INTEGER
        ASN type:    ASN_INTEGER
        C-code type: long

  You should know how to set all these values from your data context,
  wmanIfBsServiceClassTable_data.


************************************************************************
wmanIfBsServiceClassTable File Overview
------------------------------------------------------------------------
  Several files have been generated to implement the wmanIfBsServiceClassTable
  table. We'll go through these files, one by one, explaining each and
  letting you know which you need to edit.


File: wmanIfBsServiceClassTable_data_access.[c|h]
------------------------------------------------------------------------
  The wmanIfBsServiceClassTable_data_access file contains the interface to your data in
  its raw format.  These functions are used to build the row cache or 
  locate the row (depending on the table access method).

  Set MIB context
  -----------------
  TODO : Set MIB index values
  FUNC : wmanIfBsServiceClassTable_indexes_set
  WHERE: wmanIfBsServiceClassTable_data_access.c

  This is a convenience function for setting the index context from
  the native C data. Where necessary, value mapping should be done.

  This function should update the table index values (found in
  tbl_idx) for the given raw data.

  
  container summary
  ------------------------
    The container data access code is for cases when you want to
    store your data in the agent/sub-agent.

    ... to be continued...




File: wmanIfBsServiceClassTable_enums.h
------------------------------------------------------------------------
  This file contains macros for mapping enumeration values when the
  enumerated values defined by the MIB do not match the values used
  internally.

  Review this file to see if any values need to be updated.


File: wmanIfBsServiceClassTable_data_get.c
------------------------------------------------------------------------
  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : wmanIfBsQosServiceClassName_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : wmanIfBsQoSTrafficPriority_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : wmanIfBsQoSMaxSustainedRate_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : wmanIfBsQoSMaxTrafficBurst_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : wmanIfBsQoSMinReservedRate_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : wmanIfBsQoSToleratedJitter_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : wmanIfBsQoSMaxLatency_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : wmanIfBsQoSFixedVsVariableSduInd_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : wmanIfBsQoSSduSize_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : wmanIfBsQosScSchedulingType_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : wmanIfBsQosScArqEnable_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : wmanIfBsQosScArqWindowSize_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : wmanIfBsQosScArqBlockLifetime_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : wmanIfBsQosScArqSyncLossTimeout_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : wmanIfBsQosScArqDeliverInOrder_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : wmanIfBsQosScArqRxPurgeTimeout_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : wmanIfBsQosScArqBlockSize_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : wmanIfBsQosSCMinRsvdTolerableRate_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : wmanIfBsQoSReqTxPolicy_get

  Since this column has enumerated BITS, you should update or replace the
  IS_SET_* macros to properly determine whether or not a particular bit
  should be set.

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : wmanIfBsQoSServiceClassRowStatus_get



File: wmanIfBsServiceClassTable_data_set.c
------------------------------------------------------------------------

  This code was generated based on the following assumptions or settings:

  1) Some of the values for this table have DEPENDENCIES on other objects.

  DEPENDENCIES on other objects complicates SET request processing. When
  one or more columns in a table depend on another object (in the same
  table, or in another table), a DEPENDENCY exists. For example, if you
  have a table that determine a color with three columns (red, green and
  blue) that define the percentage of each primary color, the total for
  the three columns must equal 100 percent. So, in addition to checking
  that each colums has a valid value between 0 and 100, the total of
  all three columns must equal 100.

  Set $m2c_table_dependencies = 0 in defaults/table-wmanIfBsServiceClassTable.m2d
  and regenerate code if this assumption is incorrect.

  2) This table supports ROW CREATION.

  Supporting ROW CREATION allows new rows to be created via SNMP requests.

  To support row creation, the index component of an incoming set request must
  be validated. A funciton is generated for each individual index component,
  and another for validating all the index components together.

  Validate external index
  -----------------------
  TODO : validate the specified external index component
  FUNC : wmanIfBsServiceClassTable_ifIndex_check_index


  Validate index component
  ------------------------
  TODO : validate the specified index component
  FUNC : wmanIfBsQoSProfileIndex_check_index


  Validate index
  --------------
  TODO : check that all index components are valid
  FUNC : wmanIfBsServiceClassTable_validate_index



  Undo setup
  ----------
  TODO : save data for undo
  FUNC : wmanIfBsServiceClassTable_undo_setup

  This function will be called before the individual undo_setup functions are
  called. This is where you should save any undo information which is not
  directly related to a particular column. This function will only be called
  once per row. After this function is called, any column which is being
  set will have its individual node undo_setup function called.



  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : wmanIfBsQosServiceClassName_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : wmanIfBsQosServiceClassName_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : wmanIfBsQosServiceClassName_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : wmanIfBsQosServiceClassName_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : wmanIfBsQoSTrafficPriority_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : wmanIfBsQoSTrafficPriority_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : wmanIfBsQoSTrafficPriority_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : wmanIfBsQoSTrafficPriority_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : wmanIfBsQoSMaxSustainedRate_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : wmanIfBsQoSMaxSustainedRate_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : wmanIfBsQoSMaxSustainedRate_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : wmanIfBsQoSMaxSustainedRate_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : wmanIfBsQoSMaxTrafficBurst_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : wmanIfBsQoSMaxTrafficBurst_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : wmanIfBsQoSMaxTrafficBurst_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : wmanIfBsQoSMaxTrafficBurst_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : wmanIfBsQoSMinReservedRate_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : wmanIfBsQoSMinReservedRate_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : wmanIfBsQoSMinReservedRate_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : wmanIfBsQoSMinReservedRate_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : wmanIfBsQoSToleratedJitter_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : wmanIfBsQoSToleratedJitter_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : wmanIfBsQoSToleratedJitter_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : wmanIfBsQoSToleratedJitter_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : wmanIfBsQoSMaxLatency_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : wmanIfBsQoSMaxLatency_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : wmanIfBsQoSMaxLatency_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : wmanIfBsQoSMaxLatency_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : wmanIfBsQoSFixedVsVariableSduInd_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : wmanIfBsQoSFixedVsVariableSduInd_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : wmanIfBsQoSFixedVsVariableSduInd_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : wmanIfBsQoSFixedVsVariableSduInd_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : wmanIfBsQoSSduSize_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : wmanIfBsQoSSduSize_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : wmanIfBsQoSSduSize_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : wmanIfBsQoSSduSize_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : wmanIfBsQosScSchedulingType_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : wmanIfBsQosScSchedulingType_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : wmanIfBsQosScSchedulingType_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : wmanIfBsQosScSchedulingType_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : wmanIfBsQosScArqEnable_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : wmanIfBsQosScArqEnable_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : wmanIfBsQosScArqEnable_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : wmanIfBsQosScArqEnable_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : wmanIfBsQosScArqWindowSize_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : wmanIfBsQosScArqWindowSize_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : wmanIfBsQosScArqWindowSize_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : wmanIfBsQosScArqWindowSize_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : wmanIfBsQosScArqBlockLifetime_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : wmanIfBsQosScArqBlockLifetime_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : wmanIfBsQosScArqBlockLifetime_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : wmanIfBsQosScArqBlockLifetime_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : wmanIfBsQosScArqSyncLossTimeout_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : wmanIfBsQosScArqSyncLossTimeout_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : wmanIfBsQosScArqSyncLossTimeout_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : wmanIfBsQosScArqSyncLossTimeout_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : wmanIfBsQosScArqDeliverInOrder_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : wmanIfBsQosScArqDeliverInOrder_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : wmanIfBsQosScArqDeliverInOrder_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : wmanIfBsQosScArqDeliverInOrder_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : wmanIfBsQosScArqRxPurgeTimeout_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : wmanIfBsQosScArqRxPurgeTimeout_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : wmanIfBsQosScArqRxPurgeTimeout_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : wmanIfBsQosScArqRxPurgeTimeout_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : wmanIfBsQosScArqBlockSize_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : wmanIfBsQosScArqBlockSize_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : wmanIfBsQosScArqBlockSize_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : wmanIfBsQosScArqBlockSize_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : wmanIfBsQosSCMinRsvdTolerableRate_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : wmanIfBsQosSCMinRsvdTolerableRate_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : wmanIfBsQosSCMinRsvdTolerableRate_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : wmanIfBsQosSCMinRsvdTolerableRate_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : wmanIfBsQoSReqTxPolicy_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : wmanIfBsQoSReqTxPolicy_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : wmanIfBsQoSReqTxPolicy_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : wmanIfBsQoSReqTxPolicy_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : wmanIfBsQoSServiceClassRowStatus_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : wmanIfBsQoSServiceClassRowStatus_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : wmanIfBsQoSServiceClassRowStatus_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : wmanIfBsQoSServiceClassRowStatus_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.



  Commit changes
  --------------
  TODO : commit changes
  FUNC : wmanIfBsServiceClassTable_commit

  After all values have been set, the commit function will be called.





************************************************************************
wmanIfBsServiceClassTable Reference
------------------------------------------------------------------------

Function flow
----------------------------------------------------
To give you the general idea of how the functions flow works, this
example flow is from a complete table implementation.

NOTE: Depending on your configuration, some of the functions used in the
      examples below  may not have been generated for the
      wmanIfBsServiceClassTable table.

      Conversely, the examples below may not include some functions that
      were generated for the wmanIfBsServiceClassTable table.

To watch the flow of the wmanIfBsServiceClassTable table, use the
following debug tokens:

        snmp_agent
        helper:table:req
        wmanIfBsServiceClassTable
        verbose:wmanIfBsServiceClassTable
        internal:wmanIfBsServiceClassTable

e.g.
        snmpd -f -Le -DwmanIfBsServiceClassTable,verbose:wmanIfBsServiceClassTable,internal:wmanIfBsServiceClassTable


Initialization
--------------------------------
init_xxxTable: called                           xxx.c
   initialize_table_xxxTable                    xxx.c
      _xxxTable_initialize_interface            xxx_interface.c
         xxxTable_init_data                     xxx_data_access.c
      _xxxTable_container_init                  xxx_interface.c
         xxxTable_container_init                xxx_data_access.c


GET Request
--------------------------------
_cache_load                                     xxx_interface.c
   xxxTable_cache_load                          xxx_data_access.c
      xxxTable_allocate_rowreq_ctx              xxx_interface.c
         xxxTable_allocate_data                 xxx_data_get.c
         xxxTable_rowreq_ctx_init               xxx_data_get.c
      xxxTable_indexes_set                      xxx_data_get.c
         xxxTable_indexes_set_tbl_idx           xxx_data_get.c

xxxTable_pre_request                              

_mfd_xxxTable_object_lookup                     xxx_interface.c
   xxxTable_row_prep                            xxx_data_access.c

_mfd_xxxTable_get_values                        xxx_interface.c
   _mfd_xxxTable_get_column                     xxx_interface.c
      yyy_get                                   xxx_data_get.c

xxxTable_post_request


GETNEXT Request
--------------------------------
_cache_load                                     ...
xxxTable_pre_request                            ...
_mfd_xxxTable_object_lookup                     ...
_mfd_xxxTable_get_values                        ...
xxxTable_post_request                           ...


SET Request: success
--------------------------------
_cache_load                                     ...
xxxTable_pre_request
_mfd_xxxTable_object_lookup                     ...

_mfd_xxxTable_check_objects                     xxx_interface.c
   _xxxTable_check_column                       xxx_interface.c
      yyy_check_value                           xxx_data_set.c

_mfd_xxxTable_undo_setup                        xxx_interface.c
   xxxTable_allocate_data                       ...
   xxxTable_undo_setup                          xxx_interface.c
      _xxxTable_undo_setup_column               xxx_interface.c
         yyy_undo_setup                         xxx_data_set.c

_mfd_xxxTable_set_values                        xxx_interface.c
   _xxxTable_set_column                         xxx_interface.c
      yyy_set                                   xxx_data_set.c

_mfd_xxxTable_check_dependencies                xxx_interface.c
   xxxTable_check_dependencies                  xxx_data_set.c

_mfd_xxxTable_commit                            xxx_interface.c
   xxxTable_commit                              xxx_data_set.c

_mfd_xxxTable_undo_cleanup                      xxx_interface.c
   xxxTable_undo_cleanup                        xxx_data_set.c
      xxxTable_release_data                     ...

xxxTable_post_request                           ...


SET Request: row creation
--------------------------------
_cache_load                                     ...
xxxTable_pre_request

_mfd_xxxTable_object_lookup                     ...
   xxxTable_index_from_oid                      xxx_interface.c
   xxxTable_allocate_rowreq_ctx                 ...
      ...
   _xxxTable_check_indexes                      xxx_interface.c
      yyy_check_index                           xxx_data_set.c
      xxxTable_validate_index                   xxx_data_set.c

_mfd_xxxTable_check_objects                     ...
   _xxxTable_check_column                       ...
      yyy_check_value                           ...
   _xxxTable_check_column                       ...
      yyy_check_value                           ...

_mfd_xxxTable_undo_setup                        ...
_mfd_xxxTable_set_values                        ...
_mfd_xxxTable_check_dependencies                ...
_mfd_xxxTable_commit                            ...
_mfd_xxxTable_undo_cleanup                      ...
xxxTable_post_request                           ...


SET Resuest: value error
--------------------------------
_cache_load                                     ...
xxxTable_pre_request                            ...
_mfd_xxxTable_object_lookup                     ...

_mfd_xxxTable_check_objects                     ...
   _xxxTable_check_column                       ...
      yyy_check_value                           ...
      ERROR:"yyy value not supported"

xxxTable_post_request                           ...


SET Request: commit failure
--------------------------------
_cache_load                                     ...
xxxTable_pre_request                            ...
_mfd_xxxTable_object_lookup                     ...
_mfd_xxxTable_check_objects                     ...
_mfd_xxxTable_undo_setup                        ...
_mfd_xxxTable_set_values                        ...
_mfd_xxxTable_check_dependencies                ...

_mfd_xxxTable_commit                            ...
   xxxTable_commit                              ...
   ERROR: bad rc -1

_mfd_xxxTable_undo_commit                       xxx_interface.c
   xxxTable_undo_commit                         xxx_data_set.c

_mfd_xxxTable_undo_values                       xxx_interface.c
   _xxxTable_undo_column                        xxx_interface.c
      yyy_undo                                  xxx_data_set.c

_mfd_xxxTable_undo_cleanup                      ...
xxxTable_post_request                           ...


Row release (user initiated)
--------------------------------
xxxTable_release_rowreq_ctx                     xxx_interface.c
   xxxTable_rowreq_ctx_cleanup                  xxx_data_get.c
   xxxTable_release_data                        xxx_data_get.c



Table / column details
----------------------------------------------------
/**********************************************************************
 **********************************************************************
 ***
 *** Table wmanIfBsServiceClassTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * WMAN-IF-MIB::wmanIfBsServiceClassTable is subid 3 of wmanIfBsPacketCs.
 * Its status is Current.
 * OID: .1.3.6.1.2.1.10.184.1.1.1.3, length: 12
*/

/*---------------------------------------------------------------------
 * WMAN-IF-MIB::wmanIfBsServiceClassEntry.wmanIfBsQoSProfileIndex
 * wmanIfBsQoSProfileIndex is subid 1 of wmanIfBsServiceClassEntry.
 * Its status is Current, and its access level is NoAccess.
 * OID: .1.3.6.1.2.1.10.184.1.1.1.3.1.1
 * Description:
The index value which uniquely identifies an entry
             in the wmanIfBsServiceClassTable
 *
 * Attributes:
 *   accessible 0     isscalar 0     enums  0      hasdefval 0
 *   readable   0     iscolumn 1     ranges 1      hashint   0
 *   settable   0
 *
 * Ranges:  1 - 65535;
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 *
 *
 *
 * NOTE: NODE wmanIfBsQoSProfileIndex IS NOT ACCESSIBLE
 *
 *
 */
/*---------------------------------------------------------------------
 * WMAN-IF-MIB::wmanIfBsServiceClassEntry.wmanIfBsQosServiceClassName
 * wmanIfBsQosServiceClassName is subid 2 of wmanIfBsServiceClassEntry.
 * Its status is Current, and its access level is Create.
 * OID: .1.3.6.1.2.1.10.184.1.1.1.3.1.2
 * Description:
Refers to the Service Class Name
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 1      hashint   0
 *   settable   1
 *
 * Ranges:  2 - 128;
 *
 * Its syntax is WmanIfServClassName (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.  (Max 128)
 */
/*---------------------------------------------------------------------
 * WMAN-IF-MIB::wmanIfBsServiceClassEntry.wmanIfBsQoSTrafficPriority
 * wmanIfBsQoSTrafficPriority is subid 3 of wmanIfBsServiceClassEntry.
 * Its status is Current, and its access level is Create.
 * OID: .1.3.6.1.2.1.10.184.1.1.1.3.1.3
 * Description:
The value of this parameter specifies the priority
             assigned to a service flow. For uplink service flows,
             the BS should use this parameter when determining
             precedence in request service and grant generation,
             and the SS shall preferentially select contention
             Request opportunities for Priority Request CIDs
             based on this priority. Higher numbers indicate higher
             priority
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 1      hashint   0
 *   settable   1
 *
 * Ranges:  0 - 7;
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * WMAN-IF-MIB::wmanIfBsServiceClassEntry.wmanIfBsQoSMaxSustainedRate
 * wmanIfBsQoSMaxSustainedRate is subid 4 of wmanIfBsServiceClassEntry.
 * Its status is Current, and its access level is Create.
 * OID: .1.3.6.1.2.1.10.184.1.1.1.3.1.4
 * Description:
This parameter defines the peak information rate
             of the service. The rate is expressed in bits per
             second and pertains to the SDUs at the input to
             the system.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is UNSIGNED32 (based on perltype UNSIGNED32)
 * The net-snmp type is ASN_UNSIGNED. The C type decl is u_long (u_long)
 */
/*---------------------------------------------------------------------
 * WMAN-IF-MIB::wmanIfBsServiceClassEntry.wmanIfBsQoSMaxTrafficBurst
 * wmanIfBsQoSMaxTrafficBurst is subid 5 of wmanIfBsServiceClassEntry.
 * Its status is Current, and its access level is Create.
 * OID: .1.3.6.1.2.1.10.184.1.1.1.3.1.5
 * Description:
This parameter defines the maximum burst size that
             must be accommodated for the service.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is UNSIGNED32 (based on perltype UNSIGNED32)
 * The net-snmp type is ASN_UNSIGNED. The C type decl is u_long (u_long)
 */
/*---------------------------------------------------------------------
 * WMAN-IF-MIB::wmanIfBsServiceClassEntry.wmanIfBsQoSMinReservedRate
 * wmanIfBsQoSMinReservedRate is subid 6 of wmanIfBsServiceClassEntry.
 * Its status is Current, and its access level is Create.
 * OID: .1.3.6.1.2.1.10.184.1.1.1.3.1.6
 * Description:
This parameter specifies the minimum rate reserved
             for this service flow.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is UNSIGNED32 (based on perltype UNSIGNED32)
 * The net-snmp type is ASN_UNSIGNED. The C type decl is u_long (u_long)
 */
/*---------------------------------------------------------------------
 * WMAN-IF-MIB::wmanIfBsServiceClassEntry.wmanIfBsQoSToleratedJitter
 * wmanIfBsQoSToleratedJitter is subid 7 of wmanIfBsServiceClassEntry.
 * Its status is Current, and its access level is Create.
 * OID: .1.3.6.1.2.1.10.184.1.1.1.3.1.7
 * Description:
This parameter defines the Maximum delay 
             variation (jitter) for the connection.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is UNSIGNED32 (based on perltype UNSIGNED32)
 * The net-snmp type is ASN_UNSIGNED. The C type decl is u_long (u_long)
 */
/*---------------------------------------------------------------------
 * WMAN-IF-MIB::wmanIfBsServiceClassEntry.wmanIfBsQoSMaxLatency
 * wmanIfBsQoSMaxLatency is subid 8 of wmanIfBsServiceClassEntry.
 * Its status is Current, and its access level is Create.
 * OID: .1.3.6.1.2.1.10.184.1.1.1.3.1.8
 * Description:
The value of this parameter specifies the maximum
             latency between the reception of a packet by the BS
             or SS on its network interface and the forwarding
             of the packet to its RF Interface.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is UNSIGNED32 (based on perltype UNSIGNED32)
 * The net-snmp type is ASN_UNSIGNED. The C type decl is u_long (u_long)
 */
/*---------------------------------------------------------------------
 * WMAN-IF-MIB::wmanIfBsServiceClassEntry.wmanIfBsQoSFixedVsVariableSduInd
 * wmanIfBsQoSFixedVsVariableSduInd is subid 9 of wmanIfBsServiceClassEntry.
 * Its status is Current, and its access level is Create.
 * OID: .1.3.6.1.2.1.10.184.1.1.1.3.1.9
 * Description:
The value of this parameter specifies whether the SDUs
             on the service flow are variable-length (0) or 
             fixed-length (1). The parameter is used only if
             packing is on for the service flow. The default value
             is 0, i.e.,variable-length SDUs.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 1
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *   defval: variableLength
 *
 * Enum range: 2/8. Values:  variableLength(0), fixedLength(1)
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * WMAN-IF-MIB::wmanIfBsServiceClassEntry.wmanIfBsQoSSduSize
 * wmanIfBsQoSSduSize is subid 10 of wmanIfBsServiceClassEntry.
 * Its status is Current, and its access level is Create.
 * OID: .1.3.6.1.2.1.10.184.1.1.1.3.1.10
 * Description:
The value of this parameter specifies the length of the
             SDU for a fixed-length SDU service flow. This parameter
             is used only if packing is on and the service flow is
             indicated as carrying fixed-length SDUs. The default
             value is 49 bytes, i.e., VC-switched ATM cells with PHS.
             The parameter is relevant for both ATM and Packet
             Convergence Sublayers.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 1
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *   defval: 49
 *
 *
 * Its syntax is UNSIGNED32 (based on perltype UNSIGNED32)
 * The net-snmp type is ASN_UNSIGNED. The C type decl is u_long (u_long)
 */
/*---------------------------------------------------------------------
 * WMAN-IF-MIB::wmanIfBsServiceClassEntry.wmanIfBsQosScSchedulingType
 * wmanIfBsQosScSchedulingType is subid 11 of wmanIfBsServiceClassEntry.
 * Its status is Current, and its access level is Create.
 * OID: .1.3.6.1.2.1.10.184.1.1.1.3.1.11
 * Description:
Specifies the upstream scheduling service used for
             upstream service flow. If the referenced parameter
             is not present in the corresponding 802.16 QOS
             Parameter Set of an upstream service flow, the
             default value of this object is bestEffort(2).
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 1
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *   defval: bestEffort
 *
 * Enum range: 3/8. Values:  undefined(1), bestEffort(2), nonRealTimePollingService(3), realTimePollingService(4), reserved(5), unsolicitedGrantService(6)
 *
 * Its syntax is WmanIfSfSchedulingType (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * WMAN-IF-MIB::wmanIfBsServiceClassEntry.wmanIfBsQosScArqEnable
 * wmanIfBsQosScArqEnable is subid 12 of wmanIfBsServiceClassEntry.
 * Its status is Current, and its access level is Create.
 * OID: .1.3.6.1.2.1.10.184.1.1.1.3.1.12
 * Description:
True(1) ARQ enabling is requested for the connection.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 2/8. Values:  true(1), false(2)
 *
 * Its syntax is TruthValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * WMAN-IF-MIB::wmanIfBsServiceClassEntry.wmanIfBsQosScArqWindowSize
 * wmanIfBsQosScArqWindowSize is subid 13 of wmanIfBsServiceClassEntry.
 * Its status is Current, and its access level is Create.
 * OID: .1.3.6.1.2.1.10.184.1.1.1.3.1.13
 * Description:
Indicates the maximum number of unacknowledged 
             fragments at any time.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 1      hashint   0
 *   settable   1
 *
 * Ranges:  1 - 1024;
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * WMAN-IF-MIB::wmanIfBsServiceClassEntry.wmanIfBsQosScArqBlockLifetime
 * wmanIfBsQosScArqBlockLifetime is subid 14 of wmanIfBsServiceClassEntry.
 * Its status is Current, and its access level is Create.
 * OID: .1.3.6.1.2.1.10.184.1.1.1.3.1.14
 * Description:
The maximum time interval an ARQ fragment will be
             managed by the transmitter ARQ machine, once
             initial transmission of the fragment has occured.
             If transmission or retransmission of the fragment
             is not acknowledged by the receiver before the 
             time limit is reached, the fragment is discarded.
             A value of 0 means Infinite.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 1
 *   readable   1     iscolumn 1     ranges 1      hashint   0
 *   settable   1
 *   defval: 0
 *
 * Ranges:  0 - 65535;
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * WMAN-IF-MIB::wmanIfBsServiceClassEntry.wmanIfBsQosScArqSyncLossTimeout
 * wmanIfBsQosScArqSyncLossTimeout is subid 15 of wmanIfBsServiceClassEntry.
 * Its status is Current, and its access level is Create.
 * OID: .1.3.6.1.2.1.10.184.1.1.1.3.1.15
 * Description:
The maximum interval before declaring a loss
             of synchronization of the sender and receiver
             state machines. A value of 0 means Infinite.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 1
 *   readable   1     iscolumn 1     ranges 1      hashint   0
 *   settable   1
 *   defval: 0
 *
 * Ranges:  0 - 65535;
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * WMAN-IF-MIB::wmanIfBsServiceClassEntry.wmanIfBsQosScArqDeliverInOrder
 * wmanIfBsQosScArqDeliverInOrder is subid 16 of wmanIfBsServiceClassEntry.
 * Its status is Current, and its access level is Create.
 * OID: .1.3.6.1.2.1.10.184.1.1.1.3.1.16
 * Description:
Indicates whether or not data is to be delivered
             by the receiving MAC to its client application
             in the order in which data was handed off to the
             originating MAC.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 2/8. Values:  true(1), false(2)
 *
 * Its syntax is TruthValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * WMAN-IF-MIB::wmanIfBsServiceClassEntry.wmanIfBsQosScArqRxPurgeTimeout
 * wmanIfBsQosScArqRxPurgeTimeout is subid 17 of wmanIfBsServiceClassEntry.
 * Its status is Current, and its access level is Create.
 * OID: .1.3.6.1.2.1.10.184.1.1.1.3.1.17
 * Description:
Indicates the time interval the ARQ window is advanced
             after a fragment is received. A value of 0 means
             Infinite.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 1
 *   readable   1     iscolumn 1     ranges 1      hashint   0
 *   settable   1
 *   defval: 0
 *
 * Ranges:  0 - 65535;
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * WMAN-IF-MIB::wmanIfBsServiceClassEntry.wmanIfBsQosScArqBlockSize
 * wmanIfBsQosScArqBlockSize is subid 18 of wmanIfBsServiceClassEntry.
 * Its status is Current, and its access level is Create.
 * OID: .1.3.6.1.2.1.10.184.1.1.1.3.1.18
 * Description:
The value of this parameter specifies the size of an
             ARQ block. This parameter shall be established by
             negotiation during the connection creation dialog.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 1      hashint   0
 *   settable   1
 *
 * Ranges:  1 - 2040;
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * WMAN-IF-MIB::wmanIfBsServiceClassEntry.wmanIfBsQosSCMinRsvdTolerableRate
 * wmanIfBsQosSCMinRsvdTolerableRate is subid 19 of wmanIfBsServiceClassEntry.
 * Its status is Current, and its access level is Create.
 * OID: .1.3.6.1.2.1.10.184.1.1.1.3.1.19
 * Description:
Minimum Tolerable Traffic Rate = R (bits/sec) with
             time base T(sec) means the following. Let S denote
             additional demand accumulated at the MAC SAP of the
             transmitter during an arbitrary time interval of the
             length T. Then the amount of data forwarded at the
             receiver to CS (in bits) during this interval should
             be not less than min {S, R * T}.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is UNSIGNED32 (based on perltype UNSIGNED32)
 * The net-snmp type is ASN_UNSIGNED. The C type decl is u_long (u_long)
 */
/*---------------------------------------------------------------------
 * WMAN-IF-MIB::wmanIfBsServiceClassEntry.wmanIfBsQoSReqTxPolicy
 * wmanIfBsQoSReqTxPolicy is subid 20 of wmanIfBsServiceClassEntry.
 * Its status is Current, and its access level is Create.
 * OID: .1.3.6.1.2.1.10.184.1.1.1.3.1.20
 * Description:
The value of this parameter provides the capability to
             specify certain attributes for the associated service
             flow. An attribute is enabled by setting the
             corresponding bit position to 1.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 6/16. Values:  noBroadcastBwReq(0), reserved1(1), noPiggybackReq(2), noFragmentData(3), noPHS(4), noSduPacking(5), noCrc(6), reserved2(7)
 *
 * Its syntax is BITS (based on perltype BITS)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (u_long)
 * This data type requires a length.
 */
/*---------------------------------------------------------------------
 * WMAN-IF-MIB::wmanIfBsServiceClassEntry.wmanIfBsQoSServiceClassRowStatus
 * wmanIfBsQoSServiceClassRowStatus is subid 21 of wmanIfBsServiceClassEntry.
 * Its status is Current, and its access level is Create.
 * OID: .1.3.6.1.2.1.10.184.1.1.1.3.1.21
 * Description:
This object is used to create a new row or modify or
             delete an existing row in this table.

             If the implementator of this MIB has choosen not
             to implement 'dynamic assignment' of profiles, this
             object is not useful and should return noSuchName
             upon SNMP request.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 3/8. Values:  active(1), notInService(2), notReady(3), createAndGo(4), createAndWait(5), destroy(6)
 *
 * Its syntax is RowStatus (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */


