/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 14170 $ of $
 *
 * $Id:$
 */
#ifndef WMANIFBSREGISTEREDSSTABLE_H
#define WMANIFBSREGISTEREDSSTABLE_H

#ifdef __cplusplus
extern          "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

    /*
     * other required module components
     */
    /* *INDENT-OFF*  */
config_add_mib(WMAN-IF-MIB)
config_require(WMAN-IF-MIB/wmanIfBsRegisteredSsTable/wmanIfBsRegisteredSsTable_interface)
config_require(WMAN-IF-MIB/wmanIfBsRegisteredSsTable/wmanIfBsRegisteredSsTable_data_access)
config_require(WMAN-IF-MIB/wmanIfBsRegisteredSsTable/wmanIfBsRegisteredSsTable_data_get)
config_require(WMAN-IF-MIB/wmanIfBsRegisteredSsTable/wmanIfBsRegisteredSsTable_data_set)
    /* *INDENT-ON*  */

    /*
     * OID and column number definitions for wmanIfBsRegisteredSsTable
     */
#include "wmanIfBsRegisteredSsTable_oids.h"

    /*
     * enum definions
     */
#include "wmanIfBsRegisteredSsTable_enums.h"

    /*
     *********************************************************************
     * function declarations
     */
    void            init_wmanIfBsRegisteredSsTable(void);
    void            shutdown_wmanIfBsRegisteredSsTable(void);

    /*
     *********************************************************************
     * Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table wmanIfBsRegisteredSsTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * WMAN-IF-MIB::wmanIfBsRegisteredSsTable is subid 1 of wmanIfBsCps.
     * Its status is Current.
     * OID: .1.3.6.1.2.1.10.184.1.1.2.1, length: 12
     */
    /*
     *********************************************************************
     * When you register your mib, you get to provide a generic
     * pointer that will be passed back to you for most of the
     * functions calls.
     *
     * TODO:100:r: Review all context structures
     */
    /*
     * TODO:101:o: |-> Review wmanIfBsRegisteredSsTable registration context.
     */
    typedef netsnmp_data_list wmanIfBsRegisteredSsTable_registration;

/**********************************************************************/
    /*
     * TODO:110:r: |-> Review wmanIfBsRegisteredSsTable data context structure.
     * This structure is used to represent the data for wmanIfBsRegisteredSsTable.
     */
    /*
     * This structure contains storage for all the columns defined in the
     * wmanIfBsRegisteredSsTable.
     */
    typedef struct wmanIfBsRegisteredSsTable_data_s {

        /*
         * wmanIfBsSsBasicCid(2)/WmanIfCidType/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
        long            wmanIfBsSsBasicCid;

        /*
         * wmanIfBsSsPrimaryCid(3)/WmanIfCidType/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
        long            wmanIfBsSsPrimaryCid;

        /*
         * wmanIfBsSsSecondaryCid(4)/WmanIfCidType/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
        long            wmanIfBsSsSecondaryCid;

        /*
         * wmanIfBsSsManagementSupport(5)/INTEGER/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
        u_long          wmanIfBsSsManagementSupport;

        /*
         * wmanIfBsSsIpManagementMode(6)/INTEGER/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
        u_long          wmanIfBsSsIpManagementMode;

        /*
         * wmanIfBsSs2ndMgmtArqEnable(7)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
        u_long          wmanIfBsSs2ndMgmtArqEnable;

        /*
         * wmanIfBsSs2ndMgmtArqWindowSize(8)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
        long            wmanIfBsSs2ndMgmtArqWindowSize;

        /*
         * wmanIfBsSs2ndMgmtArqDnLinkTxDelay(9)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
        long            wmanIfBsSs2ndMgmtArqDnLinkTxDelay;

        /*
         * wmanIfBsSs2ndMgmtArqUpLinkTxDelay(10)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
        long            wmanIfBsSs2ndMgmtArqUpLinkTxDelay;

        /*
         * wmanIfBsSs2ndMgmtArqDnLinkRxDelay(11)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
        long            wmanIfBsSs2ndMgmtArqDnLinkRxDelay;

        /*
         * wmanIfBsSs2ndMgmtArqUpLinkRxDelay(12)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
        long            wmanIfBsSs2ndMgmtArqUpLinkRxDelay;

        /*
         * wmanIfBsSs2ndMgmtArqBlockLifetime(13)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/D/h
         */
        long            wmanIfBsSs2ndMgmtArqBlockLifetime;

        /*
         * wmanIfBsSs2ndMgmtArqSyncLossTimeout(14)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/D/h
         */
        long            wmanIfBsSs2ndMgmtArqSyncLossTimeout;

        /*
         * wmanIfBsSs2ndMgmtArqDeliverInOrder(15)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
        u_long          wmanIfBsSs2ndMgmtArqDeliverInOrder;

        /*
         * wmanIfBsSs2ndMgmtArqRxPurgeTimeout(16)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/D/h
         */
        long            wmanIfBsSs2ndMgmtArqRxPurgeTimeout;

        /*
         * wmanIfBsSs2ndMgmtArqBlockSize(17)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
        long            wmanIfBsSs2ndMgmtArqBlockSize;

        /*
         * wmanIfBsSsVendorIdEncoding(18)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/h
         */
        char            wmanIfBsSsVendorIdEncoding[3];
        size_t          wmanIfBsSsVendorIdEncoding_len; /* # of char elements, not bytes */

        /*
         * wmanIfBsSsAasBroadcastPermission(19)/INTEGER/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
        u_long          wmanIfBsSsAasBroadcastPermission;

        /*
         * wmanIfBsSsMaxTxPowerBpsk(20)/WmanIfMaxTxPowerType/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
        long            wmanIfBsSsMaxTxPowerBpsk;

        /*
         * wmanIfBsSsMaxTxPowerQpsk(21)/WmanIfMaxTxPowerType/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
        long            wmanIfBsSsMaxTxPowerQpsk;

        /*
         * wmanIfBsSsMaxTxPower16Qam(22)/WmanIfMaxTxPowerType/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
        long            wmanIfBsSsMaxTxPower16Qam;

        /*
         * wmanIfBsSsMaxTxPower64Qam(23)/WmanIfMaxTxPowerType/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
        long            wmanIfBsSsMaxTxPower64Qam;

        /*
         * wmanIfBsSsMacVersion(24)/WmanIfMacVersion/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
        u_long          wmanIfBsSsMacVersion;

    } wmanIfBsRegisteredSsTable_data;


    /*
     * TODO:120:r: |-> Review wmanIfBsRegisteredSsTable mib index.
     * This structure is used to represent the index for wmanIfBsRegisteredSsTable.
     */
    typedef struct wmanIfBsRegisteredSsTable_mib_index_s {

        /*
         * ifIndex(1)/InterfaceIndex/ASN_INTEGER/long(long)//l/A/w/e/R/d/H
         */
        long            ifIndex;

        /*
         * wmanIfBsSsMacAddress(1)/MacAddress/ASN_OCTET_STR/char(char)//L/a/w/e/R/d/H
         */
        char            wmanIfBsSsMacAddress[6];
        size_t          wmanIfBsSsMacAddress_len;


    } wmanIfBsRegisteredSsTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review wmanIfBsRegisteredSsTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
     *
     * BE VERY CAREFUL TO TAKE INTO ACCOUNT THE MAXIMUM
     * POSSIBLE LENGHT FOR EVERY VARIABLE LENGTH INDEX!
     * Guessing 128 - col/entry(2)  - oid len(12)
     */
#define MAX_wmanIfBsRegisteredSsTable_IDX_LEN     8


    /*
     *********************************************************************
     * TODO:130:o: |-> Review wmanIfBsRegisteredSsTable Row request (rowreq) context.
     * When your functions are called, you will be passed a
     * wmanIfBsRegisteredSsTable_rowreq_ctx pointer.
     */
    typedef struct wmanIfBsRegisteredSsTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
        netsnmp_index   oid_idx;
        oid             oid_tmp[MAX_wmanIfBsRegisteredSsTable_IDX_LEN];

        wmanIfBsRegisteredSsTable_mib_index tbl_idx;

        wmanIfBsRegisteredSsTable_data data;

        /*
         * flags per row. Currently, the first (lower) 8 bits are reserved
         * for the user. See mfd.h for other flags.
         */
        u_int           rowreq_flags;

        /*
         * TODO:131:o: |   |-> Add useful data to wmanIfBsRegisteredSsTable rowreq context.
         */

        /*
         * storage for future expansion
         */
        netsnmp_data_list *wmanIfBsRegisteredSsTable_data_list;

    } wmanIfBsRegisteredSsTable_rowreq_ctx;

    typedef struct wmanIfBsRegisteredSsTable_ref_rowreq_ctx_s {
        wmanIfBsRegisteredSsTable_rowreq_ctx *rowreq_ctx;
    } wmanIfBsRegisteredSsTable_ref_rowreq_ctx;

    /*
     *********************************************************************
     * function prototypes
     */
    int
        wmanIfBsRegisteredSsTable_pre_request
        (wmanIfBsRegisteredSsTable_registration * user_context);
    int
        wmanIfBsRegisteredSsTable_post_request
        (wmanIfBsRegisteredSsTable_registration * user_context, int rc);

    int
        wmanIfBsRegisteredSsTable_rowreq_ctx_init
        (wmanIfBsRegisteredSsTable_rowreq_ctx * rowreq_ctx,
         void *user_init_ctx);
    void
        wmanIfBsRegisteredSsTable_rowreq_ctx_cleanup
        (wmanIfBsRegisteredSsTable_rowreq_ctx * rowreq_ctx);


    wmanIfBsRegisteredSsTable_rowreq_ctx
        *wmanIfBsRegisteredSsTable_row_find_by_mib_index
        (wmanIfBsRegisteredSsTable_mib_index * mib_idx);

    extern oid      wmanIfBsRegisteredSsTable_oid[];
    extern int      wmanIfBsRegisteredSsTable_oid_size;



#define MY_ROW_SIZE 5
	wmanIfBsRegisteredSsTable_mib_index index_tmp[MY_ROW_SIZE];
    wmanIfBsRegisteredSsTable_data  data_tmp[MY_ROW_SIZE];


#include "wmanIfBsRegisteredSsTable_interface.h"
#include "wmanIfBsRegisteredSsTable_data_access.h"
#include "wmanIfBsRegisteredSsTable_data_get.h"
#include "wmanIfBsRegisteredSsTable_data_set.h"

    /*
     * DUMMY markers, ignore
     *
     * TODO:099:x: *************************************************************
     * TODO:199:x: *************************************************************
     * TODO:299:x: *************************************************************
     * TODO:399:x: *************************************************************
     * TODO:499:x: *************************************************************
     */

#ifdef __cplusplus
}
#endif
#endif                          /* WMANIFBSREGISTEREDSSTABLE_H */
/** @} */
