/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 14170 $ of $
 *
 * $Id:$
 */
#ifndef WMANIFBSPROVISIONEDSFTABLE_H
#define WMANIFBSPROVISIONEDSFTABLE_H

#ifdef __cplusplus
extern          "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

    /*
     * other required module components 
     */
    /* *INDENT-OFF*  */
config_add_mib(WMAN-IF-MIB)
config_require(WMAN-IF-MIB/wmanIfBsProvisionedSfTable/wmanIfBsProvisionedSfTable_interface)
config_require(WMAN-IF-MIB/wmanIfBsProvisionedSfTable/wmanIfBsProvisionedSfTable_data_access)
config_require(WMAN-IF-MIB/wmanIfBsProvisionedSfTable/wmanIfBsProvisionedSfTable_data_get)
config_require(WMAN-IF-MIB/wmanIfBsProvisionedSfTable/wmanIfBsProvisionedSfTable_data_set)
    /* *INDENT-ON*  */

    /*
     * OID and column number definitions for wmanIfBsProvisionedSfTable 
     */
#include "wmanIfBsProvisionedSfTable_oids.h"

    /*
     * enum definions 
     */
#include "wmanIfBsProvisionedSfTable_enums.h"

    /*
     *********************************************************************
     * function declarations
     */
    void            init_wmanIfBsProvisionedSfTable(void);
    void            shutdown_wmanIfBsProvisionedSfTable(void);

    /*
     *********************************************************************
     * Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table wmanIfBsProvisionedSfTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * WMAN-IF-MIB::wmanIfBsProvisionedSfTable is subid 1 of wmanIfBsPacketCs.
     * Its status is Current.
     * OID: .1.3.6.1.2.1.10.184.1.1.1.1, length: 12
     */
    /*
     *********************************************************************
     * When you register your mib, you get to provide a generic
     * pointer that will be passed back to you for most of the
     * functions calls.
     *
     * TODO:100:r: Review all context structures
     */
    /*
     * TODO:101:o: |-> Review wmanIfBsProvisionedSfTable registration context.
     */
    typedef netsnmp_data_list wmanIfBsProvisionedSfTable_registration;

/**********************************************************************/
    /*
     * TODO:110:r: |-> Review wmanIfBsProvisionedSfTable data context structure.
     * This structure is used to represent the data for wmanIfBsProvisionedSfTable.
     */
    /*
     * This structure contains storage for all the columns defined in the
     * wmanIfBsProvisionedSfTable.
     */
    typedef struct wmanIfBsProvisionedSfTable_data_s {

        /*
         * wmanIfBsSfDirection(2)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
        u_long          wmanIfBsSfDirection;

        /*
         * wmanIfBsServiceClassIndex(3)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
        long            wmanIfBsServiceClassIndex;

        /*
         * wmanIfBsSfState(4)/WmanIfSfState/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
        u_long          wmanIfBsSfState;

        /*
         * wmanIfBsSfProvisionedTime(5)/TimeStamp/ASN_TIMETICKS/u_long(u_long)//l/A/W/e/r/d/h
         */
        u_long          wmanIfBsSfProvisionedTime;

        /*
         * wmanIfBsSfCsSpecification(6)/WmanIfCsSpecification/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
        u_long          wmanIfBsSfCsSpecification;

        /*
         * wmanIfBsProvisionedSfRowStatus(7)/RowStatus/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
        u_long          wmanIfBsProvisionedSfRowStatus;

    } wmanIfBsProvisionedSfTable_data;


    /*
     *********************************************************************
     * TODO:115:o: |-> Review wmanIfBsProvisionedSfTable undo context.
     * We're just going to use the same data structure for our
     * undo_context. If you want to do something more efficent,
     * define your typedef here.
     */
    typedef wmanIfBsProvisionedSfTable_data
        wmanIfBsProvisionedSfTable_undo_data;

    /*
     * TODO:120:r: |-> Review wmanIfBsProvisionedSfTable mib index.
     * This structure is used to represent the index for wmanIfBsProvisionedSfTable.
     */
    typedef struct wmanIfBsProvisionedSfTable_mib_index_s {

        /*
         * ifIndex(1)/InterfaceIndex/ASN_INTEGER/long(long)//l/A/w/e/R/d/H
         */
        long            ifIndex;

        /*
         * wmanIfBsSfId(1)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/R/d/h
         */
        u_long          wmanIfBsSfId;


    } wmanIfBsProvisionedSfTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review wmanIfBsProvisionedSfTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
     */
#define MAX_wmanIfBsProvisionedSfTable_IDX_LEN     2


    /*
     *********************************************************************
     * TODO:130:o: |-> Review wmanIfBsProvisionedSfTable Row request (rowreq) context.
     * When your functions are called, you will be passed a
     * wmanIfBsProvisionedSfTable_rowreq_ctx pointer.
     */
    typedef struct wmanIfBsProvisionedSfTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
        netsnmp_index   oid_idx;
        oid             oid_tmp[MAX_wmanIfBsProvisionedSfTable_IDX_LEN];

        wmanIfBsProvisionedSfTable_mib_index tbl_idx;

        wmanIfBsProvisionedSfTable_data data;
        wmanIfBsProvisionedSfTable_undo_data *undo;
        unsigned int    column_set_flags;       /* flags for set columns */


        /*
         * flags per row. Currently, the first (lower) 8 bits are reserved
         * for the user. See mfd.h for other flags.
         */
        u_int           rowreq_flags;

        /*
         * TODO:131:o: |   |-> Add useful data to wmanIfBsProvisionedSfTable rowreq context.
         */

        /*
         * storage for future expansion
         */
        netsnmp_data_list *wmanIfBsProvisionedSfTable_data_list;

    } wmanIfBsProvisionedSfTable_rowreq_ctx;

    typedef struct wmanIfBsProvisionedSfTable_ref_rowreq_ctx_s {
        wmanIfBsProvisionedSfTable_rowreq_ctx *rowreq_ctx;
    } wmanIfBsProvisionedSfTable_ref_rowreq_ctx;

    /*
     *********************************************************************
     * function prototypes
     */
    int            
        wmanIfBsProvisionedSfTable_pre_request
        (wmanIfBsProvisionedSfTable_registration * user_context);
    int            
        wmanIfBsProvisionedSfTable_post_request
        (wmanIfBsProvisionedSfTable_registration * user_context, int rc);

    int            
        wmanIfBsProvisionedSfTable_rowreq_ctx_init
        (wmanIfBsProvisionedSfTable_rowreq_ctx * rowreq_ctx,
         void *user_init_ctx);
    void           
        wmanIfBsProvisionedSfTable_rowreq_ctx_cleanup
        (wmanIfBsProvisionedSfTable_rowreq_ctx * rowreq_ctx);

    int            
        wmanIfBsProvisionedSfTable_commit
        (wmanIfBsProvisionedSfTable_rowreq_ctx * rowreq_ctx);

    wmanIfBsProvisionedSfTable_rowreq_ctx
        *wmanIfBsProvisionedSfTable_row_find_by_mib_index
        (wmanIfBsProvisionedSfTable_mib_index * mib_idx);

    extern oid      wmanIfBsProvisionedSfTable_oid[];
    extern int      wmanIfBsProvisionedSfTable_oid_size;


#include "wmanIfBsProvisionedSfTable_interface.h"
#include "wmanIfBsProvisionedSfTable_data_access.h"
#include "wmanIfBsProvisionedSfTable_data_get.h"
#include "wmanIfBsProvisionedSfTable_data_set.h"

    /*
     * DUMMY markers, ignore
     *
     * TODO:099:x: *************************************************************
     * TODO:199:x: *************************************************************
     * TODO:299:x: *************************************************************
     * TODO:399:x: *************************************************************
     * TODO:499:x: *************************************************************
     */

#ifdef __cplusplus
}
#endif
#endif                          /* WMANIFBSPROVISIONEDSFTABLE_H */
/** @} */
